//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxSelectionNode : FbxObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxSelectionNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxSelectionNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxSelectionNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxSelectionNode_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxSelectionNode Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxSelectionNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSelectionNode(cPtr, false);
    return ret;
  }

  public new static FbxSelectionNode Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxSelectionNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSelectionNode(cPtr, false);
    return ret;
  }

  public bool SetSelectionObject(FbxObject pObject) {
    bool ret = fbx_wrapperPINVOKE.FbxSelectionNode_SetSelectionObject(swigCPtr, FbxObject.getCPtr(pObject));
    return ret;
  }

  public FbxObject GetSelectionObject() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_GetSelectionObject(swigCPtr);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    return ret;
  }

  public bool IsValid() {
    bool ret = fbx_wrapperPINVOKE.FbxSelectionNode_IsValid(swigCPtr);
    return ret;
  }

  public bool mIsTheNodeInSet {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_mIsTheNodeInSet_set(swigCPtr, value);
    } 
    get {
      bool ret = fbx_wrapperPINVOKE.FbxSelectionNode_mIsTheNodeInSet_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_int_t mVertexIndexArray {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_mVertexIndexArray_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_mVertexIndexArray_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_int_t mEdgeIndexArray {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_mEdgeIndexArray_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_mEdgeIndexArray_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_int_t mPolygonIndexArray {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_mPolygonIndexArray_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_mPolygonIndexArray_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_FbxArrayT_int_t_p_t mSubTypeSelectArray {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_mSubTypeSelectArray_set(swigCPtr, SWIGTYPE_p_FbxArrayT_FbxArrayT_int_t_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_mSubTypeSelectArray_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_FbxArrayT_int_t_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_FbxArrayT_int_t_p_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char SELECT_TYPE_NAMES {
    set {
      fbx_wrapperPINVOKE.FbxSelectionNode_SELECT_TYPE_NAMES_set(SWIGTYPE_p_p_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSelectionNode_SELECT_TYPE_NAMES_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public enum ESelectType {
    eVertexLevel,
    eEdgeLevel,
    eFaceLevel,
    eObjectLevel,
    eSelectTypeCount
  }

}

}
