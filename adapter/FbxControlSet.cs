//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxControlSet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxControlSet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxControlSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void Reset() {
    fbx_wrapperPINVOKE.FbxControlSet_Reset(swigCPtr);
  }

  public void SetType(FbxControlSet.EType pType) {
    fbx_wrapperPINVOKE.FbxControlSet_SetType(swigCPtr, (int)pType);
  }

  public FbxControlSet.EType GetType() {
    FbxControlSet.EType ret = (FbxControlSet.EType)fbx_wrapperPINVOKE.FbxControlSet_GetType(swigCPtr);
    return ret;
  }

  public void SetUseAxis(bool pUseAxis) {
    fbx_wrapperPINVOKE.FbxControlSet_SetUseAxis(swigCPtr, pUseAxis);
  }

  public bool GetUseAxis() {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetUseAxis(swigCPtr);
    return ret;
  }

  public void SetLockTransform(bool pLockTransform) {
    fbx_wrapperPINVOKE.FbxControlSet_SetLockTransform(swigCPtr, pLockTransform);
  }

  public bool GetLockTransform() {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetLockTransform(swigCPtr);
    return ret;
  }

  public void SetLock3DPick(bool pLock3DPick) {
    fbx_wrapperPINVOKE.FbxControlSet_SetLock3DPick(swigCPtr, pLock3DPick);
  }

  public bool GetLock3DPick() {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetLock3DPick(swigCPtr);
    return ret;
  }

  public bool SetControlSetLink(FbxCharacter.ENodeId pCharacterNodeId, FbxControlSetLink pControlSetLink) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_SetControlSetLink(swigCPtr, (int)pCharacterNodeId, FbxControlSetLink.getCPtr(pControlSetLink));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetControlSetLink(FbxCharacter.ENodeId pCharacterNodeId, FbxControlSetLink pControlSetLink) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetControlSetLink__SWIG_0(swigCPtr, (int)pCharacterNodeId, FbxControlSetLink.getCPtr(pControlSetLink));
    return ret;
  }

  public bool GetControlSetLink(FbxCharacter.ENodeId pCharacterNodeId) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetControlSetLink__SWIG_1(swigCPtr, (int)pCharacterNodeId);
    return ret;
  }

  public bool SetEffector(FbxEffector.ENodeId pEffectorNodeId, FbxEffector pEffector) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_SetEffector(swigCPtr, (int)pEffectorNodeId, FbxEffector.getCPtr(pEffector));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetEffector(FbxEffector.ENodeId pEffectorNodeId, FbxEffector pEffector) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetEffector__SWIG_0(swigCPtr, (int)pEffectorNodeId, FbxEffector.getCPtr(pEffector));
    return ret;
  }

  public bool GetEffector(FbxEffector.ENodeId pEffectorNodeId) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetEffector__SWIG_1(swigCPtr, (int)pEffectorNodeId);
    return ret;
  }

  public bool SetEffectorAux(FbxEffector.ENodeId pEffectorNodeId, FbxNode pNode, FbxEffector.ESetId pEffectorSetId) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_SetEffectorAux__SWIG_0(swigCPtr, (int)pEffectorNodeId, FbxNode.getCPtr(pNode), (int)pEffectorSetId);
    return ret;
  }

  public bool SetEffectorAux(FbxEffector.ENodeId pEffectorNodeId, FbxNode pNode) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_SetEffectorAux__SWIG_1(swigCPtr, (int)pEffectorNodeId, FbxNode.getCPtr(pNode));
    return ret;
  }

  public bool GetEffectorAux(FbxEffector.ENodeId pEffectorNodeId, SWIGTYPE_p_p_FbxNode pNode, FbxEffector.ESetId pEffectorSetId) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetEffectorAux__SWIG_0(swigCPtr, (int)pEffectorNodeId, SWIGTYPE_p_p_FbxNode.getCPtr(pNode), (int)pEffectorSetId);
    return ret;
  }

  public bool GetEffectorAux(FbxEffector.ENodeId pEffectorNodeId, SWIGTYPE_p_p_FbxNode pNode) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetEffectorAux__SWIG_1(swigCPtr, (int)pEffectorNodeId, SWIGTYPE_p_p_FbxNode.getCPtr(pNode));
    return ret;
  }

  public bool GetEffectorAux(FbxEffector.ENodeId pEffectorNodeId) {
    bool ret = fbx_wrapperPINVOKE.FbxControlSet_GetEffectorAux__SWIG_2(swigCPtr, (int)pEffectorNodeId);
    return ret;
  }

  public static string GetEffectorNodeName(FbxEffector.ENodeId pEffectorNodeId) {
    string ret = fbx_wrapperPINVOKE.FbxControlSet_GetEffectorNodeName((int)pEffectorNodeId);
    return ret;
  }

  public static FbxEffector.ENodeId GetEffectorNodeId(string pEffectorNodeName) {
    FbxEffector.ENodeId ret = (FbxEffector.ENodeId)fbx_wrapperPINVOKE.FbxControlSet_GetEffectorNodeId(pEffectorNodeName);
    return ret;
  }

  public void FromPlug(FbxControlSetPlug pPlug) {
    fbx_wrapperPINVOKE.FbxControlSet_FromPlug(swigCPtr, FbxControlSetPlug.getCPtr(pPlug));
  }

  public void ToPlug(FbxControlSetPlug pPlug) {
    fbx_wrapperPINVOKE.FbxControlSet_ToPlug(swigCPtr, FbxControlSetPlug.getCPtr(pPlug));
  }

  public enum EType {
    eNone,
    eFkIk,
    eIkOnly
  }

}

}
