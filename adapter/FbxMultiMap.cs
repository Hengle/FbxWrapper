//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxMultiMap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxMultiMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxMultiMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxMultiMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          fbx_wrapperPINVOKE.delete_FbxMultiMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class Pair : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Pair(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pair obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Pair() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxMultiMap_Pair(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ulong mKey {
      set {
        fbx_wrapperPINVOKE.FbxMultiMap_Pair_mKey_set(swigCPtr, value);
      } 
      get {
        ulong ret = fbx_wrapperPINVOKE.FbxMultiMap_Pair_mKey_get(swigCPtr);
        return ret;
      } 
    }
  
    public ulong mItem {
      set {
        fbx_wrapperPINVOKE.FbxMultiMap_Pair_mItem_set(swigCPtr, value);
      } 
      get {
        ulong ret = fbx_wrapperPINVOKE.FbxMultiMap_Pair_mItem_get(swigCPtr);
        return ret;
      } 
    }
  
    public Pair() : this(fbx_wrapperPINVOKE.new_FbxMultiMap_Pair(), true) {
    }
  
  }

  public bool Add(ulong pKey, ulong pItem) {
    bool ret = fbx_wrapperPINVOKE.FbxMultiMap_Add(swigCPtr, pKey, pItem);
    return ret;
  }

  public bool Remove(ulong pKey) {
    bool ret = fbx_wrapperPINVOKE.FbxMultiMap_Remove(swigCPtr, pKey);
    return ret;
  }

  public bool RemoveItem(ulong pItem) {
    bool ret = fbx_wrapperPINVOKE.FbxMultiMap_RemoveItem(swigCPtr, pItem);
    return ret;
  }

  public bool SetItem(ulong pKey, ulong pItem) {
    bool ret = fbx_wrapperPINVOKE.FbxMultiMap_SetItem(swigCPtr, pKey, pItem);
    return ret;
  }

  public ulong Get(ulong pKey, SWIGTYPE_p_int pIndex) {
    ulong ret = fbx_wrapperPINVOKE.FbxMultiMap_Get__SWIG_0(swigCPtr, pKey, SWIGTYPE_p_int.getCPtr(pIndex));
    return ret;
  }

  public ulong Get(ulong pKey) {
    ulong ret = fbx_wrapperPINVOKE.FbxMultiMap_Get__SWIG_1(swigCPtr, pKey);
    return ret;
  }

  public void Clear() {
    fbx_wrapperPINVOKE.FbxMultiMap_Clear(swigCPtr);
  }

  public ulong GetFromIndex(int pIndex, SWIGTYPE_p_unsigned___int64 pKey) {
    ulong ret = fbx_wrapperPINVOKE.FbxMultiMap_GetFromIndex__SWIG_0(swigCPtr, pIndex, SWIGTYPE_p_unsigned___int64.getCPtr(pKey));
    return ret;
  }

  public ulong GetFromIndex(int pIndex) {
    ulong ret = fbx_wrapperPINVOKE.FbxMultiMap_GetFromIndex__SWIG_1(swigCPtr, pIndex);
    return ret;
  }

  public bool RemoveFromIndex(int pIndex) {
    bool ret = fbx_wrapperPINVOKE.FbxMultiMap_RemoveFromIndex(swigCPtr, pIndex);
    return ret;
  }

  public int GetCount() {
    int ret = fbx_wrapperPINVOKE.FbxMultiMap_GetCount(swigCPtr);
    return ret;
  }

  public void Swap() {
    fbx_wrapperPINVOKE.FbxMultiMap_Swap(swigCPtr);
  }

  public void Sort() {
    fbx_wrapperPINVOKE.FbxMultiMap_Sort(swigCPtr);
  }

  public FbxMultiMap(int pItemPerBlock) : this(fbx_wrapperPINVOKE.new_FbxMultiMap__SWIG_0(pItemPerBlock), true) {
  }

  public FbxMultiMap() : this(fbx_wrapperPINVOKE.new_FbxMultiMap__SWIG_1(), true) {
  }

  public FbxMultiMap(FbxMultiMap pOther) : this(fbx_wrapperPINVOKE.new_FbxMultiMap__SWIG_2(FbxMultiMap.getCPtr(pOther)), true) {
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxMultiMap assign(FbxMultiMap arg0) {
    FbxMultiMap ret = new FbxMultiMap(fbx_wrapperPINVOKE.FbxMultiMap_assign(swigCPtr, FbxMultiMap.getCPtr(arg0)), false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
