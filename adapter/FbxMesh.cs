//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxMesh : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxMesh_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxMesh_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxMesh_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxMesh Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    return ret;
  }

  public new static FbxMesh Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)fbx_wrapperPINVOKE.FbxMesh_GetAttributeType(swigCPtr);
    return ret;
  }

  public void BeginPolygon(int pMaterial, int pTexture, int pGroup, bool pLegacy) {
    fbx_wrapperPINVOKE.FbxMesh_BeginPolygon__SWIG_0(swigCPtr, pMaterial, pTexture, pGroup, pLegacy);
  }

  public void BeginPolygon(int pMaterial, int pTexture, int pGroup) {
    fbx_wrapperPINVOKE.FbxMesh_BeginPolygon__SWIG_1(swigCPtr, pMaterial, pTexture, pGroup);
  }

  public void BeginPolygon(int pMaterial, int pTexture) {
    fbx_wrapperPINVOKE.FbxMesh_BeginPolygon__SWIG_2(swigCPtr, pMaterial, pTexture);
  }

  public void BeginPolygon(int pMaterial) {
    fbx_wrapperPINVOKE.FbxMesh_BeginPolygon__SWIG_3(swigCPtr, pMaterial);
  }

  public void BeginPolygon() {
    fbx_wrapperPINVOKE.FbxMesh_BeginPolygon__SWIG_4(swigCPtr);
  }

  public void BeginPolygonExt(int pMaterial, SWIGTYPE_p_int pTextures) {
    fbx_wrapperPINVOKE.FbxMesh_BeginPolygonExt(swigCPtr, pMaterial, SWIGTYPE_p_int.getCPtr(pTextures));
  }

  public void AddPolygon(int pIndex, int pTextureUVIndex) {
    fbx_wrapperPINVOKE.FbxMesh_AddPolygon__SWIG_0(swigCPtr, pIndex, pTextureUVIndex);
  }

  public void AddPolygon(int pIndex) {
    fbx_wrapperPINVOKE.FbxMesh_AddPolygon__SWIG_1(swigCPtr, pIndex);
  }

  public void EndPolygon() {
    fbx_wrapperPINVOKE.FbxMesh_EndPolygon(swigCPtr);
  }

  public int GetPolygonCount() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonCount(swigCPtr);
    return ret;
  }

  public int GetPolygonSize(int pPolygonIndex) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonSize(swigCPtr, pPolygonIndex);
    return ret;
  }

  public int GetPolygonGroup(int pPolygonIndex) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonGroup(swigCPtr, pPolygonIndex);
    return ret;
  }

  public void SetPolygonGroup(int pPolygonIndex, int pGroup) {
    fbx_wrapperPINVOKE.FbxMesh_SetPolygonGroup(swigCPtr, pPolygonIndex, pGroup);
  }

  public int GetPolygonVertex(int pPolygonIndex, int pPositionInPolygon) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertex(swigCPtr, pPolygonIndex, pPositionInPolygon);
    return ret;
  }

  public bool GetPolygonVertexNormal(int pPolyIndex, int pVertexIndex, FbxVector4 pNormal) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexNormal(swigCPtr, pPolyIndex, pVertexIndex, FbxVector4.getCPtr(pNormal));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPolygonVertexNormals(SWIGTYPE_p_FbxArrayT_FbxVector4_t pNormals) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexNormals(swigCPtr, SWIGTYPE_p_FbxArrayT_FbxVector4_t.getCPtr(pNormals));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPolygonVertexUV(int pPolyIndex, int pVertexIndex, string pUVSetName, FbxVector2 pUV, SWIGTYPE_p_bool pUnmapped) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexUV(swigCPtr, pPolyIndex, pVertexIndex, pUVSetName, FbxVector2.getCPtr(pUV), SWIGTYPE_p_bool.getCPtr(pUnmapped));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPolygonVertexUVs(string pUVSetName, SWIGTYPE_p_FbxArrayT_FbxVector2_t pUVs, SWIGTYPE_p_FbxArrayT_int_t pUnmappedUVId) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexUVs__SWIG_0(swigCPtr, pUVSetName, SWIGTYPE_p_FbxArrayT_FbxVector2_t.getCPtr(pUVs), SWIGTYPE_p_FbxArrayT_int_t.getCPtr(pUnmappedUVId));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPolygonVertexUVs(string pUVSetName, SWIGTYPE_p_FbxArrayT_FbxVector2_t pUVs) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexUVs__SWIG_1(swigCPtr, pUVSetName, SWIGTYPE_p_FbxArrayT_FbxVector2_t.getCPtr(pUVs));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int GetPolygonVertices() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertices(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public int GetPolygonVertexCount() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexCount(swigCPtr);
    return ret;
  }

  public int GetPolygonVertexIndex(int pPolygonIndex) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetPolygonVertexIndex(swigCPtr, pPolygonIndex);
    return ret;
  }

  public int RemovePolygon(int pPolygonIndex) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_RemovePolygon(swigCPtr, pPolygonIndex);
    return ret;
  }

  public int RemoveDuplicatedEdges(SWIGTYPE_p_FbxArrayT_int_t pEdgeIndexList) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_RemoveDuplicatedEdges(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(pEdgeIndexList));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void InitTextureUV(int pCount, FbxLayerElement.EType pTypeIdentifier) {
    fbx_wrapperPINVOKE.FbxMesh_InitTextureUV__SWIG_0(swigCPtr, pCount, (int)pTypeIdentifier);
  }

  public void InitTextureUV(int pCount) {
    fbx_wrapperPINVOKE.FbxMesh_InitTextureUV__SWIG_1(swigCPtr, pCount);
  }

  public void AddTextureUV(FbxVector2 pUV, FbxLayerElement.EType pTypeIdentifier) {
    fbx_wrapperPINVOKE.FbxMesh_AddTextureUV__SWIG_0(swigCPtr, FbxVector2.getCPtr(pUV), (int)pTypeIdentifier);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTextureUV(FbxVector2 pUV) {
    fbx_wrapperPINVOKE.FbxMesh_AddTextureUV__SWIG_1(swigCPtr, FbxVector2.getCPtr(pUV));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetTextureUVCount(FbxLayerElement.EType pTypeIdentifier) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureUVCount__SWIG_0(swigCPtr, (int)pTypeIdentifier);
    return ret;
  }

  public int GetTextureUVCount() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureUVCount__SWIG_1(swigCPtr);
    return ret;
  }

  public int GetUVLayerCount() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetUVLayerCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FbxArrayT_FbxLayerElement__EType_t GetAllChannelUV(int pLayer) {
    SWIGTYPE_p_FbxArrayT_FbxLayerElement__EType_t ret = new SWIGTYPE_p_FbxArrayT_FbxLayerElement__EType_t(fbx_wrapperPINVOKE.FbxMesh_GetAllChannelUV(swigCPtr, pLayer), true);
    return ret;
  }

  public void InitMaterialIndices(FbxLayerElement.EMappingMode pMappingMode) {
    fbx_wrapperPINVOKE.FbxMesh_InitMaterialIndices(swigCPtr, (int)pMappingMode);
  }

  public void InitTextureIndices(FbxLayerElement.EMappingMode pMappingMode, FbxLayerElement.EType pTextureType) {
    fbx_wrapperPINVOKE.FbxMesh_InitTextureIndices(swigCPtr, (int)pMappingMode, (int)pTextureType);
  }

  public void InitTextureUVIndices(FbxLayerElement.EMappingMode pMappingMode, FbxLayerElement.EType pTypeIdentifier) {
    fbx_wrapperPINVOKE.FbxMesh_InitTextureUVIndices__SWIG_0(swigCPtr, (int)pMappingMode, (int)pTypeIdentifier);
  }

  public void InitTextureUVIndices(FbxLayerElement.EMappingMode pMappingMode) {
    fbx_wrapperPINVOKE.FbxMesh_InitTextureUVIndices__SWIG_1(swigCPtr, (int)pMappingMode);
  }

  public int GetTextureUVIndex(int pPolygonIndex, int pPositionInPolygon, FbxLayerElement.EType pTypeIdentifier) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureUVIndex__SWIG_0(swigCPtr, pPolygonIndex, pPositionInPolygon, (int)pTypeIdentifier);
    return ret;
  }

  public int GetTextureUVIndex(int pPolygonIndex, int pPositionInPolygon) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureUVIndex__SWIG_1(swigCPtr, pPolygonIndex, pPositionInPolygon);
    return ret;
  }

  public void SetTextureUVIndex(int pPolygonIndex, int pPositionInPolygon, int pIndex, FbxLayerElement.EType pTypeIdentifier) {
    fbx_wrapperPINVOKE.FbxMesh_SetTextureUVIndex(swigCPtr, pPolygonIndex, pPositionInPolygon, pIndex, (int)pTypeIdentifier);
  }

  public void Reset() {
    fbx_wrapperPINVOKE.FbxMesh_Reset(swigCPtr);
  }

  public bool GenerateNormals(bool pOverwrite, bool pByCtrlPoint, bool pCW) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateNormals__SWIG_0(swigCPtr, pOverwrite, pByCtrlPoint, pCW);
    return ret;
  }

  public bool GenerateNormals(bool pOverwrite, bool pByCtrlPoint) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateNormals__SWIG_1(swigCPtr, pOverwrite, pByCtrlPoint);
    return ret;
  }

  public bool GenerateNormals(bool pOverwrite) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateNormals__SWIG_2(swigCPtr, pOverwrite);
    return ret;
  }

  public bool GenerateNormals() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateNormals__SWIG_3(swigCPtr);
    return ret;
  }

  public bool CheckIfVertexNormalsCCW() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_CheckIfVertexNormalsCCW(swigCPtr);
    return ret;
  }

  public class DuplicateVertex : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal DuplicateVertex(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DuplicateVertex obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~DuplicateVertex() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxMesh_DuplicateVertex(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public DuplicateVertex() : this(fbx_wrapperPINVOKE.new_FbxMesh_DuplicateVertex(), true) {
    }
  
    public int lVertexPolyIndex {
      set {
        fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lVertexPolyIndex_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lVertexPolyIndex_get(swigCPtr);
        return ret;
      } 
    }
  
    public int lNewVertexIndex {
      set {
        fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lNewVertexIndex_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lNewVertexIndex_get(swigCPtr);
        return ret;
      } 
    }
  
    public FbxVector4 lNormal {
      set {
        fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lNormal_set(swigCPtr, FbxVector4.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lNormal_get(swigCPtr);
        FbxVector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxVector4(cPtr, false);
        return ret;
      } 
    }
  
    public FbxVector2 lUV {
      set {
        fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lUV_set(swigCPtr, FbxVector2.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lUV_get(swigCPtr);
        FbxVector2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxVector2(cPtr, false);
        return ret;
      } 
    }
  
    public int lEdgeIndex {
      set {
        fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lEdgeIndex_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_DuplicateVertex_lEdgeIndex_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public class VertexNormalInfo : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal VertexNormalInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VertexNormalInfo obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~VertexNormalInfo() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxMesh_VertexNormalInfo(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public VertexNormalInfo() : this(fbx_wrapperPINVOKE.new_FbxMesh_VertexNormalInfo(), true) {
    }
  
    public FbxVector4 mTotalNormal {
      set {
        fbx_wrapperPINVOKE.FbxMesh_VertexNormalInfo_mTotalNormal_set(swigCPtr, FbxVector4.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_VertexNormalInfo_mTotalNormal_get(swigCPtr);
        FbxVector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxVector4(cPtr, false);
        return ret;
      } 
    }
  
    public int mNumNormal {
      set {
        fbx_wrapperPINVOKE.FbxMesh_VertexNormalInfo_mNumNormal_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_VertexNormalInfo_mNumNormal_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public bool CheckSamePointTwice() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_CheckSamePointTwice(swigCPtr);
    return ret;
  }

  public int RemoveBadPolygons() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_RemoveBadPolygons(swigCPtr);
    return ret;
  }

  public bool SplitPoints(FbxLayerElement.EType pTypeIdentifier) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SplitPoints__SWIG_0(swigCPtr, (int)pTypeIdentifier);
    return ret;
  }

  public bool SplitPoints() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SplitPoints__SWIG_1(swigCPtr);
    return ret;
  }

  public bool BuildMergeList(SWIGTYPE_p_FbxArrayT_int_t pMergeList, bool pExport) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_BuildMergeList__SWIG_0(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(pMergeList), pExport);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BuildMergeList(SWIGTYPE_p_FbxArrayT_int_t pMergeList) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_BuildMergeList__SWIG_1(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(pMergeList));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MergePointsForPolygonVerteNormals(SWIGTYPE_p_FbxArrayT_int_t pMergeList) {
    fbx_wrapperPINVOKE.FbxMesh_MergePointsForPolygonVerteNormals(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(pMergeList));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void BuildMeshEdgeArray() {
    fbx_wrapperPINVOKE.FbxMesh_BuildMeshEdgeArray(swigCPtr);
  }

  public int GetMeshEdgeCount() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetMeshEdgeCount(swigCPtr);
    return ret;
  }

  public int GetMeshEdgeIndex(int pStartVertexIndex, int pEndVertexIndex, SWIGTYPE_p_bool pReversed, int pExistedEdgeCount) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetMeshEdgeIndex__SWIG_0(swigCPtr, pStartVertexIndex, pEndVertexIndex, SWIGTYPE_p_bool.getCPtr(pReversed), pExistedEdgeCount);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetMeshEdgeIndex(int pStartVertexIndex, int pEndVertexIndex, SWIGTYPE_p_bool pReversed) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetMeshEdgeIndex__SWIG_1(swigCPtr, pStartVertexIndex, pEndVertexIndex, SWIGTYPE_p_bool.getCPtr(pReversed));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void BeginGetMeshEdgeIndexForPolygon() {
    fbx_wrapperPINVOKE.FbxMesh_BeginGetMeshEdgeIndexForPolygon(swigCPtr);
  }

  public void EndGetMeshEdgeIndexForPolygon() {
    fbx_wrapperPINVOKE.FbxMesh_EndGetMeshEdgeIndexForPolygon(swigCPtr);
  }

  public int GetMeshEdgeIndexForPolygon(int pPolygon, int pPositionInPolygon) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetMeshEdgeIndexForPolygon(swigCPtr, pPolygon, pPositionInPolygon);
    return ret;
  }

  public void GetMeshEdgeVertices(int pEdgeIndex, SWIGTYPE_p_int pStartVertexIndex, SWIGTYPE_p_int pEndVertexIndex) {
    fbx_wrapperPINVOKE.FbxMesh_GetMeshEdgeVertices(swigCPtr, pEdgeIndex, SWIGTYPE_p_int.getCPtr(pStartVertexIndex), SWIGTYPE_p_int.getCPtr(pEndVertexIndex));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void BeginGetMeshEdgeVertices() {
    fbx_wrapperPINVOKE.FbxMesh_BeginGetMeshEdgeVertices(swigCPtr);
  }

  public void EndGetMeshEdgeVertices() {
    fbx_wrapperPINVOKE.FbxMesh_EndGetMeshEdgeVertices(swigCPtr);
  }

  public void SetMeshEdgeCount(int pEdgeCount) {
    fbx_wrapperPINVOKE.FbxMesh_SetMeshEdgeCount(swigCPtr, pEdgeCount);
  }

  public void SetMeshEdge(int pEdgeIndex, int pValue) {
    fbx_wrapperPINVOKE.FbxMesh_SetMeshEdge(swigCPtr, pEdgeIndex, pValue);
  }

  public int AddMeshEdgeIndex(int pStartVertexIndex, int pEndVertexIndex, bool pCheckForDuplicates) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_AddMeshEdgeIndex(swigCPtr, pStartVertexIndex, pEndVertexIndex, pCheckForDuplicates);
    return ret;
  }

  public int SetMeshEdgeIndex(int pEdgeIndex, int pStartVertexIndex, int pEndVertexIndex, bool pCheckForDuplicates, int pExistedEdgeCount) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_SetMeshEdgeIndex__SWIG_0(swigCPtr, pEdgeIndex, pStartVertexIndex, pEndVertexIndex, pCheckForDuplicates, pExistedEdgeCount);
    return ret;
  }

  public int SetMeshEdgeIndex(int pEdgeIndex, int pStartVertexIndex, int pEndVertexIndex, bool pCheckForDuplicates) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_SetMeshEdgeIndex__SWIG_1(swigCPtr, pEdgeIndex, pStartVertexIndex, pEndVertexIndex, pCheckForDuplicates);
    return ret;
  }

  public void BeginAddMeshEdgeIndex() {
    fbx_wrapperPINVOKE.FbxMesh_BeginAddMeshEdgeIndex(swigCPtr);
  }

  public void EndAddMeshEdgeIndex() {
    fbx_wrapperPINVOKE.FbxMesh_EndAddMeshEdgeIndex(swigCPtr);
  }

  public int AddMeshEdgeIndexForPolygon(int pPolygonIndex, int pPositionInPolygon) {
    int ret = fbx_wrapperPINVOKE.FbxMesh_AddMeshEdgeIndexForPolygon(swigCPtr, pPolygonIndex, pPositionInPolygon);
    return ret;
  }

  public bool SetMeshEdgeIndex(int pEdgeIndex, int pPolygonIndex, int pPositionInPolygon) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetMeshEdgeIndex__SWIG_2(swigCPtr, pEdgeIndex, pPolygonIndex, pPositionInPolygon);
    return ret;
  }

  public bool IsTriangleMesh() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_IsTriangleMesh(swigCPtr);
    return ret;
  }

  public void ReservePolygonCount(int pCount) {
    fbx_wrapperPINVOKE.FbxMesh_ReservePolygonCount(swigCPtr, pCount);
  }

  public void ReservePolygonVertexCount(int pCount) {
    fbx_wrapperPINVOKE.FbxMesh_ReservePolygonVertexCount(swigCPtr, pCount);
  }

  public bool GetTextureUV(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_FbxVector2_t pLockableArray, FbxLayerElement.EType pTypeIdentifier) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureUV__SWIG_0(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_FbxVector2_t.getCPtr(pLockableArray), (int)pTypeIdentifier);
    return ret;
  }

  public bool GetTextureUV(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_FbxVector2_t pLockableArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureUV__SWIG_1(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_FbxVector2_t.getCPtr(pLockableArray));
    return ret;
  }

  public bool GetMaterialIndices(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_int_t pLockableArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetMaterialIndices(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_int_t.getCPtr(pLockableArray));
    return ret;
  }

  public bool GetTextureIndices(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_int_t pLockableArray, FbxLayerElement.EType pTextureType) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetTextureIndices(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_int_t.getCPtr(pLockableArray), (int)pTextureType);
    return ret;
  }

  public double GetEdgeCreaseInfo(int pEdgeIndex) {
    double ret = fbx_wrapperPINVOKE.FbxMesh_GetEdgeCreaseInfo(swigCPtr, pEdgeIndex);
    return ret;
  }

  public bool GetEdgeCreaseInfoArray(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_double_t pCreaseArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetEdgeCreaseInfoArray(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_double_t.getCPtr(pCreaseArray));
    return ret;
  }

  public double GetVertexCreaseInfo(int pVertexIndex) {
    double ret = fbx_wrapperPINVOKE.FbxMesh_GetVertexCreaseInfo(swigCPtr, pVertexIndex);
    return ret;
  }

  public bool GetVertexCreaseInfoArray(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_double_t pCreaseArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetVertexCreaseInfoArray(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_double_t.getCPtr(pCreaseArray));
    return ret;
  }

  public bool SetEdgeCreaseInfo(int pEdgeIndex, double pWeight) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetEdgeCreaseInfo(swigCPtr, pEdgeIndex, pWeight);
    return ret;
  }

  public bool SetEdgeCreaseInfoArray(SWIGTYPE_p_FbxArrayT_double_t pWeightArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetEdgeCreaseInfoArray(swigCPtr, SWIGTYPE_p_FbxArrayT_double_t.getCPtr(pWeightArray));
    return ret;
  }

  public bool SetVertexCreaseInfo(int pVertexIndex, double pWeight) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetVertexCreaseInfo(swigCPtr, pVertexIndex, pWeight);
    return ret;
  }

  public bool SetVertexCreaseInfoArray(SWIGTYPE_p_FbxArrayT_double_t pWeightArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetVertexCreaseInfoArray(swigCPtr, SWIGTYPE_p_FbxArrayT_double_t.getCPtr(pWeightArray));
    return ret;
  }

  public FbxMesh.ESmoothness GetMeshSmoothness() {
    FbxMesh.ESmoothness ret = (FbxMesh.ESmoothness)fbx_wrapperPINVOKE.FbxMesh_GetMeshSmoothness(swigCPtr);
    return ret;
  }

  public void SetMeshSmoothness(FbxMesh.ESmoothness pSmoothness) {
    fbx_wrapperPINVOKE.FbxMesh_SetMeshSmoothness(swigCPtr, (int)pSmoothness);
  }

  public int GetMeshPreviewDivisionLevels() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetMeshPreviewDivisionLevels(swigCPtr);
    return ret;
  }

  public void SetMeshPreviewDivisionLevels(int pPreviewDivisionLevels) {
    fbx_wrapperPINVOKE.FbxMesh_SetMeshPreviewDivisionLevels(swigCPtr, pPreviewDivisionLevels);
  }

  public int GetMeshRenderDivisionLevels() {
    int ret = fbx_wrapperPINVOKE.FbxMesh_GetMeshRenderDivisionLevels(swigCPtr);
    return ret;
  }

  public void SetMeshRenderDivisionLevels(int pRenderDivisionLevels) {
    fbx_wrapperPINVOKE.FbxMesh_SetMeshRenderDivisionLevels(swigCPtr, pRenderDivisionLevels);
  }

  public bool GetDisplaySubdivisions() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetDisplaySubdivisions(swigCPtr);
    return ret;
  }

  public void SetDisplaySubdivisions(bool pDisplySubdivisions) {
    fbx_wrapperPINVOKE.FbxMesh_SetDisplaySubdivisions(swigCPtr, pDisplySubdivisions);
  }

  public FbxMesh.EBoundaryRule GetBoundaryRule() {
    FbxMesh.EBoundaryRule ret = (FbxMesh.EBoundaryRule)fbx_wrapperPINVOKE.FbxMesh_GetBoundaryRule(swigCPtr);
    return ret;
  }

  public void SetBoundaryRule(FbxMesh.EBoundaryRule pBoundaryRule) {
    fbx_wrapperPINVOKE.FbxMesh_SetBoundaryRule(swigCPtr, (int)pBoundaryRule);
  }

  public bool GetPreserveBorders() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPreserveBorders(swigCPtr);
    return ret;
  }

  public void SetPreserveBorders(bool pPreserveBorders) {
    fbx_wrapperPINVOKE.FbxMesh_SetPreserveBorders(swigCPtr, pPreserveBorders);
  }

  public bool GetPreserveHardEdges() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPreserveHardEdges(swigCPtr);
    return ret;
  }

  public void SetPreserveHardEdges(bool pPreserveHardEdges) {
    fbx_wrapperPINVOKE.FbxMesh_SetPreserveHardEdges(swigCPtr, pPreserveHardEdges);
  }

  public bool GetPropagateEdgeHardness() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPropagateEdgeHardness(swigCPtr);
    return ret;
  }

  public void SetPropagateEdgeHardness(bool pPropagateEdgeHardness) {
    fbx_wrapperPINVOKE.FbxMesh_SetPropagateEdgeHardness(swigCPtr, pPropagateEdgeHardness);
  }

  public bool GetPolyHoleInfo(int pFaceIndex) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolyHoleInfo(swigCPtr, pFaceIndex);
    return ret;
  }

  public bool GetPolyHoleInfoArray(SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_bool_t pHoleArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GetPolyHoleInfoArray(swigCPtr, SWIGTYPE_p_p_FbxLayerElementArrayTemplateT_bool_t.getCPtr(pHoleArray));
    return ret;
  }

  public bool SetPolyHoleInfo(int pFaceIndex, bool pIsHole) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetPolyHoleInfo(swigCPtr, pFaceIndex, pIsHole);
    return ret;
  }

  public bool SetPolyHoleInfoArray(SWIGTYPE_p_FbxArrayT_bool_t pHoleArray) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_SetPolyHoleInfoArray(swigCPtr, SWIGTYPE_p_FbxArrayT_bool_t.getCPtr(pHoleArray));
    return ret;
  }

  public bool GenerateTangentsData(string pUVSetName, bool pOverwrite) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsData__SWIG_0(swigCPtr, pUVSetName, pOverwrite);
    return ret;
  }

  public bool GenerateTangentsData(string pUVSetName) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsData__SWIG_1(swigCPtr, pUVSetName);
    return ret;
  }

  public bool GenerateTangentsData() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsData__SWIG_2(swigCPtr);
    return ret;
  }

  public bool GenerateTangentsData(int pUVSetLayerIndex, bool pOverwrite) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsData__SWIG_3(swigCPtr, pUVSetLayerIndex, pOverwrite);
    return ret;
  }

  public bool GenerateTangentsData(int pUVSetLayerIndex) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsData__SWIG_4(swigCPtr, pUVSetLayerIndex);
    return ret;
  }

  public bool GenerateTangentsDataForAllUVSets(bool pOverwrite) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsDataForAllUVSets__SWIG_0(swigCPtr, pOverwrite);
    return ret;
  }

  public bool GenerateTangentsDataForAllUVSets() {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_GenerateTangentsDataForAllUVSets__SWIG_1(swigCPtr);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(fbx_wrapperPINVOKE.FbxMesh_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Compact() {
    fbx_wrapperPINVOKE.FbxMesh_Compact(swigCPtr);
  }

  public class PolygonDef : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal PolygonDef(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PolygonDef obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~PolygonDef() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxMesh_PolygonDef(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public int mIndex {
      set {
        fbx_wrapperPINVOKE.FbxMesh_PolygonDef_mIndex_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_PolygonDef_mIndex_get(swigCPtr);
        return ret;
      } 
    }
  
    public int mSize {
      set {
        fbx_wrapperPINVOKE.FbxMesh_PolygonDef_mSize_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_PolygonDef_mSize_get(swigCPtr);
        return ret;
      } 
    }
  
    public int mGroup {
      set {
        fbx_wrapperPINVOKE.FbxMesh_PolygonDef_mGroup_set(swigCPtr, value);
      } 
      get {
        int ret = fbx_wrapperPINVOKE.FbxMesh_PolygonDef_mGroup_get(swigCPtr);
        return ret;
      } 
    }
  
    public PolygonDef() : this(fbx_wrapperPINVOKE.new_FbxMesh_PolygonDef(), true) {
    }
  
  }

  public SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t mPolygons {
    set {
      fbx_wrapperPINVOKE.FbxMesh_mPolygons_set(swigCPtr, SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_mPolygons_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_int_t mPolygonVertices {
    set {
      fbx_wrapperPINVOKE.FbxMesh_mPolygonVertices_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_mPolygonVertices_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_int_t mEdgeArray {
    set {
      fbx_wrapperPINVOKE.FbxMesh_mEdgeArray_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_mEdgeArray_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t mOriginalPolygons {
    set {
      fbx_wrapperPINVOKE.FbxMesh_mOriginalPolygons_set(swigCPtr, SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_mOriginalPolygons_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_FbxMesh__PolygonDef_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxArrayT_int_t mOriginalPolygonVertices {
    set {
      fbx_wrapperPINVOKE.FbxMesh_mOriginalPolygonVertices_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_mOriginalPolygonVertices_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    } 
  }

  public int mOriginalControlPointsCount {
    set {
      fbx_wrapperPINVOKE.FbxMesh_mOriginalControlPointsCount_set(swigCPtr, value);
    } 
    get {
      int ret = fbx_wrapperPINVOKE.FbxMesh_mOriginalControlPointsCount_get(swigCPtr);
      return ret;
    } 
  }

  public class ComponentMap : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ComponentMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ComponentMap obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ComponentMap() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxMesh_ComponentMap(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public SWIGTYPE_p_FbxArrayT_int_t mData {
      set {
        fbx_wrapperPINVOKE.FbxMesh_ComponentMap_mData_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_ComponentMap_mData_get(swigCPtr);
        SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_FbxArrayT_int_t mOffsets {
      set {
        fbx_wrapperPINVOKE.FbxMesh_ComponentMap_mOffsets_set(swigCPtr, SWIGTYPE_p_FbxArrayT_int_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_ComponentMap_mOffsets_get(swigCPtr);
        SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
        return ret;
      } 
    }
  
    public int GetDataCount(int pIndex) {
      int ret = fbx_wrapperPINVOKE.FbxMesh_ComponentMap_GetDataCount(swigCPtr, pIndex);
      return ret;
    }
  
    public int GetData(int pIndex, int pSubIndex) {
      int ret = fbx_wrapperPINVOKE.FbxMesh_ComponentMap_GetData(swigCPtr, pIndex, pSubIndex);
      return ret;
    }
  
    public int GetComponentCount() {
      int ret = fbx_wrapperPINVOKE.FbxMesh_ComponentMap_GetComponentCount(swigCPtr);
      return ret;
    }
  
    public ComponentMap() : this(fbx_wrapperPINVOKE.new_FbxMesh_ComponentMap(), true) {
    }
  
  }

  public void ComputeComponentMaps(FbxMesh.ComponentMap pEdgeToPolyMap, FbxMesh.ComponentMap pPolyToEdgeMap) {
    fbx_wrapperPINVOKE.FbxMesh_ComputeComponentMaps(swigCPtr, FbxMesh.ComponentMap.getCPtr(pEdgeToPolyMap), FbxMesh.ComponentMap.getCPtr(pPolyToEdgeMap));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public class ControlPointToVerticesMap : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ControlPointToVerticesMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ControlPointToVerticesMap obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ControlPointToVerticesMap() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxMesh_ControlPointToVerticesMap(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ControlPointToVerticesMap() : this(fbx_wrapperPINVOKE.new_FbxMesh_ControlPointToVerticesMap(), true) {
    }
  
    public bool Valid() {
      bool ret = fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_Valid(swigCPtr);
      return ret;
    }
  
    public void Fill(FbxMesh pMesh) {
      fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_Fill(swigCPtr, FbxMesh.getCPtr(pMesh));
    }
  
    public int GetCount() {
      int ret = fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_GetCount(swigCPtr);
      return ret;
    }
  
    public bool Init(int pNbEntries) {
      bool ret = fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_Init(swigCPtr, pNbEntries);
      return ret;
    }
  
    public void Clear() {
      fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_Clear(swigCPtr);
    }
  
    public SWIGTYPE_p_FbxArrayT_int_t GetVerticesArray(int pControlPoint) {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_GetVerticesArray(swigCPtr, pControlPoint);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    }
  
    public SWIGTYPE_p_FbxArrayT_int_t at(int pControlPoint) {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMesh_ControlPointToVerticesMap_at(swigCPtr, pControlPoint);
      SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
      return ret;
    }
  
  }

  public void ComputeControlPointToVerticesMap(FbxMesh.ControlPointToVerticesMap pMap) {
    fbx_wrapperPINVOKE.FbxMesh_ComputeControlPointToVerticesMap(swigCPtr, FbxMesh.ControlPointToVerticesMap.getCPtr(pMap));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ConformNormalsTo(FbxMesh pMesh) {
    bool ret = fbx_wrapperPINVOKE.FbxMesh_ConformNormalsTo(swigCPtr, FbxMesh.getCPtr(pMesh));
    return ret;
  }

  public enum ESmoothness {
    eHull,
    eRough,
    eMedium,
    eFine
  }

  public enum EBoundaryRule {
    eLegacy,
    eCreaseAll,
    eCreaseEdge
  }

}

}
