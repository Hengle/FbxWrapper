//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxTransform : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxTransform(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxTransform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxTransform() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          fbx_wrapperPINVOKE.delete_FbxTransform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxTransform() : this(fbx_wrapperPINVOKE.new_FbxTransform(), true) {
  }

  public FbxTransform.EInheritType GetInheritType() {
    FbxTransform.EInheritType ret = (FbxTransform.EInheritType)fbx_wrapperPINVOKE.FbxTransform_GetInheritType(swigCPtr);
    return ret;
  }

  public void SetInheritType(FbxTransform.EInheritType pType) {
    fbx_wrapperPINVOKE.FbxTransform_SetInheritType(swigCPtr, (int)pType);
  }

  public FbxLimits GetTranslationLimits() {
    FbxLimits ret = new FbxLimits(fbx_wrapperPINVOKE.FbxTransform_GetTranslationLimits(swigCPtr), false);
    return ret;
  }

  public FbxLimits GetRotationLimits() {
    FbxLimits ret = new FbxLimits(fbx_wrapperPINVOKE.FbxTransform_GetRotationLimits(swigCPtr), false);
    return ret;
  }

  public FbxLimits GetScalingLimits() {
    FbxLimits ret = new FbxLimits(fbx_wrapperPINVOKE.FbxTransform_GetScalingLimits(swigCPtr), false);
    return ret;
  }

  public FbxRotationOrder GetRotationOrder() {
    FbxRotationOrder ret = new FbxRotationOrder(fbx_wrapperPINVOKE.FbxTransform_GetRotationOrder(swigCPtr), false);
    return ret;
  }

  public bool HasROffset() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_HasROffset(swigCPtr);
    return ret;
  }

  public bool HasRPivot() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_HasRPivot(swigCPtr);
    return ret;
  }

  public bool HasSOffset() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_HasSOffset(swigCPtr);
    return ret;
  }

  public bool HasSPivot() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_HasSPivot(swigCPtr);
    return ret;
  }

  public bool HasPreRM() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_HasPreRM(swigCPtr);
    return ret;
  }

  public bool HasPostRM() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_HasPostRM(swigCPtr);
    return ret;
  }

  public void SetROffset(FbxVector4 pROffset) {
    fbx_wrapperPINVOKE.FbxTransform_SetROffset(swigCPtr, FbxVector4.getCPtr(pROffset));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRPivot(FbxVector4 pRPivot) {
    fbx_wrapperPINVOKE.FbxTransform_SetRPivot(swigCPtr, FbxVector4.getCPtr(pRPivot));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSOffset(FbxVector4 pSOffset) {
    fbx_wrapperPINVOKE.FbxTransform_SetSOffset(swigCPtr, FbxVector4.getCPtr(pSOffset));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSPivot(FbxVector4 pSPivot) {
    fbx_wrapperPINVOKE.FbxTransform_SetSPivot(swigCPtr, FbxVector4.getCPtr(pSPivot));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPreRM(FbxVector4 pPreR) {
    fbx_wrapperPINVOKE.FbxTransform_SetPreRM(swigCPtr, FbxVector4.getCPtr(pPreR));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPostRM(FbxVector4 pPostR) {
    fbx_wrapperPINVOKE.FbxTransform_SetPostRM(swigCPtr, FbxVector4.getCPtr(pPostR));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetRotationSpaceForLimitOnly() {
    bool ret = fbx_wrapperPINVOKE.FbxTransform_GetRotationSpaceForLimitOnly(swigCPtr);
    return ret;
  }

  public void SetRotationSpaceForLimitOnly(bool pRotationSpaceForLimitOnly) {
    fbx_wrapperPINVOKE.FbxTransform_SetRotationSpaceForLimitOnly(swigCPtr, pRotationSpaceForLimitOnly);
  }

  public void DoF2LT(FbxVector4 pLT, FbxVector4 pDoF, FbxAMatrix pLRM, FbxAMatrix pLSM) {
    fbx_wrapperPINVOKE.FbxTransform_DoF2LT(swigCPtr, FbxVector4.getCPtr(pLT), FbxVector4.getCPtr(pDoF), FbxAMatrix.getCPtr(pLRM), FbxAMatrix.getCPtr(pLSM));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LT2DoF(FbxVector4 pDoF, FbxVector4 pLT, FbxAMatrix pLRM, FbxAMatrix pLSM) {
    fbx_wrapperPINVOKE.FbxTransform_LT2DoF(swigCPtr, FbxVector4.getCPtr(pDoF), FbxVector4.getCPtr(pLT), FbxAMatrix.getCPtr(pLRM), FbxAMatrix.getCPtr(pLSM));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoF2LRM(FbxAMatrix pLRM, FbxVector4 pRDoF, bool pForLimit) {
    fbx_wrapperPINVOKE.FbxTransform_DoF2LRM__SWIG_0(swigCPtr, FbxAMatrix.getCPtr(pLRM), FbxVector4.getCPtr(pRDoF), pForLimit);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoF2LRM(FbxAMatrix pLRM, FbxVector4 pRDoF) {
    fbx_wrapperPINVOKE.FbxTransform_DoF2LRM__SWIG_1(swigCPtr, FbxAMatrix.getCPtr(pLRM), FbxVector4.getCPtr(pRDoF));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LRM2DoF(FbxVector4 pRDoF, FbxAMatrix pLRM, bool pForLimit) {
    fbx_wrapperPINVOKE.FbxTransform_LRM2DoF__SWIG_0(swigCPtr, FbxVector4.getCPtr(pRDoF), FbxAMatrix.getCPtr(pLRM), pForLimit);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LRM2DoF(FbxVector4 pRDoF, FbxAMatrix pLRM) {
    fbx_wrapperPINVOKE.FbxTransform_LRM2DoF__SWIG_1(swigCPtr, FbxVector4.getCPtr(pRDoF), FbxAMatrix.getCPtr(pLRM));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LSM2GSM(FbxAMatrix pGSM, FbxAMatrix pPGSM, FbxAMatrix pLSM, FbxAMatrix pLRM, FbxVector4 pPLS) {
    fbx_wrapperPINVOKE.FbxTransform_LSM2GSM(swigCPtr, FbxAMatrix.getCPtr(pGSM), FbxAMatrix.getCPtr(pPGSM), FbxAMatrix.getCPtr(pLSM), FbxAMatrix.getCPtr(pLRM), FbxVector4.getCPtr(pPLS));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GTRSM2GX(FbxAMatrix pGX, FbxVector4 pGT, FbxAMatrix pGRM, FbxAMatrix pGSM) {
    fbx_wrapperPINVOKE.FbxTransform_GTRSM2GX(swigCPtr, FbxAMatrix.getCPtr(pGX), FbxVector4.getCPtr(pGT), FbxAMatrix.getCPtr(pGRM), FbxAMatrix.getCPtr(pGSM));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum EInheritType {
    eInheritRrSs,
    eInheritRSrs,
    eInheritRrs
  }

}

}
