//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class fbx_wrapper {
  public static int COLLADA_MORPH_WEIGHT_TO_FBX_RATIO {
    get {
      int ret = fbx_wrapperPINVOKE.COLLADA_MORPH_WEIGHT_TO_FBX_RATIO_get();
      return ret;
    } 
  }

  public static void FbxAssertSetProc(SWIGTYPE_p_f_p_q_const__char_p_q_const__char_q_const__unsigned_int_p_q_const__char__void pAssertProc) {
    fbx_wrapperPINVOKE.FbxAssertSetProc(SWIGTYPE_p_f_p_q_const__char_p_q_const__char_q_const__unsigned_int_p_q_const__char__void.getCPtr(pAssertProc));
  }

  public static void FbxAssertSetDefaultProc() {
    fbx_wrapperPINVOKE.FbxAssertSetDefaultProc();
  }

  public static void _FbxAssert(string pFileName, string pFunctionName, uint pLineNumber, bool pFormat, string pMessage) {
    fbx_wrapperPINVOKE._FbxAssert(pFileName, pFunctionName, pLineNumber, pFormat, pMessage);
  }

  public static void _FbxTrace(string pMessage) {
    fbx_wrapperPINVOKE._FbxTrace(pMessage);
  }

  public static sbyte FbxMin(sbyte arg0) {
    sbyte ret = fbx_wrapperPINVOKE.FbxMin__SWIG_0(arg0);
    return ret;
  }

  public static byte FbxMin(byte arg0) {
    byte ret = fbx_wrapperPINVOKE.FbxMin__SWIG_1(arg0);
    return ret;
  }

  public static short FbxMin(short arg0) {
    short ret = fbx_wrapperPINVOKE.FbxMin__SWIG_2(arg0);
    return ret;
  }

  public static ushort FbxMin(ushort arg0) {
    ushort ret = fbx_wrapperPINVOKE.FbxMin__SWIG_3(arg0);
    return ret;
  }

  public static int FbxMin(int arg0) {
    int ret = fbx_wrapperPINVOKE.FbxMin__SWIG_4(arg0);
    return ret;
  }

  public static uint FbxMin(uint arg0) {
    uint ret = fbx_wrapperPINVOKE.FbxMin__SWIG_5(arg0);
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxMin(SWIGTYPE_p_signed___int64 arg0) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxMin__SWIG_6(SWIGTYPE_p_signed___int64.getCPtr(arg0)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong FbxMin(ulong arg0) {
    ulong ret = fbx_wrapperPINVOKE.FbxMin__SWIG_7(arg0);
    return ret;
  }

  public static float FbxMin(float arg0) {
    float ret = fbx_wrapperPINVOKE.FbxMin__SWIG_8(arg0);
    return ret;
  }

  public static double FbxMin(double arg0) {
    double ret = fbx_wrapperPINVOKE.FbxMin__SWIG_9(arg0);
    return ret;
  }

  public static sbyte FbxMax(sbyte arg0) {
    sbyte ret = fbx_wrapperPINVOKE.FbxMax__SWIG_0(arg0);
    return ret;
  }

  public static byte FbxMax(byte arg0) {
    byte ret = fbx_wrapperPINVOKE.FbxMax__SWIG_1(arg0);
    return ret;
  }

  public static short FbxMax(short arg0) {
    short ret = fbx_wrapperPINVOKE.FbxMax__SWIG_2(arg0);
    return ret;
  }

  public static ushort FbxMax(ushort arg0) {
    ushort ret = fbx_wrapperPINVOKE.FbxMax__SWIG_3(arg0);
    return ret;
  }

  public static int FbxMax(int arg0) {
    int ret = fbx_wrapperPINVOKE.FbxMax__SWIG_4(arg0);
    return ret;
  }

  public static uint FbxMax(uint arg0) {
    uint ret = fbx_wrapperPINVOKE.FbxMax__SWIG_5(arg0);
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxMax(SWIGTYPE_p_signed___int64 arg0) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxMax__SWIG_6(SWIGTYPE_p_signed___int64.getCPtr(arg0)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong FbxMax(ulong arg0) {
    ulong ret = fbx_wrapperPINVOKE.FbxMax__SWIG_7(arg0);
    return ret;
  }

  public static float FbxMax(float arg0) {
    float ret = fbx_wrapperPINVOKE.FbxMax__SWIG_8(arg0);
    return ret;
  }

  public static double FbxMax(double arg0) {
    double ret = fbx_wrapperPINVOKE.FbxMax__SWIG_9(arg0);
    return ret;
  }

  public static SWIGTYPE_p_void FbxModuleLoad(string pFilePath) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxModuleLoad(pFilePath);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxModuleGetProc(SWIGTYPE_p_void pModuleHandle, string pProcName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxModuleGetProc(SWIGTYPE_p_void.getCPtr(pModuleHandle), pProcName);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static bool FbxModuleFree(SWIGTYPE_p_void pModuleHandle) {
    bool ret = fbx_wrapperPINVOKE.FbxModuleFree(SWIGTYPE_p_void.getCPtr(pModuleHandle));
    return ret;
  }

  public static FbxPeripheral NULL_PERIPHERAL {
    set {
      fbx_wrapperPINVOKE.NULL_PERIPHERAL_set(FbxPeripheral.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.NULL_PERIPHERAL_get();
      FbxPeripheral ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPeripheral(cPtr, false);
      return ret;
    } 
  }

  public static FbxPeripheral TMPFILE_PERIPHERAL {
    set {
      fbx_wrapperPINVOKE.TMPFILE_PERIPHERAL_set(FbxPeripheral.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.TMPFILE_PERIPHERAL_get();
      FbxPeripheral ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPeripheral(cPtr, false);
      return ret;
    } 
  }

  public static void FbxSetMallocHandler(SWIGTYPE_p_f_size_t__p_void pHandler) {
    fbx_wrapperPINVOKE.FbxSetMallocHandler(SWIGTYPE_p_f_size_t__p_void.getCPtr(pHandler));
  }

  public static void FbxSetCallocHandler(SWIGTYPE_p_f_size_t_size_t__p_void pHandler) {
    fbx_wrapperPINVOKE.FbxSetCallocHandler(SWIGTYPE_p_f_size_t_size_t__p_void.getCPtr(pHandler));
  }

  public static void FbxSetReallocHandler(SWIGTYPE_p_f_p_void_size_t__p_void pHandler) {
    fbx_wrapperPINVOKE.FbxSetReallocHandler(SWIGTYPE_p_f_p_void_size_t__p_void.getCPtr(pHandler));
  }

  public static void FbxSetFreeHandler(SWIGTYPE_p_f_p_void__void pHandler) {
    fbx_wrapperPINVOKE.FbxSetFreeHandler(SWIGTYPE_p_f_p_void__void.getCPtr(pHandler));
  }

  public static SWIGTYPE_p_f_size_t__p_void FbxGetMallocHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetMallocHandler();
    SWIGTYPE_p_f_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_size_t_size_t__p_void FbxGetCallocHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetCallocHandler();
    SWIGTYPE_p_f_size_t_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void_size_t__p_void FbxGetReallocHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetReallocHandler();
    SWIGTYPE_p_f_p_void_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void__void FbxGetFreeHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetFreeHandler();
    SWIGTYPE_p_f_p_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_size_t__p_void FbxGetDefaultMallocHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetDefaultMallocHandler();
    SWIGTYPE_p_f_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_size_t_size_t__p_void FbxGetDefaultCallocHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetDefaultCallocHandler();
    SWIGTYPE_p_f_size_t_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void_size_t__p_void FbxGetDefaultReallocHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetDefaultReallocHandler();
    SWIGTYPE_p_f_p_void_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void__void FbxGetDefaultFreeHandler() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetDefaultFreeHandler();
    SWIGTYPE_p_f_p_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxMalloc(uint pSize) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMalloc(pSize);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxCalloc(uint pCount, uint pSize) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxCalloc(pCount, pSize);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxRealloc(SWIGTYPE_p_void pData, uint pSize) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxRealloc(SWIGTYPE_p_void.getCPtr(pData), pSize);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void FbxFree(SWIGTYPE_p_void pData) {
    fbx_wrapperPINVOKE.FbxFree(SWIGTYPE_p_void.getCPtr(pData));
  }

  public static string FbxStrDup(string pString) {
    string ret = fbx_wrapperPINVOKE.FbxStrDup(pString);
    return ret;
  }

  public static SWIGTYPE_p_wchar_t FbxStrDupWC(SWIGTYPE_p_wchar_t pString) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxStrDupWC(SWIGTYPE_p_wchar_t.getCPtr(pString));
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxMallocDebug(uint pSize, int pBlock, string pFile, int pLine) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMallocDebug(pSize, pBlock, pFile, pLine);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxCallocDebug(uint pCount, uint pSize, int pBlock, string pFile, int pLine) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxCallocDebug(pCount, pSize, pBlock, pFile, pLine);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxReallocDebug(SWIGTYPE_p_void pData, uint pSize, int pBlock, string pFile, int pLine) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxReallocDebug(SWIGTYPE_p_void.getCPtr(pData), pSize, pBlock, pFile, pLine);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void FbxFreeDebug(SWIGTYPE_p_void pData, int pBlock) {
    fbx_wrapperPINVOKE.FbxFreeDebug(SWIGTYPE_p_void.getCPtr(pData), pBlock);
  }

  public static int FBXSDK_sprintf(string dst, uint dstsize, string format) {
    int ret = fbx_wrapperPINVOKE.FBXSDK_sprintf(dst, dstsize, format);
    return ret;
  }

  public static int FBXSDK_snprintf(string dst, uint dstsize, string format) {
    int ret = fbx_wrapperPINVOKE.FBXSDK_snprintf(dst, dstsize, format);
    return ret;
  }

  public static int FBXSDK_vsprintf(string dst, uint dstsize, string format, SWIGTYPE_p_va_list vl) {
    int ret = fbx_wrapperPINVOKE.FBXSDK_vsprintf(dst, dstsize, format, SWIGTYPE_p_va_list.getCPtr(vl));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FBXSDK_vsnprintf(string dst, uint dstsize, string format, SWIGTYPE_p_va_list vl) {
    int ret = fbx_wrapperPINVOKE.FBXSDK_vsnprintf(dst, dstsize, format, SWIGTYPE_p_va_list.getCPtr(vl));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FbxUTF8ToWC(string pInUTF8, SWIGTYPE_p_p_wchar_t pOutWideChar, SWIGTYPE_p_size_t pOutWideCharSize) {
    fbx_wrapperPINVOKE.FbxUTF8ToWC__SWIG_0(pInUTF8, SWIGTYPE_p_p_wchar_t.getCPtr(pOutWideChar), SWIGTYPE_p_size_t.getCPtr(pOutWideCharSize));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxUTF8ToWC(string pInUTF8, SWIGTYPE_p_p_wchar_t pOutWideChar) {
    fbx_wrapperPINVOKE.FbxUTF8ToWC__SWIG_1(pInUTF8, SWIGTYPE_p_p_wchar_t.getCPtr(pOutWideChar));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxWCToUTF8(SWIGTYPE_p_wchar_t pInWideChar, string pOutUTF8, SWIGTYPE_p_size_t pOutUTF8Size) {
    fbx_wrapperPINVOKE.FbxWCToUTF8__SWIG_0(SWIGTYPE_p_wchar_t.getCPtr(pInWideChar), pOutUTF8, SWIGTYPE_p_size_t.getCPtr(pOutUTF8Size));
  }

  public static void FbxWCToUTF8(SWIGTYPE_p_wchar_t pInWideChar, string pOutUTF8) {
    fbx_wrapperPINVOKE.FbxWCToUTF8__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(pInWideChar), pOutUTF8);
  }

  public static void FbxWCToAnsi(SWIGTYPE_p_wchar_t pInWideChar, string pOutANSI, SWIGTYPE_p_size_t pOutANSISize) {
    fbx_wrapperPINVOKE.FbxWCToAnsi__SWIG_0(SWIGTYPE_p_wchar_t.getCPtr(pInWideChar), pOutANSI, SWIGTYPE_p_size_t.getCPtr(pOutANSISize));
  }

  public static void FbxWCToAnsi(SWIGTYPE_p_wchar_t pInWideChar, string pOutANSI) {
    fbx_wrapperPINVOKE.FbxWCToAnsi__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(pInWideChar), pOutANSI);
  }

  public static void FbxAnsiToWC(string pInANSI, SWIGTYPE_p_p_wchar_t pOutWideChar, SWIGTYPE_p_size_t pOutWideCharSize) {
    fbx_wrapperPINVOKE.FbxAnsiToWC__SWIG_0(pInANSI, SWIGTYPE_p_p_wchar_t.getCPtr(pOutWideChar), SWIGTYPE_p_size_t.getCPtr(pOutWideCharSize));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxAnsiToWC(string pInANSI, SWIGTYPE_p_p_wchar_t pOutWideChar) {
    fbx_wrapperPINVOKE.FbxAnsiToWC__SWIG_1(pInANSI, SWIGTYPE_p_p_wchar_t.getCPtr(pOutWideChar));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxAnsiToUTF8(string pInANSI, string pOutUTF8, SWIGTYPE_p_size_t pOutUTF8Size) {
    fbx_wrapperPINVOKE.FbxAnsiToUTF8__SWIG_0(pInANSI, pOutUTF8, SWIGTYPE_p_size_t.getCPtr(pOutUTF8Size));
  }

  public static void FbxAnsiToUTF8(string pInANSI, string pOutUTF8) {
    fbx_wrapperPINVOKE.FbxAnsiToUTF8__SWIG_1(pInANSI, pOutUTF8);
  }

  public static void FbxUTF8ToAnsi(string pInUTF8, string pOutANSI, SWIGTYPE_p_size_t pOutANSISize) {
    fbx_wrapperPINVOKE.FbxUTF8ToAnsi__SWIG_0(pInUTF8, pOutANSI, SWIGTYPE_p_size_t.getCPtr(pOutANSISize));
  }

  public static void FbxUTF8ToAnsi(string pInUTF8, string pOutANSI) {
    fbx_wrapperPINVOKE.FbxUTF8ToAnsi__SWIG_1(pInUTF8, pOutANSI);
  }

  public static FbxString add(FbxString pString1, FbxString pString2) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_0(FbxString.getCPtr(pString1), FbxString.getCPtr(pString2)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(FbxString pString, char pChar) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_1(FbxString.getCPtr(pString), pChar), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(char pChar, FbxString pString) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_2(pChar, FbxString.getCPtr(pString)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(FbxString pString1, string pString2) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_3(FbxString.getCPtr(pString1), pString2), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(string pString1, FbxString pString2) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_4(pString1, FbxString.getCPtr(pString2)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(FbxString pString, int pValue) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_5(FbxString.getCPtr(pString), pValue), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(int pValue, FbxString pString) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_6(pValue, FbxString.getCPtr(pString)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(FbxString pString, float pValue) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_7(FbxString.getCPtr(pString), pValue), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(float pValue, FbxString pString) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_8(pValue, FbxString.getCPtr(pString)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString add(FbxString pString, double pValue) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.add__SWIG_9(FbxString.getCPtr(pString), pValue), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FbxRemoveChar(FbxString pString, char pToRemove) {
    fbx_wrapperPINVOKE.FbxRemoveChar(FbxString.getCPtr(pString), pToRemove);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int FbxCompareStringListSort(SWIGTYPE_p_void E1, SWIGTYPE_p_void E2) {
    int ret = fbx_wrapperPINVOKE.FbxCompareStringListSort(SWIGTYPE_p_void.getCPtr(E1), SWIGTYPE_p_void.getCPtr(E2));
    return ret;
  }

  public static int FbxCompareStringListFindEqual(SWIGTYPE_p_void E1, SWIGTYPE_p_void E2) {
    int ret = fbx_wrapperPINVOKE.FbxCompareStringListFindEqual(SWIGTYPE_p_void.getCPtr(E1), SWIGTYPE_p_void.getCPtr(E2));
    return ret;
  }

  public static int FbxCompareCaseSensitiveStringList(SWIGTYPE_p_void E1, SWIGTYPE_p_void E2) {
    int ret = fbx_wrapperPINVOKE.FbxCompareCaseSensitiveStringList(SWIGTYPE_p_void.getCPtr(E1), SWIGTYPE_p_void.getCPtr(E2));
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSeconds(SWIGTYPE_p_signed___int64 pTime) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSeconds(SWIGTYPE_p_signed___int64.getCPtr(pTime)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCMinutes(SWIGTYPE_p_signed___int64 pTime) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCMinutes(SWIGTYPE_p_signed___int64.getCPtr(pTime)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCHours(SWIGTYPE_p_signed___int64 pTime) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCHours(SWIGTYPE_p_signed___int64.getCPtr(pTime)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetRate(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, SWIGTYPE_p_signed___int64 pPeriod) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetRate(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), SWIGTYPE_p_signed___int64.getCPtr(pPeriod)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetRate(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_signed___int64 pPeriod) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetRate(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_signed___int64.getCPtr(pPeriod)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetNTSC(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetNTSC(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), pField), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetNTSC(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetNTSC(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetMNTSCnd(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetMNTSCnd(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), pField), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetMNTSCnd(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetMNTSCnd(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetMNTSC_2Xnd(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetMNTSC_2Xnd(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), pField), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetMNTSC_2Xnd(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetMNTSC_2Xnd(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetMNTSC(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetMNTSC(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), pField), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetMNTSC(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetMNTSC(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetPAL(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetPAL(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), pField), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetPAL(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetPAL(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetFILM(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetFILM(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetFILM(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetFILM(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCSetFILMND(int pHour, int pMinute, int pSecond, SWIGTYPE_p_signed___int64 pFrame, int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCSetFILMND(pHour, pMinute, pSecond, SWIGTYPE_p_signed___int64.getCPtr(pFrame), pField), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxTCGetFILMND(SWIGTYPE_p_signed___int64 pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxTCGetFILMND(SWIGTYPE_p_signed___int64.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FbxSleep(int pMilliseconds) {
    fbx_wrapperPINVOKE.FbxSleep(pMilliseconds);
  }

  public static SWIGTYPE_p_signed___int64 FbxGetHighResCounter() {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxGetHighResCounter(), true);
    return ret;
  }

  public static SWIGTYPE_p_signed___int64 FbxGetHighResFrequency() {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxGetHighResFrequency(), true);
    return ret;
  }

  public static FbxTime.EMode FbxGetGlobalTimeMode() {
    FbxTime.EMode ret = (FbxTime.EMode)fbx_wrapperPINVOKE.FbxGetGlobalTimeMode();
    return ret;
  }

  public static SWIGTYPE_p_FbxTimeModeObject FbxGetGlobalTimeModeObject() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxGetGlobalTimeModeObject();
    SWIGTYPE_p_FbxTimeModeObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxTimeModeObject(cPtr, false);
    return ret;
  }

  public static FbxTime.EProtocol FbxGetGlobalTimeFormat() {
    FbxTime.EProtocol ret = (FbxTime.EProtocol)fbx_wrapperPINVOKE.FbxGetGlobalTimeFormat();
    return ret;
  }

  public static void FbxSetGlobalTimeMode(FbxTime.EMode pTimeMode, double pFrameRate) {
    fbx_wrapperPINVOKE.FbxSetGlobalTimeMode__SWIG_0((int)pTimeMode, pFrameRate);
  }

  public static void FbxSetGlobalTimeFormat(FbxTime.EProtocol pTimeFormat) {
    fbx_wrapperPINVOKE.FbxSetGlobalTimeFormat((int)pTimeFormat);
  }

  public static FbxTime FbxTimeSeconds(double pTime) {
    FbxTime ret = new FbxTime(fbx_wrapperPINVOKE.FbxTimeSeconds__SWIG_0(pTime), true);
    return ret;
  }

  public static FbxTime FbxTimeSeconds() {
    FbxTime ret = new FbxTime(fbx_wrapperPINVOKE.FbxTimeSeconds__SWIG_1(), true);
    return ret;
  }

  public static void FbxGetCurrentLocalTime(FbxLocalTime pLocalTime) {
    fbx_wrapperPINVOKE.FbxGetCurrentLocalTime(FbxLocalTime.getCPtr(pLocalTime));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxSetGlobalTimeMode(FbxTime.EMode pTimeMode) {
    fbx_wrapperPINVOKE.FbxSetGlobalTimeMode__SWIG_1((int)pTimeMode);
  }

  public static FbxTime.EOldMode FbxGetOldTimeModeCorrespondance(FbxTime.EMode pMode) {
    FbxTime.EOldMode ret = (FbxTime.EOldMode)fbx_wrapperPINVOKE.FbxGetOldTimeModeCorrespondance((int)pMode);
    return ret;
  }

  public static FbxTime.EMode FbxGetTimeModeFromOldValue(FbxTime.EOldMode pOldMode) {
    FbxTime.EMode ret = (FbxTime.EMode)fbx_wrapperPINVOKE.FbxGetTimeModeFromOldValue((int)pOldMode);
    return ret;
  }

  public static FbxTime.EMode FbxGetTimeModeFromFrameRate(string pFrameRate) {
    FbxTime.EMode ret = (FbxTime.EMode)fbx_wrapperPINVOKE.FbxGetTimeModeFromFrameRate(pFrameRate);
    return ret;
  }

  public static void FbxGetControlStringList(string pControlString, FbxTime.EProtocol pTimeFormat) {
    fbx_wrapperPINVOKE.FbxGetControlStringList(pControlString, (int)pTimeFormat);
  }

  public static string FbxGetGlobalFrameRateString(FbxTime.EMode pTimeMode) {
    string ret = fbx_wrapperPINVOKE.FbxGetGlobalFrameRateString((int)pTimeMode);
    return ret;
  }

  public static string FbxGetGlobalTimeModeString(FbxTime.EMode pTimeMode) {
    string ret = fbx_wrapperPINVOKE.FbxGetGlobalTimeModeString((int)pTimeMode);
    return ret;
  }

  public static double FbxGetFrameRate(FbxTime.EMode pTimeMode) {
    double ret = fbx_wrapperPINVOKE.FbxGetFrameRate((int)pTimeMode);
    return ret;
  }

  public static string FbxGetTimeModeName(FbxTime.EMode pTimeMode) {
    string ret = fbx_wrapperPINVOKE.FbxGetTimeModeName((int)pTimeMode);
    return ret;
  }

  public static int FbxGetFrameRateStringListIndex(FbxTime.EMode pTimeMode) {
    int ret = fbx_wrapperPINVOKE.FbxGetFrameRateStringListIndex((int)pTimeMode);
    return ret;
  }

  public static bool FbxIsValidCustomFrameRate(double pFramerate) {
    bool ret = fbx_wrapperPINVOKE.FbxIsValidCustomFrameRate(pFramerate);
    return ret;
  }

  public static bool FbxGetNearestCustomFrameRate(double pFramerate, SWIGTYPE_p_double pNearestRate) {
    bool ret = fbx_wrapperPINVOKE.FbxGetNearestCustomFrameRate(pFramerate, SWIGTYPE_p_double.getCPtr(pNearestRate));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString FbxGetEnv(string pEnvVar) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.FbxGetEnv(pEnvVar), true);
    return ret;
  }

  public static FbxString FbxGetApplicationDirectory() {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.FbxGetApplicationDirectory(), true);
    return ret;
  }

  public static FbxString FbxGetSystemTempPath() {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.FbxGetSystemTempPath(), true);
    return ret;
  }

  public static void FbxSetSystemTempPath(string pPathUTF8) {
    fbx_wrapperPINVOKE.FbxSetSystemTempPath(pPathUTF8);
  }

  public static FbxString FbxGetCurrentWorkPath() {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.FbxGetCurrentWorkPath(), true);
    return ret;
  }

  public static void FbxSetCurrentWorkPath(string pPath_UTF8) {
    fbx_wrapperPINVOKE.FbxSetCurrentWorkPath(pPath_UTF8);
  }

  public static int FbxFileVersionStrToInt(string pFileVersion) {
    int ret = fbx_wrapperPINVOKE.FbxFileVersionStrToInt(pFileVersion);
    return ret;
  }

  public static uint FbxTypeSizeOf(EFbxType pType) {
    uint ret = fbx_wrapperPINVOKE.FbxTypeSizeOf((int)pType);
    return ret;
  }

  public static uint FbxTypeComponentCount(EFbxType pType) {
    uint ret = fbx_wrapperPINVOKE.FbxTypeComponentCount((int)pType);
    return ret;
  }

  public static EFbxType FbxTypeOf(sbyte arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_0(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(byte arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_1(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(short arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_2(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(ushort arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_3(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(uint arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_4(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_signed___int64 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_5(SWIGTYPE_p_signed___int64.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(ulong arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_6(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxHalfFloat arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_7(FbxHalfFloat.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(bool arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_8(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(int arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_9(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(float arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_10(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(double arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_11(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDouble2 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_12(FbxDouble2.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDouble3 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_13(FbxDouble3.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDouble4 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_14(FbxDouble4.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDouble4x4 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_15(FbxDouble4x4.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVector2 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_16(FbxVector2.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVector4 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_17(FbxVector4.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxQuaternion arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_18(FbxQuaternion.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxMatrix arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_19(FbxMatrix.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxAMatrix arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_20(FbxAMatrix.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxString arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_21(FbxString.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTime arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_22(FbxTime.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxObject arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_23(FbxObject.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxBlob arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_24(FbxBlob.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxColor arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_25(FbxColor.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDistance arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_26(FbxDistance.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDateTime arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_27(FbxDateTime.getCPtr(arg0));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_double pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_0(SWIGTYPE_p_double.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_bool pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_1(SWIGTYPE_p_bool.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_int pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_2(SWIGTYPE_p_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_signed_char pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_3(SWIGTYPE_p_signed_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_char pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_4(SWIGTYPE_p_unsigned_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_short pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_5(SWIGTYPE_p_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_short pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_6(SWIGTYPE_p_unsigned_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_int pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_7(SWIGTYPE_p_unsigned_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_signed___int64 pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_8(SWIGTYPE_p_signed___int64.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned___int64 pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_9(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(FbxHalfFloat pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopyStr__SWIG_10(FbxHalfFloat.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_1(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_2(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_3(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_4(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_5(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_6(SWIGTYPE_p_signed___int64.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_7(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_8(FbxHalfFloat.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_9(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_10(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_11(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_12(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, FbxDouble2 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_13(FbxDouble2.getCPtr(pDst), FbxDouble2.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, FbxDouble3 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_14(FbxDouble3.getCPtr(pDst), FbxDouble3.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 pDst, FbxDouble4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_15(FbxDouble4.getCPtr(pDst), FbxDouble4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4x4 pDst, FbxDouble4x4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_16(FbxDouble4x4.getCPtr(pDst), FbxDouble4x4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_17(FbxString.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxTime pDst, FbxTime pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_18(FbxTime.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_p_FbxObject pDst, FbxObject pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_19(SWIGTYPE_p_p_FbxObject.getCPtr(pDst), FbxObject.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxBlob pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_20(FbxBlob.getCPtr(pDst), FbxBlob.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance pDst, FbxDistance pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_21(FbxDistance.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime pDst, FbxDateTime pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_22(FbxDateTime.getCPtr(pDst), FbxDateTime.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_23(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_24(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_25(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_26(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_27(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_28(SWIGTYPE_p_bool.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_29(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_30(SWIGTYPE_p_bool.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_31(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_32(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_33(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_34(SWIGTYPE_p_bool.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_35(SWIGTYPE_p_bool.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_36(SWIGTYPE_p_bool.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_37(SWIGTYPE_p_bool.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_38(SWIGTYPE_p_bool.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_39(SWIGTYPE_p_bool.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_40(SWIGTYPE_p_bool.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_41(SWIGTYPE_p_bool.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_42(SWIGTYPE_p_bool.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_43(SWIGTYPE_p_bool.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_44(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, short arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_45(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, ushort arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_46(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_47(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_48(SWIGTYPE_p_signed_char.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_49(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_50(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_51(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_52(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_53(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_54(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_55(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_56(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_57(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_58(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_59(SWIGTYPE_p_signed_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_60(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_61(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_62(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_63(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_64(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_65(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, short arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_66(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, ushort arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_67(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_68(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_69(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_70(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_71(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_72(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_73(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_74(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_75(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_76(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_77(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_78(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_79(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_80(SWIGTYPE_p_unsigned_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_81(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_82(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_83(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_84(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_85(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_86(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_87(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, ushort arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_88(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_89(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_90(SWIGTYPE_p_short.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_91(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_92(SWIGTYPE_p_short.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_93(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_94(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_95(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_96(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_97(SWIGTYPE_p_short.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_98(SWIGTYPE_p_short.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_99(SWIGTYPE_p_short.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_100(SWIGTYPE_p_short.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_101(SWIGTYPE_p_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_102(SWIGTYPE_p_short.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_103(SWIGTYPE_p_short.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_104(SWIGTYPE_p_short.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_105(SWIGTYPE_p_short.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_106(SWIGTYPE_p_short.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_107(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_108(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_109(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_110(SWIGTYPE_p_unsigned_short.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_111(SWIGTYPE_p_unsigned_short.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_112(SWIGTYPE_p_unsigned_short.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_113(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_114(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_115(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_116(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_117(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_118(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_119(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_120(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_121(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_122(SWIGTYPE_p_unsigned_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_123(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_124(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_125(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_126(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_127(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_128(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_129(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_130(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_131(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_132(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_133(SWIGTYPE_p_int.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_134(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_135(SWIGTYPE_p_int.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_136(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_137(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_138(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_139(SWIGTYPE_p_int.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_140(SWIGTYPE_p_int.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_141(SWIGTYPE_p_int.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_142(SWIGTYPE_p_int.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_143(SWIGTYPE_p_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_144(SWIGTYPE_p_int.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_145(SWIGTYPE_p_int.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_146(SWIGTYPE_p_int.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_147(SWIGTYPE_p_int.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_148(SWIGTYPE_p_int.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_149(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_150(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_151(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_152(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_153(SWIGTYPE_p_unsigned_int.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_154(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_155(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_156(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_157(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_158(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_159(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_160(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_161(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_162(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_163(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_164(SWIGTYPE_p_unsigned_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_165(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_166(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_167(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_168(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_169(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_170(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_171(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_172(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_173(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_174(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_175(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_176(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_177(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_178(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_179(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_180(SWIGTYPE_p_signed___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_181(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_182(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_183(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_184(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_185(SWIGTYPE_p_signed___int64.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_186(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_187(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_188(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_189(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed___int64 arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_190(SWIGTYPE_p_signed___int64.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_191(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_192(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_193(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_194(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_195(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_196(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_197(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_198(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_199(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_200(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_201(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_202(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_203(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_204(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_205(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_206(SWIGTYPE_p_unsigned___int64.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_207(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_208(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_209(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_210(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned___int64 arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_211(SWIGTYPE_p_unsigned___int64.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_212(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_213(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_214(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_215(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_216(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_217(FbxHalfFloat.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_218(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_219(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_220(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_221(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_222(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_223(FbxHalfFloat.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_224(FbxHalfFloat.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_225(FbxHalfFloat.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_226(FbxHalfFloat.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxString arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_227(FbxHalfFloat.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_228(FbxHalfFloat.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_229(FbxHalfFloat.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_230(FbxHalfFloat.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, FbxDistance pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_231(FbxHalfFloat.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_232(FbxHalfFloat.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_233(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_234(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_235(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_236(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_237(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_238(SWIGTYPE_p_float.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_239(SWIGTYPE_p_float.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_240(SWIGTYPE_p_float.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_241(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_242(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_243(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_244(SWIGTYPE_p_float.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_245(SWIGTYPE_p_float.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_246(SWIGTYPE_p_float.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_247(SWIGTYPE_p_float.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxString arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_248(SWIGTYPE_p_float.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_249(SWIGTYPE_p_float.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_250(SWIGTYPE_p_float.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_251(SWIGTYPE_p_float.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, FbxDistance pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_252(SWIGTYPE_p_float.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_253(SWIGTYPE_p_float.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_254(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_255(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_256(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_257(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_258(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_259(SWIGTYPE_p_double.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_260(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_261(SWIGTYPE_p_double.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_262(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_263(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_264(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxDouble2 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_265(SWIGTYPE_p_double.getCPtr(pDst), FbxDouble2.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxDouble3 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_266(SWIGTYPE_p_double.getCPtr(pDst), FbxDouble3.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxDouble4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_267(SWIGTYPE_p_double.getCPtr(pDst), FbxDouble4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxDouble4x4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_268(SWIGTYPE_p_double.getCPtr(pDst), FbxDouble4x4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_269(SWIGTYPE_p_double.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxTime pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_270(SWIGTYPE_p_double.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxDistance pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_271(SWIGTYPE_p_double.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_272(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_273(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_274(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_275(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_276(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_277(FbxDouble2.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_278(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_279(FbxDouble2.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_280(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_281(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_282(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble2 pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_283(FbxDouble2.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_284(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_285(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_286(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_287(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_288(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_289(FbxDouble3.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_290(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_291(FbxDouble3.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_292(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_293(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_294(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_295(FbxDouble3.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_296(FbxDouble3.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 pDst, FbxDouble4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_297(FbxDouble3.getCPtr(pDst), FbxDouble4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_298(FbxDouble3.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxString arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_299(FbxDouble3.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_300(FbxDouble3.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_301(FbxDouble3.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_302(FbxDouble3.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_303(FbxDouble3.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble3 arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_304(FbxDouble3.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, sbyte arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_305(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, byte arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_306(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, short arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_307(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, ushort arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_308(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_309(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_310(FbxDouble4.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_311(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_312(FbxDouble4.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, bool arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_313(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, int arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_314(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, float arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_315(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, double arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_316(FbxDouble4.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_317(FbxDouble4.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 pDst, FbxDouble3 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_318(FbxDouble4.getCPtr(pDst), FbxDouble3.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_319(FbxDouble4.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxString arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_320(FbxDouble4.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_321(FbxDouble4.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_322(FbxDouble4.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_323(FbxDouble4.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_324(FbxDouble4.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDouble4 arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_325(FbxDouble4.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_326(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_327(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_328(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_329(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_330(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_331(FbxString.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_332(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_333(FbxString.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_334(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_335(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_336(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_337(FbxString.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDouble2 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_338(FbxString.getCPtr(pDst), FbxDouble2.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDouble3 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_339(FbxString.getCPtr(pDst), FbxDouble3.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDouble4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_340(FbxString.getCPtr(pDst), FbxDouble4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDouble4x4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_341(FbxString.getCPtr(pDst), FbxDouble4x4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxTime pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_342(FbxString.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_343(FbxString.getCPtr(pDst), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_344(FbxString.getCPtr(pDst), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDistance pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_345(FbxString.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDateTime pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_346(FbxString.getCPtr(pDst), FbxDateTime.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, sbyte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_347(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, byte pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_348(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, short pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_349(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, ushort pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_350(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, uint pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_351(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, SWIGTYPE_p_signed___int64 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_352(FbxBlob.getCPtr(pDst), SWIGTYPE_p_signed___int64.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, ulong pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_353(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxHalfFloat pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_354(FbxBlob.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, bool pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_355(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, int pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_356(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, float pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_357(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, double pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_358(FbxBlob.getCPtr(pDst), pSrc);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxDouble2 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_359(FbxBlob.getCPtr(pDst), FbxDouble2.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxDouble3 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_360(FbxBlob.getCPtr(pDst), FbxDouble3.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxDouble4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_361(FbxBlob.getCPtr(pDst), FbxDouble4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxDouble4x4 pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_362(FbxBlob.getCPtr(pDst), FbxDouble4x4.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_363(FbxBlob.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxTime pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_364(FbxBlob.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_365(FbxBlob.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_366(FbxBlob.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_367(FbxBlob.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, sbyte arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_368(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, byte arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_369(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, short arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_370(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, ushort arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_371(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_372(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_373(FbxDistance.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_374(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_375(FbxDistance.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, bool arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_376(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, int arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_377(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, float arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_378(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, double arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_379(FbxDistance.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_380(FbxDistance.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_381(FbxDistance.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_382(FbxDistance.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_383(FbxDistance.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxString arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_384(FbxDistance.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_385(FbxDistance.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_386(FbxDistance.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_387(FbxDistance.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxDateTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_388(FbxDistance.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, sbyte arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_389(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, byte arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_390(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, short arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_391(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, ushort arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_392(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, uint arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_393(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, SWIGTYPE_p_signed___int64 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_394(FbxDateTime.getCPtr(arg0), SWIGTYPE_p_signed___int64.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, ulong arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_395(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxHalfFloat arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_396(FbxDateTime.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, bool arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_397(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, int arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_398(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, float arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_399(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, double arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_400(FbxDateTime.getCPtr(arg0), arg1);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxDouble2 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_401(FbxDateTime.getCPtr(arg0), FbxDouble2.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxDouble3 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_402(FbxDateTime.getCPtr(arg0), FbxDouble3.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxDouble4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_403(FbxDateTime.getCPtr(arg0), FbxDouble4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxDouble4x4 arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_404(FbxDateTime.getCPtr(arg0), FbxDouble4x4.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime pDst, FbxString pSrc) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_405(FbxDateTime.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxTime arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_406(FbxDateTime.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxObject arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_407(FbxDateTime.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxBlob arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_408(FbxDateTime.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxDistance arg1) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_409(FbxDateTime.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_void pDst, EFbxType pDstType, SWIGTYPE_p_void pSrc, EFbxType pSrcType) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCopy__SWIG_412(SWIGTYPE_p_void.getCPtr(pDst), (int)pDstType, SWIGTYPE_p_void.getCPtr(pSrc), (int)pSrcType);
    return ret;
  }

  public static SWIGTYPE_p_void FbxTypeAllocate(EFbxType pType) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTypeAllocate((int)pType);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static bool FbxTypeDeallocate(EFbxType pType, SWIGTYPE_p_void pData) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeDeallocate((int)pType, SWIGTYPE_p_void.getCPtr(pData));
    return ret;
  }

  public static bool FbxTypeCompare(SWIGTYPE_p_void pA, SWIGTYPE_p_void pB, EFbxType pType) {
    bool ret = fbx_wrapperPINVOKE.FbxTypeCompare(SWIGTYPE_p_void.getCPtr(pA), SWIGTYPE_p_void.getCPtr(pB), (int)pType);
    return ret;
  }

  public static SWIGTYPE_p_a_4__double FbxIdentityMatrix {
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxIdentityMatrix_get();
      SWIGTYPE_p_a_4__double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_4__double(cPtr, false);
      return ret;
    } 
  }

  public static FbxVector4 FbxZeroVector4 {
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxZeroVector4_get();
      FbxVector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxVector4(cPtr, false);
      return ret;
    } 
  }

  public static float FbxFloor(float x) {
    float ret = fbx_wrapperPINVOKE.FbxFloor__SWIG_0(x);
    return ret;
  }

  public static double FbxFloor(double x) {
    double ret = fbx_wrapperPINVOKE.FbxFloor__SWIG_1(x);
    return ret;
  }

  public static float FbxCeil(float x) {
    float ret = fbx_wrapperPINVOKE.FbxCeil__SWIG_0(x);
    return ret;
  }

  public static double FbxCeil(double x) {
    double ret = fbx_wrapperPINVOKE.FbxCeil__SWIG_1(x);
    return ret;
  }

  public static byte FbxAbs(byte x) {
    byte ret = fbx_wrapperPINVOKE.FbxAbs__SWIG_0(x);
    return ret;
  }

  public static ushort FbxAbs(ushort x) {
    ushort ret = fbx_wrapperPINVOKE.FbxAbs__SWIG_1(x);
    return ret;
  }

  public static uint FbxAbs(uint x) {
    uint ret = fbx_wrapperPINVOKE.FbxAbs__SWIG_2(x);
    return ret;
  }

  public static ulong FbxAbs(ulong x) {
    ulong ret = fbx_wrapperPINVOKE.FbxAbs__SWIG_4(x);
    return ret;
  }

  public static float FbxAbs(float x) {
    float ret = fbx_wrapperPINVOKE.FbxAbs__SWIG_5(x);
    return ret;
  }

  public static double FbxAbs(double x) {
    double ret = fbx_wrapperPINVOKE.FbxAbs__SWIG_6(x);
    return ret;
  }

  public static bool FbxEqual(FbxDouble2 x, FbxDouble2 y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_2(FbxDouble2.getCPtr(x), FbxDouble2.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble2 x, FbxDouble2 y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_3(FbxDouble2.getCPtr(x), FbxDouble2.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble3 x, FbxDouble3 y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_4(FbxDouble3.getCPtr(x), FbxDouble3.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble3 x, FbxDouble3 y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_5(FbxDouble3.getCPtr(x), FbxDouble3.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble4 x, FbxDouble4 y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_6(FbxDouble4.getCPtr(x), FbxDouble4.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble4 x, FbxDouble4 y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_7(FbxDouble4.getCPtr(x), FbxDouble4.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble4x4 x, FbxDouble4x4 y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_8(FbxDouble4x4.getCPtr(x), FbxDouble4x4.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxDouble4x4 x, FbxDouble4x4 y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_9(FbxDouble4x4.getCPtr(x), FbxDouble4x4.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector2 x, FbxVector2 y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_10(FbxVector2.getCPtr(x), FbxVector2.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector2 x, FbxVector2 y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_11(FbxVector2.getCPtr(x), FbxVector2.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector4 x, FbxVector4 y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_12(FbxVector4.getCPtr(x), FbxVector4.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector4 x, FbxVector4 y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_13(FbxVector4.getCPtr(x), FbxVector4.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxMatrix x, FbxMatrix y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_14(FbxMatrix.getCPtr(x), FbxMatrix.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxMatrix x, FbxMatrix y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_15(FbxMatrix.getCPtr(x), FbxMatrix.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxAMatrix x, FbxAMatrix y, double e) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_16(FbxAMatrix.getCPtr(x), FbxAMatrix.getCPtr(y), e);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxAMatrix x, FbxAMatrix y) {
    bool ret = fbx_wrapperPINVOKE.FbxEqual__SWIG_17(FbxAMatrix.getCPtr(x), FbxAMatrix.getCPtr(y));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double FbxMod(float x, SWIGTYPE_p_float i) {
    double ret = fbx_wrapperPINVOKE.FbxMod__SWIG_0(x, SWIGTYPE_p_float.getCPtr(i));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double FbxMod(double x, SWIGTYPE_p_double i) {
    double ret = fbx_wrapperPINVOKE.FbxMod__SWIG_1(x, SWIGTYPE_p_double.getCPtr(i));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double FbxMod(float x) {
    double ret = fbx_wrapperPINVOKE.FbxMod__SWIG_2(x);
    return ret;
  }

  public static double FbxMod(double x) {
    double ret = fbx_wrapperPINVOKE.FbxMod__SWIG_3(x);
    return ret;
  }

  public static double FbxSqrt(double x) {
    double ret = fbx_wrapperPINVOKE.FbxSqrt__SWIG_0(x);
    return ret;
  }

  public static float FbxSqrt(float x) {
    float ret = fbx_wrapperPINVOKE.FbxSqrt__SWIG_1(x);
    return ret;
  }

  public static float FbxExp(float x) {
    float ret = fbx_wrapperPINVOKE.FbxExp__SWIG_0(x);
    return ret;
  }

  public static double FbxExp(double x) {
    double ret = fbx_wrapperPINVOKE.FbxExp__SWIG_1(x);
    return ret;
  }

  public static float FbxLog(float x) {
    float ret = fbx_wrapperPINVOKE.FbxLog__SWIG_0(x);
    return ret;
  }

  public static double FbxLog(double x) {
    double ret = fbx_wrapperPINVOKE.FbxLog__SWIG_1(x);
    return ret;
  }

  public static float FbxSin(float x) {
    float ret = fbx_wrapperPINVOKE.FbxSin__SWIG_0(x);
    return ret;
  }

  public static double FbxSin(double x) {
    double ret = fbx_wrapperPINVOKE.FbxSin__SWIG_1(x);
    return ret;
  }

  public static float FbxCos(float x) {
    float ret = fbx_wrapperPINVOKE.FbxCos__SWIG_0(x);
    return ret;
  }

  public static double FbxCos(double x) {
    double ret = fbx_wrapperPINVOKE.FbxCos__SWIG_1(x);
    return ret;
  }

  public static float FbxTan(float x) {
    float ret = fbx_wrapperPINVOKE.FbxTan__SWIG_0(x);
    return ret;
  }

  public static double FbxTan(double x) {
    double ret = fbx_wrapperPINVOKE.FbxTan__SWIG_1(x);
    return ret;
  }

  public static float FbxASin(float x) {
    float ret = fbx_wrapperPINVOKE.FbxASin__SWIG_0(x);
    return ret;
  }

  public static double FbxASin(double x) {
    double ret = fbx_wrapperPINVOKE.FbxASin__SWIG_1(x);
    return ret;
  }

  public static float FbxACos(float x) {
    float ret = fbx_wrapperPINVOKE.FbxACos__SWIG_0(x);
    return ret;
  }

  public static double FbxACos(double x) {
    double ret = fbx_wrapperPINVOKE.FbxACos__SWIG_1(x);
    return ret;
  }

  public static float FbxATan(float x) {
    float ret = fbx_wrapperPINVOKE.FbxATan__SWIG_0(x);
    return ret;
  }

  public static double FbxATan(double x) {
    double ret = fbx_wrapperPINVOKE.FbxATan__SWIG_1(x);
    return ret;
  }

  public static float FbxATan(float y, float x) {
    float ret = fbx_wrapperPINVOKE.FbxATan__SWIG_2(y, x);
    return ret;
  }

  public static double FbxATan(double y, double x) {
    double ret = fbx_wrapperPINVOKE.FbxATan__SWIG_3(y, x);
    return ret;
  }

  public static FbxVector4 FbxRejection(FbxVector4 a, FbxVector4 b) {
    FbxVector4 ret = new FbxVector4(fbx_wrapperPINVOKE.FbxRejection(FbxVector4.getCPtr(a), FbxVector4.getCPtr(b)), true);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxGetContinuousRotation(FbxVector4 pRes, FbxVector4 pRot, FbxVector4 pRef, SWIGTYPE_p_int pOrder) {
    bool ret = fbx_wrapperPINVOKE.FbxGetContinuousRotation__SWIG_0(FbxVector4.getCPtr(pRes), FbxVector4.getCPtr(pRot), FbxVector4.getCPtr(pRef), SWIGTYPE_p_int.getCPtr(pOrder));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FbxGetContinuousRotation(FbxVector4 pRes, FbxVector4 pRot, FbxVector4 pRef) {
    fbx_wrapperPINVOKE.FbxGetContinuousRotation__SWIG_1(FbxVector4.getCPtr(pRes), FbxVector4.getCPtr(pRot), FbxVector4.getCPtr(pRef));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FbxDataType FbxGetDataTypeFromEnum(EFbxType pType) {
    FbxDataType ret = new FbxDataType(fbx_wrapperPINVOKE.FbxGetDataTypeFromEnum((int)pType), false);
    return ret;
  }

  public static string FbxGetDataTypeNameForIO(FbxDataType pDataType) {
    string ret = fbx_wrapperPINVOKE.FbxGetDataTypeNameForIO(FbxDataType.getCPtr(pDataType));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxDataType FbxUndefinedDT {
    set {
      fbx_wrapperPINVOKE.FbxUndefinedDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxUndefinedDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxBoolDT {
    set {
      fbx_wrapperPINVOKE.FbxBoolDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBoolDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCharDT {
    set {
      fbx_wrapperPINVOKE.FbxCharDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxCharDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUCharDT {
    set {
      fbx_wrapperPINVOKE.FbxUCharDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxUCharDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxShortDT {
    set {
      fbx_wrapperPINVOKE.FbxShortDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxShortDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUShortDT {
    set {
      fbx_wrapperPINVOKE.FbxUShortDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxUShortDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIntDT {
    set {
      fbx_wrapperPINVOKE.FbxIntDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxIntDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUIntDT {
    set {
      fbx_wrapperPINVOKE.FbxUIntDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxUIntDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLongLongDT {
    set {
      fbx_wrapperPINVOKE.FbxLongLongDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLongLongDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxULongLongDT {
    set {
      fbx_wrapperPINVOKE.FbxULongLongDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxULongLongDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFloatDT {
    set {
      fbx_wrapperPINVOKE.FbxFloatDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFloatDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxHalfFloatDT {
    set {
      fbx_wrapperPINVOKE.FbxHalfFloatDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxHalfFloatDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDoubleDT {
    set {
      fbx_wrapperPINVOKE.FbxDoubleDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDoubleDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble2DT {
    set {
      fbx_wrapperPINVOKE.FbxDouble2DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDouble2DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble3DT {
    set {
      fbx_wrapperPINVOKE.FbxDouble3DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDouble3DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble4DT {
    set {
      fbx_wrapperPINVOKE.FbxDouble4DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDouble4DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble4x4DT {
    set {
      fbx_wrapperPINVOKE.FbxDouble4x4DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDouble4x4DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxEnumDT {
    set {
      fbx_wrapperPINVOKE.FbxEnumDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxEnumDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxStringDT {
    set {
      fbx_wrapperPINVOKE.FbxStringDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxStringDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTimeDT {
    set {
      fbx_wrapperPINVOKE.FbxTimeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTimeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxReferenceDT {
    set {
      fbx_wrapperPINVOKE.FbxReferenceDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxReferenceDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxBlobDT {
    set {
      fbx_wrapperPINVOKE.FbxBlobDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBlobDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDistanceDT {
    set {
      fbx_wrapperPINVOKE.FbxDistanceDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDistanceDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDateTimeDT {
    set {
      fbx_wrapperPINVOKE.FbxDateTimeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxDateTimeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxColor3DT {
    set {
      fbx_wrapperPINVOKE.FbxColor3DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxColor3DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxColor4DT {
    set {
      fbx_wrapperPINVOKE.FbxColor4DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxColor4DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCompoundDT {
    set {
      fbx_wrapperPINVOKE.FbxCompoundDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxCompoundDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxReferenceObjectDT {
    set {
      fbx_wrapperPINVOKE.FbxReferenceObjectDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxReferenceObjectDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxReferencePropertyDT {
    set {
      fbx_wrapperPINVOKE.FbxReferencePropertyDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxReferencePropertyDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxVisibilityDT {
    set {
      fbx_wrapperPINVOKE.FbxVisibilityDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxVisibilityDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxVisibilityInheritanceDT {
    set {
      fbx_wrapperPINVOKE.FbxVisibilityInheritanceDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxVisibilityInheritanceDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUrlDT {
    set {
      fbx_wrapperPINVOKE.FbxUrlDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxUrlDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxXRefUrlDT {
    set {
      fbx_wrapperPINVOKE.FbxXRefUrlDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxXRefUrlDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTranslationDT {
    set {
      fbx_wrapperPINVOKE.FbxTranslationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTranslationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRotationDT {
    set {
      fbx_wrapperPINVOKE.FbxRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxScalingDT {
    set {
      fbx_wrapperPINVOKE.FbxScalingDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxScalingDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxQuaternionDT {
    set {
      fbx_wrapperPINVOKE.FbxQuaternionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxQuaternionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalTranslationDT {
    set {
      fbx_wrapperPINVOKE.FbxLocalTranslationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLocalTranslationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalRotationDT {
    set {
      fbx_wrapperPINVOKE.FbxLocalRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLocalRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalScalingDT {
    set {
      fbx_wrapperPINVOKE.FbxLocalScalingDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLocalScalingDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalQuaternionDT {
    set {
      fbx_wrapperPINVOKE.FbxLocalQuaternionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLocalQuaternionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTransformMatrixDT {
    set {
      fbx_wrapperPINVOKE.FbxTransformMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTransformMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTranslationMatrixDT {
    set {
      fbx_wrapperPINVOKE.FbxTranslationMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTranslationMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRotationMatrixDT {
    set {
      fbx_wrapperPINVOKE.FbxRotationMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxRotationMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxScalingMatrixDT {
    set {
      fbx_wrapperPINVOKE.FbxScalingMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxScalingMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialEmissiveDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialEmissiveDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialEmissiveDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialEmissiveFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialEmissiveFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialEmissiveFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialAmbientDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialAmbientDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialAmbientDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialAmbientFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialAmbientFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialAmbientFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialDiffuseDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialDiffuseDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialDiffuseDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialDiffuseFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialDiffuseFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialDiffuseFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialBumpDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialBumpDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialBumpDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialNormalMapDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialNormalMapDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialNormalMapDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialTransparentColorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialTransparentColorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialTransparentColorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialTransparencyFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialTransparencyFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialTransparencyFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialSpecularDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialSpecularDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialSpecularDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialSpecularFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialSpecularFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialSpecularFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialShininessDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialShininessDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialShininessDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialReflectionDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialReflectionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialReflectionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialReflectionFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialReflectionFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialReflectionFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialDisplacementDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialDisplacementDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialDisplacementDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialVectorDisplacementDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialVectorDisplacementDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialVectorDisplacementDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialCommonFactorDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialCommonFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialCommonFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialCommonTextureDT {
    set {
      fbx_wrapperPINVOKE.FbxMaterialCommonTextureDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxMaterialCommonTextureDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementUndefinedDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementUndefinedDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementUndefinedDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementNormalDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementNormalDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementNormalDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementBinormalDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementBinormalDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementBinormalDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementTangentDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementTangentDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementTangentDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementMaterialDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementMaterialDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementMaterialDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementTextureDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementTextureDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementTextureDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementPolygonGroupDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementPolygonGroupDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementPolygonGroupDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementUVDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementUVDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementUVDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementVertexColorDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementVertexColorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementVertexColorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementSmoothingDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementSmoothingDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementSmoothingDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementCreaseDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementCreaseDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementCreaseDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementHoleDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementHoleDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementHoleDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementUserDataDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementUserDataDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementUserDataDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementVisibilityDT {
    set {
      fbx_wrapperPINVOKE.FbxLayerElementVisibilityDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLayerElementVisibilityDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxAliasDT {
    set {
      fbx_wrapperPINVOKE.FbxAliasDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAliasDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxPresetsDT {
    set {
      fbx_wrapperPINVOKE.FbxPresetsDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxPresetsDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxStatisticsDT {
    set {
      fbx_wrapperPINVOKE.FbxStatisticsDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxStatisticsDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTextLineDT {
    set {
      fbx_wrapperPINVOKE.FbxTextLineDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTextLineDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUnitsDT {
    set {
      fbx_wrapperPINVOKE.FbxUnitsDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxUnitsDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxWarningDT {
    set {
      fbx_wrapperPINVOKE.FbxWarningDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxWarningDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxWebDT {
    set {
      fbx_wrapperPINVOKE.FbxWebDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxWebDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxActionDT {
    set {
      fbx_wrapperPINVOKE.FbxActionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxActionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCameraIndexDT {
    set {
      fbx_wrapperPINVOKE.FbxCameraIndexDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxCameraIndexDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCharPtrDT {
    set {
      fbx_wrapperPINVOKE.FbxCharPtrDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxCharPtrDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxConeAngleDT {
    set {
      fbx_wrapperPINVOKE.FbxConeAngleDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxConeAngleDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxEventDT {
    set {
      fbx_wrapperPINVOKE.FbxEventDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxEventDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFieldOfViewDT {
    set {
      fbx_wrapperPINVOKE.FbxFieldOfViewDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFieldOfViewDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFieldOfViewXDT {
    set {
      fbx_wrapperPINVOKE.FbxFieldOfViewXDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFieldOfViewXDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFieldOfViewYDT {
    set {
      fbx_wrapperPINVOKE.FbxFieldOfViewYDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFieldOfViewYDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFogDT {
    set {
      fbx_wrapperPINVOKE.FbxFogDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFogDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxHSBDT {
    set {
      fbx_wrapperPINVOKE.FbxHSBDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxHSBDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIKReachTranslationDT {
    set {
      fbx_wrapperPINVOKE.FbxIKReachTranslationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxIKReachTranslationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIKReachRotationDT {
    set {
      fbx_wrapperPINVOKE.FbxIKReachRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxIKReachRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIntensityDT {
    set {
      fbx_wrapperPINVOKE.FbxIntensityDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxIntensityDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLookAtDT {
    set {
      fbx_wrapperPINVOKE.FbxLookAtDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxLookAtDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOcclusionDT {
    set {
      fbx_wrapperPINVOKE.FbxOcclusionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxOcclusionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOpticalCenterXDT {
    set {
      fbx_wrapperPINVOKE.FbxOpticalCenterXDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxOpticalCenterXDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOpticalCenterYDT {
    set {
      fbx_wrapperPINVOKE.FbxOpticalCenterYDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxOpticalCenterYDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOrientationDT {
    set {
      fbx_wrapperPINVOKE.FbxOrientationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxOrientationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRealDT {
    set {
      fbx_wrapperPINVOKE.FbxRealDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxRealDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRollDT {
    set {
      fbx_wrapperPINVOKE.FbxRollDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxRollDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxScalingUVDT {
    set {
      fbx_wrapperPINVOKE.FbxScalingUVDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxScalingUVDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxShapeDT {
    set {
      fbx_wrapperPINVOKE.FbxShapeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxShapeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxStringListDT {
    set {
      fbx_wrapperPINVOKE.FbxStringListDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxStringListDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTextureRotationDT {
    set {
      fbx_wrapperPINVOKE.FbxTextureRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTextureRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTimeCodeDT {
    set {
      fbx_wrapperPINVOKE.FbxTimeCodeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTimeCodeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTimeWarpDT {
    set {
      fbx_wrapperPINVOKE.FbxTimeWarpDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTimeWarpDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTranslationUVDT {
    set {
      fbx_wrapperPINVOKE.FbxTranslationUVDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxTranslationUVDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxWeightDT {
    set {
      fbx_wrapperPINVOKE.FbxWeightDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxWeightDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static void FbxMarkObject(FbxObject pObject, SWIGTYPE_p_FbxMapT_FbxObject_p_int_FbxLessCompareT_FbxObject_p_t_FbxBaseAllocator_t pObjectDstDisconnectCount, SWIGTYPE_p_FbxSetT_FbxObject_p_FbxLessCompareT_FbxObject_p_t_FbxBaseAllocator_t pObjectsToDeleted, SWIGTYPE_p_FbxArrayT_FbxObject_p_t pObjectToDeletedInSequence) {
    fbx_wrapperPINVOKE.FbxMarkObject(FbxObject.getCPtr(pObject), SWIGTYPE_p_FbxMapT_FbxObject_p_int_FbxLessCompareT_FbxObject_p_t_FbxBaseAllocator_t.getCPtr(pObjectDstDisconnectCount), SWIGTYPE_p_FbxSetT_FbxObject_p_FbxLessCompareT_FbxObject_p_t_FbxBaseAllocator_t.getCPtr(pObjectsToDeleted), SWIGTYPE_p_FbxArrayT_FbxObject_p_t.getCPtr(pObjectToDeletedInSequence));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxCleanUpConnectionsAtDestructionBoundary(FbxScene pObject, SWIGTYPE_p_FbxArrayT_FbxObject_p_t pObjectToDeletedInSequence) {
    fbx_wrapperPINVOKE.FbxCleanUpConnectionsAtDestructionBoundary(FbxScene.getCPtr(pObject), SWIGTYPE_p_FbxArrayT_FbxObject_p_t.getCPtr(pObjectToDeletedInSequence));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static EFbxType FbxTypeOf(FbxTime.EMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_29((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVideo.EInterlaceMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_30((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVideo.EAccessMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_31((int)arg0);
    return ret;
  }

  public static void CollectAnimFromCurveNode(SWIGTYPE_p_p_void lSrc, SWIGTYPE_p_void fcn, uint nbCrvs, FbxAnimCurveNode cn, FbxMultiMap pNickToAnimCurveTimeWarpsSet, FbxMultiMap pNickToKFCurveNodeWarpSet) {
    fbx_wrapperPINVOKE.CollectAnimFromCurveNode(SWIGTYPE_p_p_void.getCPtr(lSrc), SWIGTYPE_p_void.getCPtr(fcn), nbCrvs, FbxAnimCurveNode.getCPtr(cn), FbxMultiMap.getCPtr(pNickToAnimCurveTimeWarpsSet), FbxMultiMap.getCPtr(pNickToKFCurveNodeWarpSet));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetAllAnimCurves(FbxAnimStack pAnimStack, SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t pCurves) {
    fbx_wrapperPINVOKE.GetAllAnimCurves__SWIG_0(FbxAnimStack.getCPtr(pAnimStack), SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t.getCPtr(pCurves));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetAllAnimCurves(FbxObject pObj, FbxAnimStack pAnimStack, SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t pCurves) {
    fbx_wrapperPINVOKE.GetAllAnimCurves__SWIG_1(FbxObject.getCPtr(pObj), FbxAnimStack.getCPtr(pAnimStack), SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t.getCPtr(pCurves));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FbxString GetWeightPropertyName(FbxObject pObject) {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.GetWeightPropertyName(FbxObject.getCPtr(pObject)), true);
    return ret;
  }

  public static void CreateWeightPropertyForSourceObject(FbxObject pConstraint, FbxObject pSourceObject, double pWeightValue) {
    fbx_wrapperPINVOKE.CreateWeightPropertyForSourceObject(FbxObject.getCPtr(pConstraint), FbxObject.getCPtr(pSourceObject), pWeightValue);
  }

  public static EFbxType FbxTypeOf(FbxConstraintAim.EWorldUp arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_32((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxConstraintSingleChainIK.EPoleVectorMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_33((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxConstraintSingleChainIK.ESolverMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_34((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxConstraintSingleChainIK.EEvaluationMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_35((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCache.EFileFormat arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_36((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxEuler.EOrder arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_37((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTransform.EInheritType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_38((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(EFbxQuatInterpMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_39((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxNull.ELook arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_40((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVertexCacheDeformer.ECacheChannelType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_41((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.EUnifiedMappingType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_42((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.ETextureUse6 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_43((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.EWrapMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_44((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.EBlendMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_45((int)arg0);
    return ret;
  }

  public static void ExportThread(SWIGTYPE_p_void arg0) {
    fbx_wrapperPINVOKE.ExportThread(SWIGTYPE_p_void.getCPtr(arg0));
  }

  public static void ImportThread(SWIGTYPE_p_void arg0) {
    fbx_wrapperPINVOKE.ImportThread(SWIGTYPE_p_void.getCPtr(arg0));
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EOffAutoUser arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_46((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EAutoUser arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_47((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EPostureMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_48((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EFloorPivot arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_49((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.ERollExtractionMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_50((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EHipsTranslationMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_51((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EFootContactType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_52((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EHandContactType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_53((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EFingerContactMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_54((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EContactBehaviour arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_55((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxControlSet.EType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_56((int)arg0);
    return ret;
  }

  public static FbxCharacterPropertyInfo gHIK2FbxCharacterPropertyBridge {
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.gHIK2FbxCharacterPropertyBridge_get();
      FbxCharacterPropertyInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCharacterPropertyInfo(cPtr, false);
      return ret;
    } 
  }

  public static EFbxType FbxTypeOf(FbxCachedEffect.ECategory arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_57((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EAntialiasingMethod arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_58((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EApertureFormat arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_59((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EApertureMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_60((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EAspectRatioMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_61((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFrontBackPlaneDisplayMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_62((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFrontBackPlaneDistanceMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_63((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EPlateDrawingMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_64((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFocusDistanceSource arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_65((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFormat arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_66((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EGateFit arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_67((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EProjectionType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_68((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.ERenderOptionsUsageTime arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_69((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.ESafeAreaStyle arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_70((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.ESamplingType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_71((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFilmRollOrder arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_72((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCameraStereo.EStereoType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_73((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_unsigned___int64 arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_74(SWIGTYPE_p_unsigned___int64.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLayerElementArray arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_75(FbxLayerElementArray.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxSurfaceMaterial arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_76(FbxSurfaceMaterial.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_77(FbxTexture.getCPtr(arg0));
    return ret;
  }

  public static int RemapIndexArrayTo(FbxLayerElement pLayerEl, FbxLayerElement.EMappingMode pNewMapping, DirectArrayFbxInt pIndexArray) {
    int ret = fbx_wrapperPINVOKE.RemapIndexArrayTo(FbxLayerElement.getCPtr(pLayerEl), (int)pNewMapping, DirectArrayFbxInt.getCPtr(pIndexArray));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLight.EType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_78((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLight.EDecayType arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_79((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLight.EAreaLightShape arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_80((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLODGroup.EDisplayLevel arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_81((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxMarker.ELook arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_82((int)arg0);
    return ret;
  }

  public static FbxImplementation GetImplementation(FbxObject pObject, string pImplementationTarget) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.GetImplementation(FbxObject.getCPtr(pObject), pImplementationTarget);
    FbxImplementation ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxImplementation(cPtr, false);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLayeredTexture.EBlendMode arg0) {
    EFbxType ret = (EFbxType)fbx_wrapperPINVOKE.FbxTypeOf__SWIG_83((int)arg0);
    return ret;
  }

  public static readonly int _MSC_VER = fbx_wrapperPINVOKE._MSC_VER_get();
  public static readonly int FBXSDK_VERSION_MAJOR = fbx_wrapperPINVOKE.FBXSDK_VERSION_MAJOR_get();
  public static readonly int FBXSDK_VERSION_MINOR = fbx_wrapperPINVOKE.FBXSDK_VERSION_MINOR_get();
  public static readonly int FBXSDK_VERSION_POINT = fbx_wrapperPINVOKE.FBXSDK_VERSION_POINT_get();
  public static readonly string FBXSDK_VERSION_NAME = fbx_wrapperPINVOKE.FBXSDK_VERSION_NAME_get();
  public static readonly int FBXSDK_VERSION_YEAR = fbx_wrapperPINVOKE.FBXSDK_VERSION_YEAR_get();
  public static readonly int FBXSDK_VERSION_MONTH = fbx_wrapperPINVOKE.FBXSDK_VERSION_MONTH_get();
  public static readonly int FBXSDK_VERSION_DAY = fbx_wrapperPINVOKE.FBXSDK_VERSION_DAY_get();
  public static readonly int FBXSDK_VERSION_REVISION = fbx_wrapperPINVOKE.FBXSDK_VERSION_REVISION_get();
  public static readonly string FBXSDK_VERSION_STRING = fbx_wrapperPINVOKE.FBXSDK_VERSION_STRING_get();
  public static readonly string FBXSDK_VERSION_STRING_FULL = fbx_wrapperPINVOKE.FBXSDK_VERSION_STRING_FULL_get();
  public static readonly string FBXSDK_VERSION_DATE = fbx_wrapperPINVOKE.FBXSDK_VERSION_DATE_get();
  public static readonly int FBXSDK_DEFINE_NAMESPACE = fbx_wrapperPINVOKE.FBXSDK_DEFINE_NAMESPACE_get();
  public static readonly int FBXSDK_ENV_WIN = fbx_wrapperPINVOKE.FBXSDK_ENV_WIN_get();
  public static readonly int FBXSDK_ARCH_AMD64 = fbx_wrapperPINVOKE.FBXSDK_ARCH_AMD64_get();
  public static readonly int FBXSDK_CPU_64 = fbx_wrapperPINVOKE.FBXSDK_CPU_64_get();
  public static readonly int FBXSDK_COMPILER_MSC = fbx_wrapperPINVOKE.FBXSDK_COMPILER_MSC_get();
  public static readonly int NULL = fbx_wrapperPINVOKE.NULL_get();
  public static readonly int _MAX_PATH = fbx_wrapperPINVOKE._MAX_PATH_get();
  public static readonly string COLLADA_VERSION_PROPERTY = fbx_wrapperPINVOKE.COLLADA_VERSION_PROPERTY_get();
  public static readonly string COLLADA_VERSION = fbx_wrapperPINVOKE.COLLADA_VERSION_get();
  public static readonly string COLLADA_SCHEMA = fbx_wrapperPINVOKE.COLLADA_SCHEMA_get();
  public static readonly string COLLADA_LIBRARY_ANIMATION_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_ANIMATION_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_ANIMATION_CLIP_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_ANIMATION_CLIP_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_CAMERA_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_CAMERA_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_CONTROLLER_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_CONTROLLER_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_EFFECT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_EFFECT_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_FFIELDS_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_FFIELDS_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_GEOMETRY_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_GEOMETRY_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_IMAGE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_IMAGE_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_LIGHT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_LIGHT_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_MATERIAL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_MATERIAL_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_NODE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_NODE_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_PMATERIAL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_PMATERIAL_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_PMODEL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_PMODEL_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_PSCENE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_PSCENE_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_VSCENE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIBRARY_VSCENE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_ANIMATION_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_ANIMATION_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_CAMERA_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_CAMERA_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_CONTROLLER_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_CONTROLLER_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_EFFECT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_EFFECT_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_GEOMETRY_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_GEOMETRY_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_LIGHT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_LIGHT_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_NODE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_NODE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_VSCENE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_VSCENE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_PSCENE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_PSCENE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_MATERIAL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INSTANCE_MATERIAL_ELEMENT_get();
  public static readonly string COLLADA_ANIMCLIP_ELEMENT = fbx_wrapperPINVOKE.COLLADA_ANIMCLIP_ELEMENT_get();
  public static readonly string COLLADA_BINDMATERIAL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_BINDMATERIAL_ELEMENT_get();
  public static readonly string COLLADA_EFFECT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_EFFECT_ELEMENT_get();
  public static readonly string COLLADA_INITFROM_ELEMENT = fbx_wrapperPINVOKE.COLLADA_INITFROM_ELEMENT_get();
  public static readonly string COLLADA_SAMPLER_ELEMENT = fbx_wrapperPINVOKE.COLLADA_SAMPLER_ELEMENT_get();
  public static readonly string COLLADA_SKELETON_ELEMENT = fbx_wrapperPINVOKE.COLLADA_SKELETON_ELEMENT_get();
  public static readonly string COLLADA_TARGETS_ELEMENT = fbx_wrapperPINVOKE.COLLADA_TARGETS_ELEMENT_get();
  public static readonly string COLLADA_TECHNIQUE_COMMON_ELEMENT = fbx_wrapperPINVOKE.COLLADA_TECHNIQUE_COMMON_ELEMENT_get();
  public static readonly string COLLADA_VSCENE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_VSCENE_ELEMENT_get();
  public static readonly string COLLADA_WEIGHTS_ELEMENT = fbx_wrapperPINVOKE.COLLADA_WEIGHTS_ELEMENT_get();
  public static readonly string COLLADA_VERTEXCOUNT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_VERTEXCOUNT_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_COMMON_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FX_PROFILE_COMMON_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_CG_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FX_PROFILE_CG_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_HLSL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FX_PROFILE_HLSL_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_GLSL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FX_PROFILE_GLSL_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_GLES_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FX_PROFILE_GLES_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_FLOAT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_FLOAT_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_FLOAT4_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_FLOAT4_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_FLOAT4X4_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_FLOAT4X4_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_INCLUDE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_INCLUDE_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SURFACE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_SURFACE_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLER1D_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_SAMPLER1D_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLER2D_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_SAMPLER2D_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLER3D_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_SAMPLER3D_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLERCUBE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_SAMPLERCUBE_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_NEWPARAM_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_NEWPARAM_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SETPARAM_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_SETPARAM_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_STRING_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXCMN_STRING_ELEMENT_get();
  public static readonly string COLLADA_TECHNIQUE_STANDARD_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TECHNIQUE_STANDARD_PARAMETER_get();
  public static readonly string COLLADA_FXSTD_CONSTANT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_CONSTANT_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_LAMBERT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_LAMBERT_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_PHONG_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_PHONG_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_BLINN_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_BLINN_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_COLOR_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_COLOR_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_FLOAT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_FLOAT_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_SAMPLER_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FXSTD_SAMPLER_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_TEXTURE_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_FXSTD_TEXTURE_ATTRIBUTE_get();
  public static readonly string COLLADA_FXSTD_TEXTURESET_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_FXSTD_TEXTURESET_ATTRIBUTE_get();
  public static readonly string COLLADA_CONTROLLER_SKIN_ELEMENT = fbx_wrapperPINVOKE.COLLADA_CONTROLLER_SKIN_ELEMENT_get();
  public static readonly string COLLADA_CONTROLLER_MORPH_ELEMENT = fbx_wrapperPINVOKE.COLLADA_CONTROLLER_MORPH_ELEMENT_get();
  public static readonly string COLLADA_CAMERA_PERSP_ELEMENT = fbx_wrapperPINVOKE.COLLADA_CAMERA_PERSP_ELEMENT_get();
  public static readonly string COLLADA_CAMERA_ORTHO_ELEMENT = fbx_wrapperPINVOKE.COLLADA_CAMERA_ORTHO_ELEMENT_get();
  public static readonly string COLLADA_ASPECT_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_ASPECT_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_XFOV_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_XFOV_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_YFOV_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_YFOV_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_ZNEAR_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_ZNEAR_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_ZFAR_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_ZFAR_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_XMAG_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_XMAG_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_YMAG_CAMERA_PARAMETER = fbx_wrapperPINVOKE.COLLADA_YMAG_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_VERTICAL_APERTURE_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_VERTICAL_APERTURE_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_HORIZONTAL_APERTURE_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_HORIZONTAL_APERTURE_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_LENS_SQUEEZE_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_LENS_SQUEEZE_PARAMETER_get();
  public static readonly string COLLADA_AMBIENT_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_AMBIENT_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_BUMP_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_BUMP_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_DIFFUSE_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_DIFFUSE_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_EMISSION_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_EMISSION_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_TRANSPARENCY_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TRANSPARENCY_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_TRANSPARENT_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TRANSPARENT_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_REFLECTIVE_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_REFLECTIVE_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_REFLECTIVITY_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_REFLECTIVITY_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_SHININESS_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_SHININESS_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_SPECULAR_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_SPECULAR_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_INDEXOFREFRACTION_MATERIAL_PARAMETER = fbx_wrapperPINVOKE.COLLADA_INDEXOFREFRACTION_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_OPAQUE_MODE_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_OPAQUE_MODE_ATTRIBUTE_get();
  public static readonly string COLLADA_OPAQUE_MODE_A_ONE = fbx_wrapperPINVOKE.COLLADA_OPAQUE_MODE_A_ONE_get();
  public static readonly string COLLADA_OPAQUE_MODE_RGB_ONE = fbx_wrapperPINVOKE.COLLADA_OPAQUE_MODE_RGB_ONE_get();
  public static readonly string COLLADA_OPAQUE_MODE_A_ZERO = fbx_wrapperPINVOKE.COLLADA_OPAQUE_MODE_A_ZERO_get();
  public static readonly string COLLADA_OPAQUE_MODE_RGB_ZERO = fbx_wrapperPINVOKE.COLLADA_OPAQUE_MODE_RGB_ZERO_get();
  public static readonly string COLLADA_LIGHT_AMBIENT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIGHT_AMBIENT_ELEMENT_get();
  public static readonly string COLLADA_LIGHT_POINT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIGHT_POINT_ELEMENT_get();
  public static readonly string COLLADA_LIGHT_DIRECTIONAL_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIGHT_DIRECTIONAL_ELEMENT_get();
  public static readonly string COLLADA_LIGHT_SPOT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_LIGHT_SPOT_ELEMENT_get();
  public static readonly string COLLADA_COLOR_LIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_COLOR_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_CONST_ATTENUATION_LIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CONST_ATTENUATION_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_LIN_ATTENUATION_LIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_LIN_ATTENUATION_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_QUAD_ATTENUATION_LIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_QUAD_ATTENUATION_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_FALLOFFEXPONENT_LIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_FALLOFFEXPONENT_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_FALLOFFANGLE_LIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_FALLOFFANGLE_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_BINDSHAPEMX_SKIN_PARAMETER = fbx_wrapperPINVOKE.COLLADA_BINDSHAPEMX_SKIN_PARAMETER_get();
  public static readonly string COLLADA_CONTRIBUTOR_ASSET_ELEMENT = fbx_wrapperPINVOKE.COLLADA_CONTRIBUTOR_ASSET_ELEMENT_get();
  public static readonly string COLLADA_AUTHOR_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_AUTHOR_ASSET_PARAMETER_get();
  public static readonly string COLLADA_AUTHORINGTOOL_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_AUTHORINGTOOL_ASSET_PARAMETER_get();
  public static readonly string COLLADA_CREATED_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CREATED_ASSET_PARAMETER_get();
  public static readonly string COLLADA_MODIFIED_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_MODIFIED_ASSET_PARAMETER_get();
  public static readonly string COLLADA_REVISION_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_REVISION_ASSET_PARAMETER_get();
  public static readonly string COLLADA_SOURCEDATA_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_SOURCEDATA_ASSET_PARAMETER_get();
  public static readonly string COLLADA_UNITS_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_UNITS_ASSET_PARAMETER_get();
  public static readonly string COLLADA_UPAXIS_ASSET_PARAMETER = fbx_wrapperPINVOKE.COLLADA_UPAXIS_ASSET_PARAMETER_get();
  public static readonly string COLLADA_SYMBOL_PROPERTY = fbx_wrapperPINVOKE.COLLADA_SYMBOL_PROPERTY_get();
  public static readonly string COLLADA_DOCUMENT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_DOCUMENT_STRUCTURE_get();
  public static readonly string COLLADA_ASSET_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ASSET_STRUCTURE_get();
  public static readonly string COLLADA_REVISION_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_REVISION_STRUCTURE_get();
  public static readonly string COLLADA_AUTHORING_TOOL_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_AUTHORING_TOOL_STRUCTURE_get();
  public static readonly string COLLADA_CREATED_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CREATED_STRUCTURE_get();
  public static readonly string COLLADA_MODIFIED_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MODIFIED_STRUCTURE_get();
  public static readonly string COLLADA_AUTHOR_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_AUTHOR_STRUCTURE_get();
  public static readonly string COLLADA_TITLE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TITLE_STRUCTURE_get();
  public static readonly string COLLADA_SUBJECT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SUBJECT_STRUCTURE_get();
  public static readonly string COLLADA_KEYWORDS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_KEYWORDS_STRUCTURE_get();
  public static readonly string COLLADA_COMMENTS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_COMMENTS_STRUCTURE_get();
  public static readonly string COLLADA_UNIT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_UNIT_STRUCTURE_get();
  public static readonly string COLLADA_SOURCE_DATA_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SOURCE_DATA_STRUCTURE_get();
  public static readonly string COLLADA_UP_AXIS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_UP_AXIS_STRUCTURE_get();
  public static readonly string COLLADA_LIBRARY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_LIBRARY_STRUCTURE_get();
  public static readonly string COLLADA_SCENE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SCENE_STRUCTURE_get();
  public static readonly string COLLADA_NODE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_NODE_STRUCTURE_get();
  public static readonly string COLLADA_MATRIX_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MATRIX_STRUCTURE_get();
  public static readonly string COLLADA_TRANSFORM_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRANSFORM_STRUCTURE_get();
  public static readonly string COLLADA_TRANSLATE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRANSLATE_STRUCTURE_get();
  public static readonly string COLLADA_TRANSLATION_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRANSLATION_STRUCTURE_get();
  public static readonly string COLLADA_TRANSLATE_ORIGIN = fbx_wrapperPINVOKE.COLLADA_TRANSLATE_ORIGIN_get();
  public static readonly string COLLADA_TRANSLATE_LOCATION = fbx_wrapperPINVOKE.COLLADA_TRANSLATE_LOCATION_get();
  public static readonly string COLLADA_ROTATE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ROTATE_STRUCTURE_get();
  public static readonly string COLLADA_SCALE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SCALE_STRUCTURE_get();
  public static readonly string COLLADA_SKEW_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SKEW_STRUCTURE_get();
  public static readonly string COLLADA_ROTATE_X = fbx_wrapperPINVOKE.COLLADA_ROTATE_X_get();
  public static readonly string COLLADA_ROTATE_Y = fbx_wrapperPINVOKE.COLLADA_ROTATE_Y_get();
  public static readonly string COLLADA_ROTATE_Z = fbx_wrapperPINVOKE.COLLADA_ROTATE_Z_get();
  public static readonly string COLLADA_ROT_X = fbx_wrapperPINVOKE.COLLADA_ROT_X_get();
  public static readonly string COLLADA_ROT_Y = fbx_wrapperPINVOKE.COLLADA_ROT_Y_get();
  public static readonly string COLLADA_ROT_Z = fbx_wrapperPINVOKE.COLLADA_ROT_Z_get();
  public static readonly string COLLADA_ROTATION_X = fbx_wrapperPINVOKE.COLLADA_ROTATION_X_get();
  public static readonly string COLLADA_ROTATION_Y = fbx_wrapperPINVOKE.COLLADA_ROTATION_Y_get();
  public static readonly string COLLADA_ROTATION_Z = fbx_wrapperPINVOKE.COLLADA_ROTATION_Z_get();
  public static readonly string COLLADA_ROTATIONX = fbx_wrapperPINVOKE.COLLADA_ROTATIONX_get();
  public static readonly string COLLADA_ROTATIONY = fbx_wrapperPINVOKE.COLLADA_ROTATIONY_get();
  public static readonly string COLLADA_ROTATIONZ = fbx_wrapperPINVOKE.COLLADA_ROTATIONZ_get();
  public static readonly string COLLADA_ROTATE_PIVOT = fbx_wrapperPINVOKE.COLLADA_ROTATE_PIVOT_get();
  public static readonly string COLLADA_SCALE_PIVOT = fbx_wrapperPINVOKE.COLLADA_SCALE_PIVOT_get();
  public static readonly string COLLADA_ROTATE_PIVOT_INVERSE = fbx_wrapperPINVOKE.COLLADA_ROTATE_PIVOT_INVERSE_get();
  public static readonly string COLLADA_SCALE_PIVOT_INVERSE = fbx_wrapperPINVOKE.COLLADA_SCALE_PIVOT_INVERSE_get();
  public static readonly string COLLADA_ROTATE_PIVOT_OFFSET = fbx_wrapperPINVOKE.COLLADA_ROTATE_PIVOT_OFFSET_get();
  public static readonly string COLLADA_SCALE_PIVOT_OFFSET = fbx_wrapperPINVOKE.COLLADA_SCALE_PIVOT_OFFSET_get();
  public static readonly string COLLADA_PRE_ROTATION_X = fbx_wrapperPINVOKE.COLLADA_PRE_ROTATION_X_get();
  public static readonly string COLLADA_PRE_ROTATION_Y = fbx_wrapperPINVOKE.COLLADA_PRE_ROTATION_Y_get();
  public static readonly string COLLADA_PRE_ROTATION_Z = fbx_wrapperPINVOKE.COLLADA_PRE_ROTATION_Z_get();
  public static readonly string COLLADA_POST_ROTATION_X = fbx_wrapperPINVOKE.COLLADA_POST_ROTATION_X_get();
  public static readonly string COLLADA_POST_ROTATION_Y = fbx_wrapperPINVOKE.COLLADA_POST_ROTATION_Y_get();
  public static readonly string COLLADA_POST_ROTATION_Z = fbx_wrapperPINVOKE.COLLADA_POST_ROTATION_Z_get();
  public static readonly string COLLADA_ROTATE_AXIS_X = fbx_wrapperPINVOKE.COLLADA_ROTATE_AXIS_X_get();
  public static readonly string COLLADA_ROTATE_AXIS_Y = fbx_wrapperPINVOKE.COLLADA_ROTATE_AXIS_Y_get();
  public static readonly string COLLADA_ROTATE_AXIS_Z = fbx_wrapperPINVOKE.COLLADA_ROTATE_AXIS_Z_get();
  public static readonly string COLLADA_LOOKAT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_LOOKAT_STRUCTURE_get();
  public static readonly string COLLADA_PERSPECTIVE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_PERSPECTIVE_STRUCTURE_get();
  public static readonly string COLLADA_GEOMETRY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_GEOMETRY_STRUCTURE_get();
  public static readonly string COLLADA_MESH_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MESH_STRUCTURE_get();
  public static readonly string COLLADA_VERTICES_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_VERTICES_STRUCTURE_get();
  public static readonly string COLLADA_POLYGONS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_POLYGONS_STRUCTURE_get();
  public static readonly string COLLADA_POLYLIST_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_POLYLIST_STRUCTURE_get();
  public static readonly string COLLADA_TRIANGLES_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRIANGLES_STRUCTURE_get();
  public static readonly string COLLADA_P_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_P_STRUCTURE_get();
  public static readonly string COLLADA_ANIMATION_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ANIMATION_STRUCTURE_get();
  public static readonly string COLLADA_CONTROLLER_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CONTROLLER_STRUCTURE_get();
  public static readonly string COLLADA_SKIN_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SKIN_STRUCTURE_get();
  public static readonly string COLLADA_COMBINER_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_COMBINER_STRUCTURE_get();
  public static readonly string COLLADA_JOINTS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_JOINTS_STRUCTURE_get();
  public static readonly string COLLADA_VALUE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_VALUE_STRUCTURE_get();
  public static readonly string COLLADA_MATERIAL_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MATERIAL_STRUCTURE_get();
  public static readonly string COLLADA_SHADER_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SHADER_STRUCTURE_get();
  public static readonly string COLLADA_PASS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_PASS_STRUCTURE_get();
  public static readonly string COLLADA_PROGRAM_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_PROGRAM_STRUCTURE_get();
  public static readonly string COLLADA_TEXTURE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TEXTURE_STRUCTURE_get();
  public static readonly string COLLADA_IMAGE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_IMAGE_STRUCTURE_get();
  public static readonly string COLLADA_INPUT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_INPUT_STRUCTURE_get();
  public static readonly string COLLADA_TECHNIQUE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TECHNIQUE_STRUCTURE_get();
  public static readonly string COLLADA_SOURCE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SOURCE_STRUCTURE_get();
  public static readonly string COLLADA_ACCESSOR_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ACCESSOR_STRUCTURE_get();
  public static readonly string COLLADA_EXTRA_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_EXTRA_STRUCTURE_get();
  public static readonly string COLLADA_BOUNDINGBOX_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_BOUNDINGBOX_STRUCTURE_get();
  public static readonly string COLLADA_MIN_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MIN_STRUCTURE_get();
  public static readonly string COLLADA_MAX_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MAX_STRUCTURE_get();
  public static readonly string COLLADA_ARRAY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_FLOAT_ARRAY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_FLOAT_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_INT_ARRAY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_INT_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_NAME_ARRAY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_NAME_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_IDREF_ARRAY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_IDREF_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_BOOL_ARRAY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_BOOL_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_SAMPLER_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SAMPLER_STRUCTURE_get();
  public static readonly string COLLADA_CHANNEL_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CHANNEL_STRUCTURE_get();
  public static readonly string COLLADA_CAMERA_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CAMERA_STRUCTURE_get();
  public static readonly string COLLADA_LIGHT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_LIGHT_STRUCTURE_get();
  public static readonly string COLLADA_OPTICS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_OPTICS_STRUCTURE_get();
  public static readonly string COLLADA_PARAMETER_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_PARAMETER_STRUCTURE_get();
  public static readonly string COLLADA_TYPE_PROPERTY = fbx_wrapperPINVOKE.COLLADA_TYPE_PROPERTY_get();
  public static readonly string COLLADA_ID_PROPERTY = fbx_wrapperPINVOKE.COLLADA_ID_PROPERTY_get();
  public static readonly string COLLADA_SUBID_PROPERTY = fbx_wrapperPINVOKE.COLLADA_SUBID_PROPERTY_get();
  public static readonly string COLLADA_NAME_PROPERTY = fbx_wrapperPINVOKE.COLLADA_NAME_PROPERTY_get();
  public static readonly string COLLADA_LAYER_PROPERTY = fbx_wrapperPINVOKE.COLLADA_LAYER_PROPERTY_get();
  public static readonly string COLLADA_COUNT_PROPERTY = fbx_wrapperPINVOKE.COLLADA_COUNT_PROPERTY_get();
  public static readonly string COLLADA_STRIDE_PROPERTY = fbx_wrapperPINVOKE.COLLADA_STRIDE_PROPERTY_get();
  public static readonly string COLLADA_URL_PROPERTY = fbx_wrapperPINVOKE.COLLADA_URL_PROPERTY_get();
  public static readonly string COLLADA_SEMANTIC_PROPERTY = fbx_wrapperPINVOKE.COLLADA_SEMANTIC_PROPERTY_get();
  public static readonly string COLLADA_SOURCE_PROPERTY = fbx_wrapperPINVOKE.COLLADA_SOURCE_PROPERTY_get();
  public static readonly string COLLADA_TARGET_PROPERTY = fbx_wrapperPINVOKE.COLLADA_TARGET_PROPERTY_get();
  public static readonly string COLLADA_PROFILE_PROPERTY = fbx_wrapperPINVOKE.COLLADA_PROFILE_PROPERTY_get();
  public static readonly string COLLADA_MATERIAL_PROPERTY = fbx_wrapperPINVOKE.COLLADA_MATERIAL_PROPERTY_get();
  public static readonly string COLLADA_METER_PROPERTY = fbx_wrapperPINVOKE.COLLADA_METER_PROPERTY_get();
  public static readonly string COLLADA_IDX_PROPERTY = fbx_wrapperPINVOKE.COLLADA_IDX_PROPERTY_get();
  public static readonly string COLLADA_SET_PROPERTY = fbx_wrapperPINVOKE.COLLADA_SET_PROPERTY_get();
  public static readonly string COLLADA_OFFSET_PROPERTY = fbx_wrapperPINVOKE.COLLADA_OFFSET_PROPERTY_get();
  public static readonly string COLLADA_FLOW_PROPERTY = fbx_wrapperPINVOKE.COLLADA_FLOW_PROPERTY_get();
  public static readonly string COLLADA_FORMAT_PROPERTY = fbx_wrapperPINVOKE.COLLADA_FORMAT_PROPERTY_get();
  public static readonly string COLLADA_HEIGHT_PROPERTY = fbx_wrapperPINVOKE.COLLADA_HEIGHT_PROPERTY_get();
  public static readonly string COLLADA_WIDTH_PROPERTY = fbx_wrapperPINVOKE.COLLADA_WIDTH_PROPERTY_get();
  public static readonly string COLLADA_DEPTH_PROPERTY = fbx_wrapperPINVOKE.COLLADA_DEPTH_PROPERTY_get();
  public static readonly string COLLADA_REF_PROPERTY = fbx_wrapperPINVOKE.COLLADA_REF_PROPERTY_get();
  public static readonly string COLLADA_GEOMETRY_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_GEOMETRY_LIBRARY_TYPE_get();
  public static readonly string COLLADA_CONTROLLER_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_CONTROLLER_LIBRARY_TYPE_get();
  public static readonly string COLLADA_ANIMATION_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_ANIMATION_LIBRARY_TYPE_get();
  public static readonly string COLLADA_MATERIAL_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_MATERIAL_LIBRARY_TYPE_get();
  public static readonly string COLLADA_TEXTURE_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_TEXTURE_LIBRARY_TYPE_get();
  public static readonly string COLLADA_IMAGE_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_IMAGE_LIBRARY_TYPE_get();
  public static readonly string COLLADA_LIGHT_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_LIGHT_LIBRARY_TYPE_get();
  public static readonly string COLLADA_CAMERA_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_CAMERA_LIBRARY_TYPE_get();
  public static readonly string COLLADA_LAMBERT_SHADER_TYPE = fbx_wrapperPINVOKE.COLLADA_LAMBERT_SHADER_TYPE_get();
  public static readonly string COLLADA_PHONG_SHADER_TYPE = fbx_wrapperPINVOKE.COLLADA_PHONG_SHADER_TYPE_get();
  public static readonly string COLLADA_CONSTANT_SHADER_TYPE = fbx_wrapperPINVOKE.COLLADA_CONSTANT_SHADER_TYPE_get();
  public static readonly string COLLADA_NAME_TYPE = fbx_wrapperPINVOKE.COLLADA_NAME_TYPE_get();
  public static readonly string COLLADA_IDREF_TYPE = fbx_wrapperPINVOKE.COLLADA_IDREF_TYPE_get();
  public static readonly string COLLADA_FLOAT_TYPE = fbx_wrapperPINVOKE.COLLADA_FLOAT_TYPE_get();
  public static readonly string COLLADA_BOOL_TYPE = fbx_wrapperPINVOKE.COLLADA_BOOL_TYPE_get();
  public static readonly string COLLADA_INT_TYPE = fbx_wrapperPINVOKE.COLLADA_INT_TYPE_get();
  public static readonly string COLLADA_FLOAT3_TYPE = fbx_wrapperPINVOKE.COLLADA_FLOAT3_TYPE_get();
  public static readonly string COLLADA_FLOAT4_TYPE = fbx_wrapperPINVOKE.COLLADA_FLOAT4_TYPE_get();
  public static readonly string COLLADA_FUNCTION_TYPE = fbx_wrapperPINVOKE.COLLADA_FUNCTION_TYPE_get();
  public static readonly string COLLADA_MATRIX_TYPE = fbx_wrapperPINVOKE.COLLADA_MATRIX_TYPE_get();
  public static readonly string COLLADA_STRING_TYPE = fbx_wrapperPINVOKE.COLLADA_STRING_TYPE_get();
  public static readonly string COLLADA_JOINT_NODE_TYPE = fbx_wrapperPINVOKE.COLLADA_JOINT_NODE_TYPE_get();
  public static readonly string COLLADA_NODE_NODE_TYPE = fbx_wrapperPINVOKE.COLLADA_NODE_NODE_TYPE_get();
  public static readonly string COLLADA_TEXTURE_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_TEXTURE_SEMANTIC_get();
  public static readonly string COLLADA_IMAGE_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_IMAGE_SEMANTIC_get();
  public static readonly string COLLADA_INPUT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_INPUT_SEMANTIC_get();
  public static readonly string COLLADA_OUTPUT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_OUTPUT_SEMANTIC_get();
  public static readonly string COLLADA_IN_TANGENT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_IN_TANGENT_SEMANTIC_get();
  public static readonly string COLLADA_OUT_TANGENT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_OUT_TANGENT_SEMANTIC_get();
  public static readonly string COLLADA_INTERPOLATION_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_SEMANTIC_get();
  public static readonly string COLLADA_JOINT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_JOINT_SEMANTIC_get();
  public static readonly string COLLADA_BIND_POSITION_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_BIND_POSITION_SEMANTIC_get();
  public static readonly string COLLADA_BIND_NORMAL_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_BIND_NORMAL_SEMANTIC_get();
  public static readonly string COLLADA_JOINT_AND_WEIGHT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_JOINT_AND_WEIGHT_SEMANTIC_get();
  public static readonly string COLLADA_BIND_MATRIX_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_BIND_MATRIX_SEMANTIC_get();
  public static readonly string COLLADA_JOINT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_JOINT_PARAMETER_get();
  public static readonly string COLLADA_WEIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_WEIGHT_PARAMETER_get();
  public static readonly string COLLADA_MORPH_TARGET_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_MORPH_TARGET_SEMANTIC_get();
  public static readonly string COLLADA_MORPH_WEIGHT_SEMANTIC = fbx_wrapperPINVOKE.COLLADA_MORPH_WEIGHT_SEMANTIC_get();
  public static readonly string COLLADA_GENERIC_TECHNIQUE = fbx_wrapperPINVOKE.COLLADA_GENERIC_TECHNIQUE_get();
  public static readonly string COLLADA_TIME_TARGET = fbx_wrapperPINVOKE.COLLADA_TIME_TARGET_get();
  public static readonly string COLLADA_VERTEX_INPUT = fbx_wrapperPINVOKE.COLLADA_VERTEX_INPUT_get();
  public static readonly string COLLADA_POSITION_INPUT = fbx_wrapperPINVOKE.COLLADA_POSITION_INPUT_get();
  public static readonly string COLLADA_NORMAL_INPUT = fbx_wrapperPINVOKE.COLLADA_NORMAL_INPUT_get();
  public static readonly string COLLADA_COLOR_INPUT = fbx_wrapperPINVOKE.COLLADA_COLOR_INPUT_get();
  public static readonly string COLLADA_MAPPING_INPUT = fbx_wrapperPINVOKE.COLLADA_MAPPING_INPUT_get();
  public static readonly string COLLADA_TEXCOORD_INPUT = fbx_wrapperPINVOKE.COLLADA_TEXCOORD_INPUT_get();
  public static readonly string COLLADA_TEXTANGENT_INPUT = fbx_wrapperPINVOKE.COLLADA_TEXTANGENT_INPUT_get();
  public static readonly string COLLADA_TEXBINORMAL_INPUT = fbx_wrapperPINVOKE.COLLADA_TEXBINORMAL_INPUT_get();
  public static readonly string COLLADA_LIGHT_INTENSITY_PARAMETER_14 = fbx_wrapperPINVOKE.COLLADA_LIGHT_INTENSITY_PARAMETER_14_get();
  public static readonly string COLLADA_LIGHT_PENUMBRA_ANGLE_PARAMETER_14 = fbx_wrapperPINVOKE.COLLADA_LIGHT_PENUMBRA_ANGLE_PARAMETER_14_get();
  public static readonly string COLLADA_LIGHT_DROPOFF_PARAMETER = fbx_wrapperPINVOKE.COLLADA_LIGHT_DROPOFF_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_YFOV_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_YFOV_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ZNEAR_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_ZNEAR_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ZFAR_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_ZFAR_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_BOTTOM_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_ORTHO_BOTTOM_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_TOP_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_ORTHO_TOP_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_LEFT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_ORTHO_LEFT_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_RIGHT_PARAMETER = fbx_wrapperPINVOKE.COLLADA_CAMERA_ORTHO_RIGHT_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_WRAPU_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_WRAPU_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_WRAPV_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_WRAPV_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_MIRRORU_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_MIRRORU_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_MIRRORV_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_MIRRORV_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_BLEND_MODE_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_BLEND_MODE_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_BLEND_MODE_PARAMETER_14 = fbx_wrapperPINVOKE.COLLADA_TEXTURE_BLEND_MODE_PARAMETER_14_get();
  public static readonly string COLLADA_TEXTURE_REPEATU_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_REPEATU_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_REPEATV_PARAMETER = fbx_wrapperPINVOKE.COLLADA_TEXTURE_REPEATV_PARAMETER_get();
  public static readonly string COLLADA_CONSTANT_FUNCTION = fbx_wrapperPINVOKE.COLLADA_CONSTANT_FUNCTION_get();
  public static readonly string COLLADA_LINEAR_FUNCTION = fbx_wrapperPINVOKE.COLLADA_LINEAR_FUNCTION_get();
  public static readonly string COLLADA_QUADRATIC_FUNCTION = fbx_wrapperPINVOKE.COLLADA_QUADRATIC_FUNCTION_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_LINEAR = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_TYPE_LINEAR_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_BEZIER = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_TYPE_BEZIER_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_CARDINAL = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_TYPE_CARDINAL_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_HERMITE = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_TYPE_HERMITE_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_BSPLINE = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_TYPE_BSPLINE_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_STEP = fbx_wrapperPINVOKE.COLLADA_INTERPOLATION_TYPE_STEP_get();
  public static readonly string COLLADA_X_UP = fbx_wrapperPINVOKE.COLLADA_X_UP_get();
  public static readonly string COLLADA_Y_UP = fbx_wrapperPINVOKE.COLLADA_Y_UP_get();
  public static readonly string COLLADA_Z_UP = fbx_wrapperPINVOKE.COLLADA_Z_UP_get();
  public static readonly string COLLADA_IN_FLOW = fbx_wrapperPINVOKE.COLLADA_IN_FLOW_get();
  public static readonly string COLLADA_OUT_FLOW = fbx_wrapperPINVOKE.COLLADA_OUT_FLOW_get();
  public static readonly string COLLADA_INOUT_FLOW = fbx_wrapperPINVOKE.COLLADA_INOUT_FLOW_get();
  public static readonly string COLLADA_RGB_TYPE = fbx_wrapperPINVOKE.COLLADA_RGB_TYPE_get();
  public static readonly string COLLADA_RGBA_TYPE = fbx_wrapperPINVOKE.COLLADA_RGBA_TYPE_get();
  public static readonly string COLLADA_RGB_INPUT = fbx_wrapperPINVOKE.COLLADA_RGB_INPUT_get();
  public static readonly string COLLADA_RGBA_INPUT = fbx_wrapperPINVOKE.COLLADA_RGBA_INPUT_get();
  public static readonly string COLLADA_PHYSICS_LIBRARY_TYPE = fbx_wrapperPINVOKE.COLLADA_PHYSICS_LIBRARY_TYPE_get();
  public static readonly string COLLADA_SHAPE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SHAPE_STRUCTURE_get();
  public static readonly string COLLADA_RIGID_BODY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_RIGID_BODY_STRUCTURE_get();
  public static readonly string COLLADA_DYNAMIC_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_DYNAMIC_STRUCTURE_get();
  public static readonly string COLLADA_MASS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_MASS_STRUCTURE_get();
  public static readonly string COLLADA_PHYSICS_MATERIAL_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_PHYSICS_MATERIAL_STRUCTURE_get();
  public static readonly string COLLADA_STATIC_FRICTION_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_STATIC_FRICTION_ATTRIBUTE_get();
  public static readonly string COLLADA_DYNAMIC_FRICTION_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_DYNAMIC_FRICTION_ATTRIBUTE_get();
  public static readonly string COLLADA_ELASTICITY_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_ELASTICITY_ATTRIBUTE_get();
  public static readonly string COLLADA_BOX_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_BOX_STRUCTURE_get();
  public static readonly string COLLADA_SPHERE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SPHERE_STRUCTURE_get();
  public static readonly string COLLADA_CAPSULE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CAPSULE_STRUCTURE_get();
  public static readonly string COLLADA_CYLINDER_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CYLINDER_STRUCTURE_get();
  public static readonly string COLLADA_ELLIPSOID_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ELLIPSOID_STRUCTURE_get();
  public static readonly string COLLADA_SIZE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SIZE_STRUCTURE_get();
  public static readonly string COLLADA_RADIUS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_RADIUS_STRUCTURE_get();
  public static readonly string COLLADA_PHYSICS_ENVIRONMENT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_PHYSICS_ENVIRONMENT_STRUCTURE_get();
  public static readonly string COLLADA_ENVIRONMENT_ID = fbx_wrapperPINVOKE.COLLADA_ENVIRONMENT_ID_get();
  public static readonly string COLLADA_TIMESTEP_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_TIMESTEP_ATTRIBUTE_get();
  public static readonly string COLLADA_GRAVITY_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_GRAVITY_ATTRIBUTE_get();
  public static readonly string COLLADA_INITIAL_VELOCITY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_INITIAL_VELOCITY_STRUCTURE_get();
  public static readonly string COLLADA_INITIAL_ANGULAR_VELOCITY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_INITIAL_ANGULAR_VELOCITY_STRUCTURE_get();
  public static readonly string COLLADA_CONVEX_MESH_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CONVEX_MESH_STRUCTURE_get();
  public static readonly string COLLADA_INERTIA_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_INERTIA_STRUCTURE_get();
  public static readonly string COLLADA_DENSITY_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_DENSITY_STRUCTURE_get();
  public static readonly string COLLADA_CENTER_OF_MASS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_CENTER_OF_MASS_STRUCTURE_get();
  public static readonly string COLLADA_DYNAMICS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_DYNAMICS_STRUCTURE_get();
  public static readonly string COLLADA_RIGID_CONSTRAINT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_RIGID_CONSTRAINT_STRUCTURE_get();
  public static readonly string COLLADA_BODY_PROPERTY = fbx_wrapperPINVOKE.COLLADA_BODY_PROPERTY_get();
  public static readonly string COLLADA_ATTACHMENT_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ATTACHMENT_STRUCTURE_get();
  public static readonly string COLLADA_ROT_LIMIT_MIN_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ROT_LIMIT_MIN_STRUCTURE_get();
  public static readonly string COLLADA_ROT_LIMIT_MAX_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ROT_LIMIT_MAX_STRUCTURE_get();
  public static readonly string COLLADA_TRANS_LIMIT_MIN_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRANS_LIMIT_MIN_STRUCTURE_get();
  public static readonly string COLLADA_TRANS_LIMIT_MAX_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRANS_LIMIT_MAX_STRUCTURE_get();
  public static readonly string COLLADA_ENABLED_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_ENABLED_STRUCTURE_get();
  public static readonly string COLLADA_INTERPENETRATE_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_INTERPENETRATE_STRUCTURE_get();
  public static readonly string COLLADA_SPRING_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_SPRING_STRUCTURE_get();
  public static readonly string COLLADA_STIFFNESS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_STIFFNESS_STRUCTURE_get();
  public static readonly string COLLADA_DAMPING_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_DAMPING_STRUCTURE_get();
  public static readonly string COLLADA_REST_LENGTH_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_REST_LENGTH_STRUCTURE_get();
  public static readonly string COLLADA_P0_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_P0_STRUCTURE_get();
  public static readonly string COLLADA_P1_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_P1_STRUCTURE_get();
  public static readonly string COLLADA_TRUE_KEYWORD = fbx_wrapperPINVOKE.COLLADA_TRUE_KEYWORD_get();
  public static readonly string COLLADA_FALSE_KEYWORD = fbx_wrapperPINVOKE.COLLADA_FALSE_KEYWORD_get();
  public static readonly string COLLADA_LINES_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_LINES_STRUCTURE_get();
  public static readonly string COLLADA_LINESTRIP_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_LINESTRIP_STRUCTURE_get();
  public static readonly string COLLADA_TRIFANS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRIFANS_STRUCTURE_get();
  public static readonly string COLLADA_TRISTRIPS_STRUCTURE = fbx_wrapperPINVOKE.COLLADA_TRISTRIPS_STRUCTURE_get();
  public static readonly string COLLADA_MAYA_PROFILE = fbx_wrapperPINVOKE.COLLADA_MAYA_PROFILE_get();
  public static readonly string COLLADA_MAYA_LAYER_ELEMENT = fbx_wrapperPINVOKE.COLLADA_MAYA_LAYER_ELEMENT_get();
  public static readonly string COLLADA_MAX3D_PROFILE = fbx_wrapperPINVOKE.COLLADA_MAX3D_PROFILE_get();
  public static readonly string COLLADA_MAX3D_FRAMERATE_ELEMENT = fbx_wrapperPINVOKE.COLLADA_MAX3D_FRAMERATE_ELEMENT_get();
  public static readonly string COLLADA_FCOLLADA_PROFILE = fbx_wrapperPINVOKE.COLLADA_FCOLLADA_PROFILE_get();
  public static readonly string COLLADA_FCOLLADA_STARTTIME_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FCOLLADA_STARTTIME_ELEMENT_get();
  public static readonly string COLLADA_FCOLLADA_ENDTIME_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FCOLLADA_ENDTIME_ELEMENT_get();
  public static readonly string COLLADA_FCOLLADA_VISIBILITY_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FCOLLADA_VISIBILITY_ELEMENT_get();
  public static readonly string COLLADA_XSI_PROFILE = fbx_wrapperPINVOKE.COLLADA_XSI_PROFILE_get();
  public static readonly string COLLADA_XSI_VISIBILITY_ELEMENT = fbx_wrapperPINVOKE.COLLADA_XSI_VISIBILITY_ELEMENT_get();
  public static readonly string COLLADA_FBX_PROFILE = fbx_wrapperPINVOKE.COLLADA_FBX_PROFILE_get();
  public static readonly string COLLADA_FBX_TARGET_ELEMENT = fbx_wrapperPINVOKE.COLLADA_FBX_TARGET_ELEMENT_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_PROFILE = fbx_wrapperPINVOKE.COLLADA_NVIDIA_FXCOMPOSER_PROFILE_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_IMPORT_ELEMENT = fbx_wrapperPINVOKE.COLLADA_NVIDIA_FXCOMPOSER_IMPORT_ELEMENT_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_URL_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_NVIDIA_FXCOMPOSER_URL_ATTRIBUTE_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_COMPILER_OPTIONS_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_NVIDIA_FXCOMPOSER_COMPILER_OPTIONS_ATTRIBUTE_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_PROFILE_ATTRIBUTE = fbx_wrapperPINVOKE.COLLADA_NVIDIA_FXCOMPOSER_PROFILE_ATTRIBUTE_get();
  public static readonly string FBXSDK_ASSERT_ENVSTR = fbx_wrapperPINVOKE.FBXSDK_ASSERT_ENVSTR_get();
  public static readonly int FBXSDK_CHAR_MIN = fbx_wrapperPINVOKE.FBXSDK_CHAR_MIN_get();
  public static readonly int FBXSDK_CHAR_MAX = fbx_wrapperPINVOKE.FBXSDK_CHAR_MAX_get();
  public static readonly int FBXSDK_UCHAR_MIN = fbx_wrapperPINVOKE.FBXSDK_UCHAR_MIN_get();
  public static readonly int FBXSDK_UCHAR_MAX = fbx_wrapperPINVOKE.FBXSDK_UCHAR_MAX_get();
  public static readonly int FBXSDK_SHORT_MIN = fbx_wrapperPINVOKE.FBXSDK_SHORT_MIN_get();
  public static readonly int FBXSDK_SHORT_MAX = fbx_wrapperPINVOKE.FBXSDK_SHORT_MAX_get();
  public static readonly int FBXSDK_USHORT_MIN = fbx_wrapperPINVOKE.FBXSDK_USHORT_MIN_get();
  public static readonly int FBXSDK_USHORT_MAX = fbx_wrapperPINVOKE.FBXSDK_USHORT_MAX_get();
  public static readonly int FBXSDK_INT_MIN = fbx_wrapperPINVOKE.FBXSDK_INT_MIN_get();
  public static readonly int FBXSDK_INT_MAX = fbx_wrapperPINVOKE.FBXSDK_INT_MAX_get();
  public static readonly int FBXSDK_UINT_MIN = fbx_wrapperPINVOKE.FBXSDK_UINT_MIN_get();
  public static readonly int FBXSDK_UINT_MAX = fbx_wrapperPINVOKE.FBXSDK_UINT_MAX_get();
  public static readonly int FBXSDK_LONG_MIN = fbx_wrapperPINVOKE.FBXSDK_LONG_MIN_get();
  public static readonly int FBXSDK_LONG_MAX = fbx_wrapperPINVOKE.FBXSDK_LONG_MAX_get();
  public static readonly int FBXSDK_ULONG_MIN = fbx_wrapperPINVOKE.FBXSDK_ULONG_MIN_get();
  public static readonly int FBXSDK_ULONG_MAX = fbx_wrapperPINVOKE.FBXSDK_ULONG_MAX_get();
  public static readonly double FBXSDK_TOLERANCE = fbx_wrapperPINVOKE.FBXSDK_TOLERANCE_get();
  public static readonly string FIELD_SUMMARY = fbx_wrapperPINVOKE.FIELD_SUMMARY_get();
  public static readonly string FIELD_SUMMARY_VERSION = fbx_wrapperPINVOKE.FIELD_SUMMARY_VERSION_get();
  public static readonly string FIELD_SUMMARY_TEMPLATE = fbx_wrapperPINVOKE.FIELD_SUMMARY_TEMPLATE_get();
  public static readonly string FIELD_SUMMARY_PASSWORD_PROTECTION = fbx_wrapperPINVOKE.FIELD_SUMMARY_PASSWORD_PROTECTION_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_MODEL = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_MODEL_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_DEVICE = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_DEVICE_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_CHARACTER = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_CHARACTER_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_ACTOR = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_ACTOR_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_CONSTRAINT = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_CONSTRAINT_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_MEDIA = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_MEDIA_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_COMPONENT = fbx_wrapperPINVOKE.FIELD_SUMMARY_CONTENT_COUNT_COMPONENT_get();
  public static readonly string FIELD_SUMMARY_TAKES = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_get();
  public static readonly string FIELD_SUMMARY_TAKES_VERSION = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_VERSION_get();
  public static readonly string FIELD_SUMMARY_TAKES_CURRENT = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_CURRENT_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_TAKE_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE_COMMENT = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_TAKE_COMMENT_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE_LOCAL_TIME = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_TAKE_LOCAL_TIME_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE_REFERENCE_TIME = fbx_wrapperPINVOKE.FIELD_SUMMARY_TAKES_TAKE_REFERENCE_TIME_get();
  public static readonly string FIELD_KFBXOBJECT_REFERENCE_TO = fbx_wrapperPINVOKE.FIELD_KFBXOBJECT_REFERENCE_TO_get();
  public static readonly string FIELD_KFBXOBJECT_DOCUMENT = fbx_wrapperPINVOKE.FIELD_KFBXOBJECT_DOCUMENT_get();
  public static readonly string FIELD_KFBXOBECT_REFERENCE_TO = fbx_wrapperPINVOKE.FIELD_KFBXOBECT_REFERENCE_TO_get();
  public static readonly string FIELD_KFBXCONTAINER_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXCONTAINER_VERSION_get();
  public static readonly string FIELD_KFBXCONTAINER_CONTAINER = fbx_wrapperPINVOKE.FIELD_KFBXCONTAINER_CONTAINER_get();
  public static readonly string FIELD_THUMBNAIL = fbx_wrapperPINVOKE.FIELD_THUMBNAIL_get();
  public static readonly string FIELD_THUMBNAIL_VERSION = fbx_wrapperPINVOKE.FIELD_THUMBNAIL_VERSION_get();
  public static readonly string FIELD_THUMBNAIL_SIZE = fbx_wrapperPINVOKE.FIELD_THUMBNAIL_SIZE_get();
  public static readonly string FIELD_THUMBNAIL_FORMAT = fbx_wrapperPINVOKE.FIELD_THUMBNAIL_FORMAT_get();
  public static readonly string FIELD_THUMBNAIL_ENCODING = fbx_wrapperPINVOKE.FIELD_THUMBNAIL_ENCODING_get();
  public static readonly string FIELD_THUMBNAIL_IMAGE = fbx_wrapperPINVOKE.FIELD_THUMBNAIL_IMAGE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_VERSION_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWPLANES = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWPLANES_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_COUNT_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_PLANE = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_PLANE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_USESHADOW = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_USESHADOW_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWINTENSITY = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWINTENSITY_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTRENDER = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTRENDER_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTLIGHTCOLOR = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTLIGHTCOLOR_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGOPTIONS = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGOPTIONS_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGENABLE = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGENABLE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGMODE = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGMODE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGDENSITY = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGDENSITY_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGSTART = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGSTART_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGEND = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGEND_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGCOLOR = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGCOLOR_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_RENDERER_SETTINGS = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_RENDERER_SETTINGS_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_CAMERA = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_CAMERA_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_VIEWING_MODE = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_VIEWING_MODE_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_SETTINGS = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_SETTINGS_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_CAMERA = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_CAMERA_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIME_MODE = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIME_MODE_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_FRAMERATE = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_FRAMERATE_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIME_PROTOCOL = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIME_PROTOCOL_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_SNAP_ON_FRAMES = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_SNAP_ON_FRAMES_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_INDEX_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_MARKER = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_MARKER_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_LOOP = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_LOOP_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_START_TIME = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_START_TIME_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_STOP_TIME = fbx_wrapperPINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_STOP_TIME_get();
  public static readonly string FIELD_MEDIA_MEDIA = fbx_wrapperPINVOKE.FIELD_MEDIA_MEDIA_get();
  public static readonly string FIELD_MEDIA_VIDEO = fbx_wrapperPINVOKE.FIELD_MEDIA_VIDEO_get();
  public static readonly string FIELD_MEDIA_TYPE = fbx_wrapperPINVOKE.FIELD_MEDIA_TYPE_get();
  public static readonly string TOKEN_MEDIA_CLIP = fbx_wrapperPINVOKE.TOKEN_MEDIA_CLIP_get();
  public static readonly string FIELD_MEDIA_VERSION = fbx_wrapperPINVOKE.FIELD_MEDIA_VERSION_get();
  public static readonly string FIELD_MEDIA_ORIGINAL_FORMAT = fbx_wrapperPINVOKE.FIELD_MEDIA_ORIGINAL_FORMAT_get();
  public static readonly string FIELD_MEDIA_ORIGINAL_FILENAME = fbx_wrapperPINVOKE.FIELD_MEDIA_ORIGINAL_FILENAME_get();
  public static readonly string FIELD_MEDIA_FILENAME = fbx_wrapperPINVOKE.FIELD_MEDIA_FILENAME_get();
  public static readonly string FIELD_MEDIA_RELATIVE_FILENAME = fbx_wrapperPINVOKE.FIELD_MEDIA_RELATIVE_FILENAME_get();
  public static readonly string FIELD_MEDIA_CONTENT = fbx_wrapperPINVOKE.FIELD_MEDIA_CONTENT_get();
  public static readonly string FIELD_PROPERTIES = fbx_wrapperPINVOKE.FIELD_PROPERTIES_get();
  public static readonly string FIELD_PROPERTIES_VERSION = fbx_wrapperPINVOKE.FIELD_PROPERTIES_VERSION_get();
  public static readonly string FIELD_USERPROPERTIES = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_get();
  public static readonly string FIELD_USERPROPERTIES_NAME = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_NAME_get();
  public static readonly string FIELD_USERPROPERTIES_TYPE = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_TYPE_get();
  public static readonly string FIELD_USERPROPERTIES_LABEL = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_LABEL_get();
  public static readonly string FIELD_USERPROPERTIES_MIN = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_MIN_get();
  public static readonly string FIELD_USERPROPERTIES_MAX = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_MAX_get();
  public static readonly string FIELD_USERPROPERTIES_VALUE = fbx_wrapperPINVOKE.FIELD_USERPROPERTIES_VALUE_get();
  public static readonly string FIELD_KFBXNODE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXNODE_VERSION_get();
  public static readonly string FIELD_KFBXNODE_ANIMATION_MODE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_ANIMATION_MODE_get();
  public static readonly string FIELD_KFBXNODE_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TYPE_get();
  public static readonly string FIELD_KFBXNODE_TYPE_FLAGS = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TYPE_FLAGS_get();
  public static readonly string FIELD_KFBXNODE_MODEL = fbx_wrapperPINVOKE.FIELD_KFBXNODE_MODEL_get();
  public static readonly string FIELD_KFBXNODE_HIDDEN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_HIDDEN_get();
  public static readonly string FIELD_KFBXNODE_SHADING = fbx_wrapperPINVOKE.FIELD_KFBXNODE_SHADING_get();
  public static readonly string FIELD_KFBXNODE_TRANSFORM = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TRANSFORM_get();
  public static readonly string FIELD_KFBXNODE_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_TRANSLATION = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TRANSLATION_get();
  public static readonly string FIELD_KFBXNODE_ROTATION = fbx_wrapperPINVOKE.FIELD_KFBXNODE_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_SCALING = fbx_wrapperPINVOKE.FIELD_KFBXNODE_SCALING_get();
  public static readonly string FIELD_KFBXNODE_CHILDREN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_CHILDREN_get();
  public static readonly string FIELD_KFBXNODE_CULLING_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_CULLING_TYPE_get();
  public static readonly string TOKEN_KFBXNODE_CULLING_OFF = fbx_wrapperPINVOKE.TOKEN_KFBXNODE_CULLING_OFF_get();
  public static readonly string TOKEN_KFBXNODE_CULLING_ON_CCW = fbx_wrapperPINVOKE.TOKEN_KFBXNODE_CULLING_ON_CCW_get();
  public static readonly string TOKEN_KFBXNODE_CULLING_ON_CW = fbx_wrapperPINVOKE.TOKEN_KFBXNODE_CULLING_ON_CW_get();
  public static readonly string FIELD_KFBXNODE_LIMITS = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_AUTO = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_AUTO_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_AUTO = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_AUTO_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_AUTO = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_AUTO_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_ENABLE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_ENABLE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_ENABLE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_ENABLE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_ENABLE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_ENABLE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_X_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_X_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Y_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_Y_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Z_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_Z_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_X_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_X_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_X_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Y_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_Y_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Z_DEFAULT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_Z_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_X_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_X_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Y_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_Y_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Z_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_Z_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_X_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_X_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_X_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Y_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_Y_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Z_MIN = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_Z_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_X_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_X_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Y_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_Y_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Z_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_T_Z_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_X_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_X_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_X_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Y_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_Y_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Z_MAX = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_S_Z_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_TYPE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_CLAMP_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_CLAMP_TYPE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_AXIS = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_X_AXIS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_AXIS = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_AXIS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_AXIS = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_AXIS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_AXIS_LENGTH = fbx_wrapperPINVOKE.FIELD_KFBXNODE_LIMITS_AXIS_LENGTH_get();
  public static readonly string FIELD_KFBXNODE_TARGET = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TARGET_get();
  public static readonly string FIELD_KFBXNODE_UP_VECTOR_MODEL = fbx_wrapperPINVOKE.FIELD_KFBXNODE_UP_VECTOR_MODEL_get();
  public static readonly string FIELD_KFBXNODE_POST_TARGET_ROTATION = fbx_wrapperPINVOKE.FIELD_KFBXNODE_POST_TARGET_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_TARGET_UP_VECTOR = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TARGET_UP_VECTOR_get();
  public static readonly string FIELD_KFBXNODE_PIVOTS = fbx_wrapperPINVOKE.FIELD_KFBXNODE_PIVOTS_get();
  public static readonly string FIELD_KFBXNODE_PACKAGE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_PACKAGE_get();
  public static readonly string FIELD_KFBXNODE_FILE = fbx_wrapperPINVOKE.FIELD_KFBXNODE_FILE_get();
  public static readonly string FIELD_KFBXNODE_TRANSLATION_OFFSET = fbx_wrapperPINVOKE.FIELD_KFBXNODE_TRANSLATION_OFFSET_get();
  public static readonly string FIELD_KFBXNODE_ROTATION_PIVOT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_ROTATION_PIVOT_get();
  public static readonly string FIELD_KFBXNODE_PRE_ROTATION = fbx_wrapperPINVOKE.FIELD_KFBXNODE_PRE_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_POST_ROTATION = fbx_wrapperPINVOKE.FIELD_KFBXNODE_POST_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_SCALING_PIVOT = fbx_wrapperPINVOKE.FIELD_KFBXNODE_SCALING_PIVOT_get();
  public static readonly string FIELD_KFBXNODE_PIVOT_ENABLED = fbx_wrapperPINVOKE.FIELD_KFBXNODE_PIVOT_ENABLED_get();
  public static readonly string FIELD_KFBXGENERICNODE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGENERICNODE_VERSION_get();
  public static readonly string FIELD_KFBXGENERICNODE_GENERICNODE = fbx_wrapperPINVOKE.FIELD_KFBXGENERICNODE_GENERICNODE_get();
  public static readonly string FIELD_KFBXGEOMETRY_MATERIAL = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_MATERIAL_get();
  public static readonly string FIELD_KFBXGEOMETRY_TEXTURE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_TEXTURE_get();
  public static readonly string FIELD_KFBXGEOMETRY_LINK = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_LINK_get();
  public static readonly string FIELD_KFBXGEOMETRY_SHAPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_SHAPE_get();
  public static readonly string FIELD_KFBXMARKER_LOOK = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_LOOK_get();
  public static readonly string FIELD_KFBXMARKER_SIZE = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_SIZE_get();
  public static readonly string FIELD_KFBXMARKER_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_COLOR_get();
  public static readonly string FIELD_KFBXMARKER_SHOW_LABEL = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_SHOW_LABEL_get();
  public static readonly string FIELD_KFBXMARKER_IK_PIVOT = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_IK_PIVOT_get();
  public static readonly string FIELD_KFBXMARKER_IK_REACH_TRANSLATION = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_IK_REACH_TRANSLATION_get();
  public static readonly string FIELD_KFBXMARKER_IK_REACH_ROTATION = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_IK_REACH_ROTATION_get();
  public static readonly string FIELD_KFBXMARKER_IK_PULL = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_IK_PULL_get();
  public static readonly string FIELD_KFBXMARKER_IK_PULL_HIPS = fbx_wrapperPINVOKE.FIELD_KFBXMARKER_IK_PULL_HIPS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_GEOMETRY_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_POSITION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_POSITION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_UP_VECTOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_UP_VECTOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_DEFAULT_CAMERA_INTEREST_POSITION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_DEFAULT_CAMERA_INTEREST_POSITION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ROLL = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ROLL_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_TURNTABLE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_TURNTABLE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_PROJECTION_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_PROJECTION_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FORMAT_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_FORMAT_NAME_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_NTSC = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_NTSC_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_D1_NTSC = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_D1_NTSC_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_PAL = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_PAL_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_D1_PAL = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_D1_PAL_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_HD = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_HD_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_640x480 = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_640x480_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_320x200 = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_320x200_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_320x240 = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_320x240_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_128x128 = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_128x128_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_FULL_SCREEN = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_FULL_SCREEN_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_FORMAT = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_FORMAT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_WIDTH = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_WIDTH_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_HEIGHT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_HEIGHT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_PIXEL_RATIO = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_PIXEL_RATIO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_NEAR_PLANE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_NEAR_PLANE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_FAR_PLANE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_FAR_PLANE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LOCK = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LOCK_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_APERTURE_FORMAT_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_APERTURE_FORMAT_NAME_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_16MM_THEATRICAL = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_16MM_THEATRICAL_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_SUPER_16MM = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_SUPER_16MM_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_ACADEMY = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_ACADEMY_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_TV_PROJECTION = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_TV_PROJECTION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_FULL_APERTURE = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_FULL_APERTURE_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_185_PROJECTION = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_185_PROJECTION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_ANAMORPHIC = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_ANAMORPHIC_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_70MM_PROJECTION = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_70MM_PROJECTION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_VISTA_VISION = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_VISTA_VISION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_DYNAVISION = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_DYNAVISION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_IMAX = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_IMAX_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_APERTURE_FORMAT = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_APERTURE_FORMAT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_APERTURE_MODE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_APERTURE_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_DIMENSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_SQUEEZERATIO = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_SQUEEZERATIO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_FOCAL_LENGTH = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_FOCAL_LENGTH_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_X = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_X_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_Y = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_Y_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_X = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_X_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_Y = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_Y_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_MEDIA_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_MEDIA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_TEXTURE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_TEXTURE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_VIDEO_CLIP_TEXTURE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_VIDEO_CLIP_TEXTURE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISPLAY_MODE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISPLAY_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DRAWING_MODE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DRAWING_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_THRESHOLD_ENABLE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_THRESHOLD_ENABLE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_TRESHOLD = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_TRESHOLD_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_PLACEMENT_OPTIONS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_PLACEMENT_OPTIONS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE_MODE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_VIEW_CAMERA_INTEREST = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_VIEW_CAMERA_INTEREST_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_VIEW_NEAR_FAR_PLANES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_VIEW_NEAR_FAR_PLANES_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_GRID = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_GRID_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_AXIS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_AXIS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_INFO_ON_MOVING = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_INFO_ON_MOVING_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_TIME_CODE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_TIME_CODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SAFE_AREA_STYLE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SAFE_AREA_STYLE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA_ON_RENDER = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA_ON_RENDER_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_AUDIO = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_AUDIO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_AUDIO_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_AUDIO_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_USE_FRAME_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_USE_FRAME_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FRAME_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_FRAME_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_ORTHO_ZOOM = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_ORTHO_ZOOM_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_DEPTH_OF_FIELD = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_DEPTH_OF_FIELD_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_ANTIALIASING = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_ANTIALIASING_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_OVERSAMPLING = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_OVERSAMPLING_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_RENDER_OPTIONS_USAGE_TIME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_RENDER_OPTIONS_USAGE_TIME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_GEOMETRY_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_STEREO = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_STEREO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_INTERAXIAL_SEP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_INTERAXIAL_SEP_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_ZERO_PARALLAX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_ZERO_PARALLAX_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_TOE_IN_ADJUST = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_TOE_IN_ADJUST_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_RIGHT_CAM = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_RIGHT_CAM_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_LEFT_CAM = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_LEFT_CAM_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_RELATIVE_PRECOMP_FILE_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_RELATIVE_PRECOMP_FILE_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_CONTENT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_CONTENT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_SWITCHER = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_SWITCHER_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_ID = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_INDEX_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_INDEX_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_GEOMETRY_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLIGHT_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_CAST_LIGHT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLIGHT_CAST_LIGHT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_UV_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_UV_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_GEOMETRY_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTICES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTICES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_EDGES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_EDGES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_INTERNAL_EDGES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_INTERNAL_EDGES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_NORMALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_NORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_NORMALS_WCOMPONENT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_NORMALS_WCOMPONENT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BINORMALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_BINORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BINORMALS_WCOMPONENT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_BINORMALS_WCOMPONENT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TANGENTS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TANGENTS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TANGENTS_WCOMPONENT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TANGENTS_WCOMPONENT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_NORMALS_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_NORMALS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BINORMALS_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_BINORMALS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TANGENTS_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TANGENTS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_MATERIAL_ASSIGNATION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_MATERIAL_ASSIGNATION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_ASSIGNATION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_ASSIGNATION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_POLYGON_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_POLYGON_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_POLYGON_GROUP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_POLYGON_GROUP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_MATERIALS_ID = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_MATERIALS_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_ID = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_UV_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_UV_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_MAPPING_INFO_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_MAPPING_INFO_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_UV = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_UV_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_POLYGON_UV = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_POLYGON_UV_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_GEOMETRY_UV_INFO = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_GEOMETRY_UV_INFO_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_VERTEX_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_VERTEX_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_UV_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_UV_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INFO = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INFO_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_ASSIGNATION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_ASSIGNATION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VALUES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VALUES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_SMOOTHING = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_SMOOTHING_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_CREASE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_CREASE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_EDGE_CREASE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_EDGE_CREASE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_HOLE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_HOLE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_INDICES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_INDICES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_ID = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_ARRAY = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_ARRAY_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_NAME = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VISIBILITY = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_VISIBILITY_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_SMOOTHNESS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_SMOOTHNESS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PREVIEW_DIVSION_LEVELS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_PREVIEW_DIVSION_LEVELS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_RENDER_DIVSION_LEVELS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_RENDER_DIVSION_LEVELS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_DISPLAY_SUBDIVISIONS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_DISPLAY_SUBDIVISIONS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PRESERVE_BORDERS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_PRESERVE_BORDERS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PRESERVE_HARD_EDGES = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_PRESERVE_HARD_EDGES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PROPAGATE_EDGE_HARDNESS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_PROPAGATE_EDGE_HARDNESS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BOUNDARY_RULE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_BOUNDARY_RULE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_EXTENDED_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_U_EXTENDED_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_CLOSED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_U_CLOSED_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_TOPCAP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_U_TOPCAP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_STEP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_U_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_U_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_EXTENDED_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_V_EXTENDED_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_CLOSED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_V_CLOSED_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_TOPCAP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_V_TOPCAP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_STEP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_V_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYMESH_V_COUNT_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_NO_MAPPING_INFORMATION = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_NO_MAPPING_INFORMATION_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_VERTICE = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_VERTICE_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_POLYGON = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_POLYGON_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_POLYGON_VERTEX = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_POLYGON_VERTEX_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_FACE = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_FACE_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_EDGE = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_EDGE_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_ALL_SAME = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_ALL_SAME_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_MODEL = fbx_wrapperPINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_MODEL_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_LEVEL_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSUBDIV_LEVEL_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_CURRENT_LEVEL = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSUBDIV_CURRENT_LEVEL_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_DISPLAY_SMOOTHNESS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSUBDIV_DISPLAY_SMOOTHNESS_get();
  public static readonly string TOKEN_REFERENCE_DIRECT = fbx_wrapperPINVOKE.TOKEN_REFERENCE_DIRECT_get();
  public static readonly string TOKEN_REFERENCE_INDEX = fbx_wrapperPINVOKE.TOKEN_REFERENCE_INDEX_get();
  public static readonly string TOKEN_REFERENCE_INDEX_TO_DIRECT = fbx_wrapperPINVOKE.TOKEN_REFERENCE_INDEX_TO_DIRECT_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_NURB_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_NURB_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_NURB_ORDER = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_NURB_ORDER_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_DIMENSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_STEP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_FORM = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_FORM_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_UCAPPED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_UCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_VCAPPED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_VCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_POINTS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_U = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_U_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_V = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_V_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_U = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_U_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_V = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_V_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_MATERIALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_MATERIALS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_SURFACE_DISPLAY = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURB_SURFACE_DISPLAY_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_ORDER = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_ORDER_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_DIMENSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_STEP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_FORM = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_FORM_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_UCAPPED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_UCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_VCAPPED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_VCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_POINTS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_U = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_U_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_V = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_V_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_MATERIALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_MATERIALS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_SURFACE_DISPLAY = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_SURFACE_DISPLAY_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_FLIP_NORMALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_FLIP_NORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_FLIP_NORMALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_FLIP_NORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYBOUNDARY_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYBOUNDARY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLINE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLINE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLINE_POINTS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLINE_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYLINE_POINTS_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYLINE_POINTS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIVISION_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSUBDIVISION_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_ORDER = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_ORDER_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_DIMENSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_KNOTVECTOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_KNOTVECTOR_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_FORM = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_FORM_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_POINTS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_RATIONAL = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_RATIONAL_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_PATCH_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_PATCH_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_PATCH_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_PATCH_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_DIMENSIONS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_DIMENSIONS_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_STEP = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_CLOSED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_CLOSED_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_UCAPPED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_UCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_VCAPPED = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_VCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_POINTS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_SURFACE_DISPLAY = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_SURFACE_DISPLAY_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_MATERIALS = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYPATCH_MATERIALS_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_SRC_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_SRC_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_DST_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_DST_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_INDEX_MAPPING = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_INDEX_MAPPING_get();
  public static readonly string FIELD_KFBXGEOMETRYSKELETON_LIMB_LENGTH = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSKELETON_LIMB_LENGTH_get();
  public static readonly string FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_SIZE = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_SIZE_get();
  public static readonly string FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_COLOR_get();
  public static readonly string FIELD_KFBXVIDEO_USEMIPMAP = fbx_wrapperPINVOKE.FIELD_KFBXVIDEO_USEMIPMAP_get();
  public static readonly string FIELD_KFBXTEXTURE_TEXTURE = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_TEXTURE_get();
  public static readonly string FIELD_KFBXTEXTURE_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_TYPE_get();
  public static readonly string FIELD_KFBXTEXTURE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_VERSION_get();
  public static readonly string FIELD_KFBXTEXTURE_TEXTURE_NAME = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_TEXTURE_NAME_get();
  public static readonly string FIELD_KFBXTEXTURE_MEDIA = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_MEDIA_get();
  public static readonly string FIELD_KFBXTEXTURE_FILENAME = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_FILENAME_get();
  public static readonly string FIELD_KFBXTEXTURE_RELATIVE_FILENAME = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_RELATIVE_FILENAME_get();
  public static readonly string FIELD_KFBXTEXTURE_TRANSLATION = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_TRANSLATION_get();
  public static readonly string FIELD_KFBXTEXTURE_SCALING = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_SCALING_get();
  public static readonly string FIELD_KFBXTEXTURE_UV_TRANSLATION = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_UV_TRANSLATION_get();
  public static readonly string FIELD_KFBXTEXTURE_UV_SCALING = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_UV_SCALING_get();
  public static readonly string FIELD_KFBXTEXTURE_ROTATION = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_ROTATION_get();
  public static readonly string FIELD_KFBXTEXTURE_TILING = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_TILING_get();
  public static readonly string FIELD_KFBXTEXTURE_ALPHA_SRC = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_ALPHA_SRC_get();
  public static readonly string FIELD_KFBXTEXTURE_CROPPING = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_CROPPING_get();
  public static readonly string FIELD_KFBXTEXTURE_MAPPING_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_MAPPING_TYPE_get();
  public static readonly string FIELD_KFBXTEXTURE_PLANAR_NORMAL = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_PLANAR_NORMAL_get();
  public static readonly string FIELD_KFBXTEXTURE_SWAPUV = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_SWAPUV_get();
  public static readonly string FIELD_KFBXTEXTURE_MATERIAL_USE = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_MATERIAL_USE_get();
  public static readonly string FIELD_KFBXTEXTURE_TEXTURE_USE = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_TEXTURE_USE_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_STANDARD = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_STANDARD_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_SHADOW_MAP = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_SHADOW_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_LIGHT_MAP = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_LIGHT_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERICAL_REFLEXION_MAP = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERICAL_REFLEXION_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERE_REFLEXION_MAP = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERE_REFLEXION_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_BUMP_NORMAL_MAP = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_BUMP_NORMAL_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_TRANSLUCENT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_TRANSLUCENT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_ADD = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_ADD_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_MODULATE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_MODULATE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_MODULATE2 = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_MODULATE2_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_OVER = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_OVER_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_NORMAL = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_NORMAL_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DISSOLVE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_DISSOLVE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DARKEN = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_DARKEN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_COLORBURN = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_COLORBURN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LINEARBURN = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_LINEARBURN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DARKERCOLOR = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_DARKERCOLOR_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LIGHTEN = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_LIGHTEN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SCREEN = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_SCREEN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_COLORDODGE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_COLORDODGE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LINEARDODGE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_LINEARDODGE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LIGHTERCOLOR = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_LIGHTERCOLOR_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SOFTLIGHT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_SOFTLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_HARDLIGHT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_HARDLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_VIVIDLIGHT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_VIVIDLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LINEARLIGHT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_LINEARLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_PINLIGHT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_PINLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_HARDMIX = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_HARDMIX_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DIFFERENCE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_DIFFERENCE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_EXCLUSION = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_EXCLUSION_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SUBTRACT = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_SUBTRACT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DIVIDE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_DIVIDE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_HUE = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_HUE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SATURATION = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_SATURATION_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_COLOR = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_COLOR_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LUMINOSITY = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_LUMINOSITY_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_OVERLAY = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_OVERLAY_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_MAXBLEND = fbx_wrapperPINVOKE.TOKEN_KFBXTEXTURE_BLEND_MAXBLEND_get();
  public static readonly string FIELD_KFBXTEXTURE_WRAP_U = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_WRAP_U_get();
  public static readonly string FIELD_KFBXTEXTURE_WRAP_V = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_WRAP_V_get();
  public static readonly string FIELD_KFBXTEXTURE_BLEND_MODE = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_BLEND_MODE_get();
  public static readonly string FIELD_KFBXTEXTURE_ALPHA = fbx_wrapperPINVOKE.FIELD_KFBXTEXTURE_ALPHA_get();
  public static readonly string FIELD_KFBXMATERIAL_MATERIAL = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_MATERIAL_get();
  public static readonly string FIELD_KFBXMATERIAL_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_VERSION_get();
  public static readonly string FIELD_KFBXMATERIAL_SHADING_MODEL = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_SHADING_MODEL_get();
  public static readonly string FIELD_KFBXMATERIAL_AMBIENT = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_AMBIENT_get();
  public static readonly string FIELD_KFBXMATERIAL_DIFFUSE = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_DIFFUSE_get();
  public static readonly string FIELD_KFBXMATERIAL_SPECULAR = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_SPECULAR_get();
  public static readonly string FIELD_KFBXMATERIAL_EMISSIVE = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_EMISSIVE_get();
  public static readonly string FIELD_KFBXMATERIAL_SHININESS = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_SHININESS_get();
  public static readonly string FIELD_KFBXMATERIAL_REFLECTIVITY = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_REFLECTIVITY_get();
  public static readonly string FIELD_KFBXMATERIAL_ALPHA = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_ALPHA_get();
  public static readonly string FIELD_KFBXMATERIAL_MULTI_LAYER = fbx_wrapperPINVOKE.FIELD_KFBXMATERIAL_MULTI_LAYER_get();
  public static readonly string FIELD_KFBXLINK_LINK = fbx_wrapperPINVOKE.FIELD_KFBXLINK_LINK_get();
  public static readonly string FIELD_KFBXLINK_MODE = fbx_wrapperPINVOKE.FIELD_KFBXLINK_MODE_get();
  public static readonly string FIELD_KFBXLINK_USERDATA = fbx_wrapperPINVOKE.FIELD_KFBXLINK_USERDATA_get();
  public static readonly string FIELD_KFBXLINK_INDEXES = fbx_wrapperPINVOKE.FIELD_KFBXLINK_INDEXES_get();
  public static readonly string FIELD_KFBXLINK_WEIGHTS = fbx_wrapperPINVOKE.FIELD_KFBXLINK_WEIGHTS_get();
  public static readonly string FIELD_KFBXLINK_TRANSFORM = fbx_wrapperPINVOKE.FIELD_KFBXLINK_TRANSFORM_get();
  public static readonly string FIELD_KFBXLINK_TRANSFORM_LINK = fbx_wrapperPINVOKE.FIELD_KFBXLINK_TRANSFORM_LINK_get();
  public static readonly string FIELD_KFBXLINK_ASSOCIATE_MODEL = fbx_wrapperPINVOKE.FIELD_KFBXLINK_ASSOCIATE_MODEL_get();
  public static readonly string FIELD_KFBXLINK_TRANSFORM_PARENT = fbx_wrapperPINVOKE.FIELD_KFBXLINK_TRANSFORM_PARENT_get();
  public static readonly string TOKEN_KFBXLINK_AVERAGE = fbx_wrapperPINVOKE.TOKEN_KFBXLINK_AVERAGE_get();
  public static readonly string TOKEN_KFBXLINK_ADDITIVE = fbx_wrapperPINVOKE.TOKEN_KFBXLINK_ADDITIVE_get();
  public static readonly string TOKEN_KFBXLINK_TOTAL1 = fbx_wrapperPINVOKE.TOKEN_KFBXLINK_TOTAL1_get();
  public static readonly string FIELD_KFBXDEFORMER_DEFORMER = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_DEFORMER_get();
  public static readonly string FIELD_KFBXDEFORMER_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_VERSION_get();
  public static readonly string FIELD_KFBXDEFORMER_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_TYPE_get();
  public static readonly string FIELD_KFBXDEFORMER_MULTI_LAYER = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_MULTI_LAYER_get();
  public static readonly string FIELD_KFBXDEFORMER_MODE = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_MODE_get();
  public static readonly string FIELD_KFBXDEFORMER_USERDATA = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_USERDATA_get();
  public static readonly string FIELD_KFBXDEFORMER_INDEXES = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_INDEXES_get();
  public static readonly string FIELD_KFBXDEFORMER_WEIGHTS = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_WEIGHTS_get();
  public static readonly string FIELD_KFBXDEFORMER_TRANSFORM = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_TRANSFORM_get();
  public static readonly string FIELD_KFBXDEFORMER_TRANSFORM_LINK = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_TRANSFORM_LINK_get();
  public static readonly string FIELD_KFBXDEFORMER_ASSOCIATE_MODEL = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_ASSOCIATE_MODEL_get();
  public static readonly string FIELD_KFBXDEFORMER_TRANSFORM_PARENT = fbx_wrapperPINVOKE.FIELD_KFBXDEFORMER_TRANSFORM_PARENT_get();
  public static readonly string TOKEN_KFBXDEFORMER_AVERAGE = fbx_wrapperPINVOKE.TOKEN_KFBXDEFORMER_AVERAGE_get();
  public static readonly string TOKEN_KFBXDEFORMER_ADDITIVE = fbx_wrapperPINVOKE.TOKEN_KFBXDEFORMER_ADDITIVE_get();
  public static readonly string TOKEN_KFBXDEFORMER_TOTAL1 = fbx_wrapperPINVOKE.TOKEN_KFBXDEFORMER_TOTAL1_get();
  public static readonly string FIELD_KFBXSKIN_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXSKIN_VERSION_get();
  public static readonly string FIELD_KFBXSKIN_DEFORM_ACCURACY = fbx_wrapperPINVOKE.FIELD_KFBXSKIN_DEFORM_ACCURACY_get();
  public static readonly string FIELD_KFBXSKIN_SKINNINGTYPE = fbx_wrapperPINVOKE.FIELD_KFBXSKIN_SKINNINGTYPE_get();
  public static readonly string TOKEN_KFBXSKIN_LINEAR = fbx_wrapperPINVOKE.TOKEN_KFBXSKIN_LINEAR_get();
  public static readonly string TOKEN_KFBXSKIN_DUALQUATERNION = fbx_wrapperPINVOKE.TOKEN_KFBXSKIN_DUALQUATERNION_get();
  public static readonly string TOKEN_KFBXSKIN_BLEND = fbx_wrapperPINVOKE.TOKEN_KFBXSKIN_BLEND_get();
  public static readonly string FIELD_KFBXSKIN_INDEXES = fbx_wrapperPINVOKE.FIELD_KFBXSKIN_INDEXES_get();
  public static readonly string FIELD_KFBXSKIN_BLENDWEIGHTS = fbx_wrapperPINVOKE.FIELD_KFBXSKIN_BLENDWEIGHTS_get();
  public static readonly string FIELD_KFBXCLUSTER_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_VERSION_get();
  public static readonly string FIELD_KFBXCLUSTER_MODE = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_MODE_get();
  public static readonly string FIELD_KFBXCLUSTER_USERDATA = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_USERDATA_get();
  public static readonly string FIELD_KFBXCLUSTER_INDEXES = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_INDEXES_get();
  public static readonly string FIELD_KFBXCLUSTER_WEIGHTS = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_WEIGHTS_get();
  public static readonly string FIELD_KFBXCLUSTER_TRANSFORM = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_TRANSFORM_get();
  public static readonly string FIELD_KFBXCLUSTER_TRANSFORM_LINK = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_TRANSFORM_LINK_get();
  public static readonly string FIELD_KFBXCLUSTER_ASSOCIATE_MODEL = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_ASSOCIATE_MODEL_get();
  public static readonly string FIELD_KFBXCLUSTER_TRANSFORM_PARENT = fbx_wrapperPINVOKE.FIELD_KFBXCLUSTER_TRANSFORM_PARENT_get();
  public static readonly string TOKEN_KFBXCLUSTER_AVERAGE = fbx_wrapperPINVOKE.TOKEN_KFBXCLUSTER_AVERAGE_get();
  public static readonly string TOKEN_KFBXCLUSTER_ADDITIVE = fbx_wrapperPINVOKE.TOKEN_KFBXCLUSTER_ADDITIVE_get();
  public static readonly string TOKEN_KFBXCLUSTER_TOTAL1 = fbx_wrapperPINVOKE.TOKEN_KFBXCLUSTER_TOTAL1_get();
  public static readonly string FIELD_KFBXBLENDSHAPE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXBLENDSHAPE_VERSION_get();
  public static readonly string FIELD_KFBXBLENDSHAPECHANNEL_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXBLENDSHAPECHANNEL_VERSION_get();
  public static readonly string FIELD_KFBXBLENDSHAPECHANNEL_DEFORMPERCENT = fbx_wrapperPINVOKE.FIELD_KFBXBLENDSHAPECHANNEL_DEFORMPERCENT_get();
  public static readonly string FIELD_KFBXBLENDSHAPECHANNEL_FULLWEIGHTS = fbx_wrapperPINVOKE.FIELD_KFBXBLENDSHAPECHANNEL_FULLWEIGHTS_get();
  public static readonly string FIELD_KFBXSHAPE_SHAPE = fbx_wrapperPINVOKE.FIELD_KFBXSHAPE_SHAPE_get();
  public static readonly string FIELD_KFBXSHAPE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXSHAPE_VERSION_get();
  public static readonly string FIELD_KFBXSHAPE_INDEXES = fbx_wrapperPINVOKE.FIELD_KFBXSHAPE_INDEXES_get();
  public static readonly string FIELD_KFBXSHAPE_VERTICES = fbx_wrapperPINVOKE.FIELD_KFBXSHAPE_VERTICES_get();
  public static readonly string FIELD_KFBXSHAPE_NORMALS = fbx_wrapperPINVOKE.FIELD_KFBXSHAPE_NORMALS_get();
  public static readonly string FILED_KFBXVERTEXCACHEDEFORMER_VERSION = fbx_wrapperPINVOKE.FILED_KFBXVERTEXCACHEDEFORMER_VERSION_get();
  public static readonly string FILED_KFBXVERTEXCACHEDEFORMER_CACHE_CHANNEL = fbx_wrapperPINVOKE.FILED_KFBXVERTEXCACHEDEFORMER_CACHE_CHANNEL_get();
  public static readonly string FIELD_KFBXCACHE_VERTEX_CACHE = fbx_wrapperPINVOKE.FIELD_KFBXCACHE_VERTEX_CACHE_get();
  public static readonly string FIELD_KFBXCACHE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXCACHE_VERSION_get();
  public static readonly string FIELD_KFBXCACHE_CACHE_PATH = fbx_wrapperPINVOKE.FIELD_KFBXCACHE_CACHE_PATH_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_BINDING_TABLE = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGTABLE_BINDING_TABLE_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGTABLE_VERSION_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_TARGET = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGTABLE_TARGET_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_ENTRY = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGTABLE_ENTRY_get();
  public static readonly string FIELD_KFBXIMPLEMENTATION_IMPLEMENTATION = fbx_wrapperPINVOKE.FIELD_KFBXIMPLEMENTATION_IMPLEMENTATION_get();
  public static readonly string FIELD_KFBXIMPLEMENTATION_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXIMPLEMENTATION_VERSION_get();
  public static readonly string FIELD_KFBXBINDINGOPERATOR_BINDING_OPERATOR = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGOPERATOR_BINDING_OPERATOR_get();
  public static readonly string FIELD_KFBXBINDINGOPERATOR_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGOPERATOR_VERSION_get();
  public static readonly string FIELD_KFBXBINDINGOPERATOR_ENTRY = fbx_wrapperPINVOKE.FIELD_KFBXBINDINGOPERATOR_ENTRY_get();
  public static readonly string FIELD_KFBXCOLLECTION_COLLECTION = fbx_wrapperPINVOKE.FIELD_KFBXCOLLECTION_COLLECTION_get();
  public static readonly string FIELD_KFBXCOLLECTION_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXCOLLECTION_VERSION_get();
  public static readonly string FIELD_KFBXCOLLECTIONEXCLUSIVE_COLLECTIONEXCLUSIVE = fbx_wrapperPINVOKE.FIELD_KFBXCOLLECTIONEXCLUSIVE_COLLECTIONEXCLUSIVE_get();
  public static readonly string FIELD_KFBXCOLLECTIONEXCLUSIVE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXCOLLECTIONEXCLUSIVE_VERSION_get();
  public static readonly string FIELD_KFBXSELECTIONSET_VERTICE_INDEXARRAY = fbx_wrapperPINVOKE.FIELD_KFBXSELECTIONSET_VERTICE_INDEXARRAY_get();
  public static readonly string FIELD_KFBXSELECTIONSET_EDGE_INDEXARRAY = fbx_wrapperPINVOKE.FIELD_KFBXSELECTIONSET_EDGE_INDEXARRAY_get();
  public static readonly string FIELD_KFBXSELECTIONSET_POLYGONVERTICES_INDEXARRAY = fbx_wrapperPINVOKE.FIELD_KFBXSELECTIONSET_POLYGONVERTICES_INDEXARRAY_get();
  public static readonly string FIELD_KFBXDISPLAYLAYER_DISPLAYLAYER = fbx_wrapperPINVOKE.FIELD_KFBXDISPLAYLAYER_DISPLAYLAYER_get();
  public static readonly string FIELD_KFBXDISPLAYLAYER_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXDISPLAYLAYER_VERSION_get();
  public static readonly string FIELD_KFBXDOCUMENT_DOCUMENT = fbx_wrapperPINVOKE.FIELD_KFBXDOCUMENT_DOCUMENT_get();
  public static readonly string FIELD_KFBXDOCUMENT_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXDOCUMENT_VERSION_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_LAYERED_TEXTURE = fbx_wrapperPINVOKE.FIELD_KFBXLAYEREDTEXTURE_LAYERED_TEXTURE_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXLAYEREDTEXTURE_VERSION_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_BLENDMODES = fbx_wrapperPINVOKE.FIELD_KFBXLAYEREDTEXTURE_BLENDMODES_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_ALPHAS = fbx_wrapperPINVOKE.FIELD_KFBXLAYEREDTEXTURE_ALPHAS_get();
  public static readonly string FIELD_KFBXGOBO_GOBOMANAGER = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_GOBOMANAGER_get();
  public static readonly string FIELD_KFBXGOBO_GOBO = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_GOBO_get();
  public static readonly string FIELD_KFBXGOBO_LIGHTGOBO = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_LIGHTGOBO_get();
  public static readonly string FIELD_KFBXGOBO_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_VERSION_get();
  public static readonly string FIELD_KFBXGOBO_GOBONAME = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_GOBONAME_get();
  public static readonly string FIELD_KFBXGOBO_GOBOPATH = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_GOBOPATH_get();
  public static readonly string FIELD_KFBXGOBO_DRAWCOMPONENT = fbx_wrapperPINVOKE.FIELD_KFBXGOBO_DRAWCOMPONENT_get();
  public static readonly string FIELD_PASSWORD = fbx_wrapperPINVOKE.FIELD_PASSWORD_get();
  public static readonly string FIELD_OLD_PASSWORD = fbx_wrapperPINVOKE.FIELD_OLD_PASSWORD_get();
  public static readonly string FIELD_XOR_STRING = fbx_wrapperPINVOKE.FIELD_XOR_STRING_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_UV = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_UV_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_SMOOTHING = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_SMOOTHING_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_VERTEX_CREASE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_VERTEX_CREASE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_EDGE_CREASE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_EDGE_CREASE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_HOLE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_HOLE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_USER_DATA = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_USER_DATA_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_VISIBILITY = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_VISIBILITY_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_NORMAL = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_NORMAL_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_BINORMAL = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_BINORMAL_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TANGENT = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_TANGENT_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_MATERIAL = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_MATERIAL_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TEXTURE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_TEXTURE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_COLOR = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_COLOR_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_POLYGON_GROUP = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_POLYGON_GROUP_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_VERSION_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_NAME = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_NAME_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TYPED_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_TYPED_INDEX_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_MAPPING_INFO_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_MAPPING_INFO_TYPE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_REFERENCE_INFO_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_REFERENCE_INFO_TYPE_get();
  public static readonly string FIELD_KFBXLAYER = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_get();
  public static readonly string FIELD_KFBXLAYER_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_VERSION_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_ELEMENT_TYPE_get();
  public static readonly string FIELD_KFBXLAYER_GEOMETRY_LAYER = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_GEOMETRY_LAYER_get();
  public static readonly string FIELD_KFBXLAYER_LAYER_TEXTURE_INFO = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_LAYER_TEXTURE_INFO_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_MODE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_TEXTURE_MODE_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_BLEND_MODE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_TEXTURE_BLEND_MODE_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_ID_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_TEXTURE_ID_COUNT_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_ID = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_TEXTURE_ID_get();
  public static readonly string FIELD_KFBXLAYER_UV_MODE = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_UV_MODE_get();
  public static readonly string FIELD_KFBXLAYER_UV_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_UV_COUNT_get();
  public static readonly string FIELD_KFBXLAYER_UV = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_UV_get();
  public static readonly string FIELD_KFBXLAYER_UV_INDEX = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_UV_INDEX_get();
  public static readonly string FIELD_KFBXLAYER_UV_ID_COUNT = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_UV_ID_COUNT_get();
  public static readonly string FIELD_KFBXLAYER_UV_ID = fbx_wrapperPINVOKE.FIELD_KFBXLAYER_UV_ID_get();
  public static readonly string FIELD_KFBXPOSE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXPOSE_VERSION_get();
  public static readonly string FIELD_KFBXPOSE_TYPE = fbx_wrapperPINVOKE.FIELD_KFBXPOSE_TYPE_get();
  public static readonly string FIELD_KFBXPOSE_POSE = fbx_wrapperPINVOKE.FIELD_KFBXPOSE_POSE_get();
  public static readonly string FIELD_KFBXPOSE_BIND_POSE = fbx_wrapperPINVOKE.FIELD_KFBXPOSE_BIND_POSE_get();
  public static readonly string FIELD_KFBXPOSE_REST_POSE = fbx_wrapperPINVOKE.FIELD_KFBXPOSE_REST_POSE_get();
  public static readonly string FIELD_SCENEINFO = fbx_wrapperPINVOKE.FIELD_SCENEINFO_get();
  public static readonly string FIELD_SCENEINFO_TYPE = fbx_wrapperPINVOKE.FIELD_SCENEINFO_TYPE_get();
  public static readonly string FIELD_SCENEINFO_VERSION = fbx_wrapperPINVOKE.FIELD_SCENEINFO_VERSION_get();
  public static readonly string FIELD_SCENEINFO_METADATA = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_get();
  public static readonly string FIELD_SCENEINFO_METADATA_VERSION = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_VERSION_get();
  public static readonly string FIELD_SCENEINFO_METADATA_TITLE = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_TITLE_get();
  public static readonly string FIELD_SCENEINFO_METADATA_SUBJECT = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_SUBJECT_get();
  public static readonly string FIELD_SCENEINFO_METADATA_AUTHOR = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_AUTHOR_get();
  public static readonly string FIELD_SCENEINFO_METADATA_KEYWORDS = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_KEYWORDS_get();
  public static readonly string FIELD_SCENEINFO_METADATA_REVISION = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_REVISION_get();
  public static readonly string FIELD_SCENEINFO_METADATA_COMMENT = fbx_wrapperPINVOKE.FIELD_SCENEINFO_METADATA_COMMENT_get();
  public static readonly string FIELD_GLOBAL_SETTINGS = fbx_wrapperPINVOKE.FIELD_GLOBAL_SETTINGS_get();
  public static readonly string FIELD_GLOBAL_SETTINGS_VERSION = fbx_wrapperPINVOKE.FIELD_GLOBAL_SETTINGS_VERSION_get();
  public static readonly string FIELD_KFBXREFERENCE_REFERENCE = fbx_wrapperPINVOKE.FIELD_KFBXREFERENCE_REFERENCE_get();
  public static readonly string FIELD_KFBXREFERENCE_VERSION = fbx_wrapperPINVOKE.FIELD_KFBXREFERENCE_VERSION_get();
  public static readonly string FIELD_CONSTRAINT = fbx_wrapperPINVOKE.FIELD_CONSTRAINT_get();
  public static readonly string FIELD_CONSTRAINT_VERSION = fbx_wrapperPINVOKE.FIELD_CONSTRAINT_VERSION_get();
  public static readonly string FIELD_CONSTRAINT_OFFSET = fbx_wrapperPINVOKE.FIELD_CONSTRAINT_OFFSET_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_CONSTRAINT = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_CONSTRAINT_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_POSITION = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_POSITION_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_ROTATION = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_ROTATION_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_SCALE = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_SCALE_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_PARENT = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_PARENT_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_SINGLECHAINIK = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_SINGLECHAINIK_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_AIM = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_AIM_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_CHARACTER = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_CHARACTER_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_CUSTOM = fbx_wrapperPINVOKE.TOKEN_KFBXCONSTRAINT_CUSTOM_get();
  public static readonly string FIELD_OBJECT_DESCRIPTION = fbx_wrapperPINVOKE.FIELD_OBJECT_DESCRIPTION_get();
  public static readonly string FIELD_OBJECT_DESCRIPTION_NAME = fbx_wrapperPINVOKE.FIELD_OBJECT_DESCRIPTION_NAME_get();
  public static readonly string FIELD_OBJECT_REFERENCES = fbx_wrapperPINVOKE.FIELD_OBJECT_REFERENCES_get();
  public static readonly string FIELD_OBJECT_REFERENCES_FILE_PATH_URL = fbx_wrapperPINVOKE.FIELD_OBJECT_REFERENCES_FILE_PATH_URL_get();
  public static readonly string FIELD_OBJECT_REFERENCES_REFERENCE = fbx_wrapperPINVOKE.FIELD_OBJECT_REFERENCES_REFERENCE_get();
  public static readonly string FIELD_OBJECT_DEFINITION = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_get();
  public static readonly string FIELD_OBJECT_PROPERTY_TEMPLATE = fbx_wrapperPINVOKE.FIELD_OBJECT_PROPERTY_TEMPLATE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_VERSION = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_VERSION_get();
  public static readonly string FIELD_OBJECT_DEFINITION_COUNT = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_COUNT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_REFERENCE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_REFERENCE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTAINER = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTAINER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MODEL = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MODEL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_NODE_ATTRIBUTE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_NODE_ATTRIBUTE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY_WEIGHTED_MAP = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY_WEIGHTED_MAP_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MARKETSET = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MARKETSET_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MATERIAL = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MATERIAL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION_EXCLUSIVE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION_EXCLUSIVE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DISPLAY_LAYER = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DISPLAY_LAYER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TEXTURE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TEXTURE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_THUMBNAIL = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_THUMBNAIL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_VIDEO = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_VIDEO_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DEFORMER = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DEFORMER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SUBDEFORMER = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SUBDEFORMER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SHAPE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SHAPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPECHANNEL = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPECHANNEL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONSTRAINT = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONSTRAINT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTROLSET_PLUG = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTROLSET_PLUG_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_POSE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_POSE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GENERIC_NODE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GENERIC_NODE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BOUNDARY = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BOUNDARY_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CACHE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CACHE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_IMPLEMENTATION = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_IMPLEMENTATION_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGTABLE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGTABLE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGOPERATOR = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGOPERATOR_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LAYERED_TEXTURE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LAYERED_TEXTURE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PROCEDURAL_TEXTURE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PROCEDURAL_TEXTURE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENEINFO = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENEINFO_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LIBRARY = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LIBRARY_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DOCUMENT = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DOCUMENT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_FOLDER = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_FOLDER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CLIP = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CLIP_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE_TRACK = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE_TRACK_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ENVIRONMENT = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ENVIRONMENT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_OBJECTMETADATA = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_OBJECTMETADATA_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PLUGIN_PARAMS = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PLUGIN_PARAMS_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_STACK = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_STACK_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_LAYER = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_LAYER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVENODE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVENODE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_EVALUATOR = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_EVALUATOR_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SELECTIONNODE = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SELECTIONNODE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_MESH = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_MESH_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SUBDIV = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SUBDIV_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_PATCH = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_PATCH_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURB = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURB_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_SURFACE = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_SURFACE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_CURVE = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_CURVE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_TRIM_NURB_SURFACE = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_TRIM_NURB_SURFACE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_BOUNDARY = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_BOUNDARY_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_LINE = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_LINE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SHAPE = fbx_wrapperPINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SHAPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GLOBAL_SETTINGS = fbx_wrapperPINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GLOBAL_SETTINGS_get();
  public static readonly string FIELD_OBJECT_PROPERTIES = fbx_wrapperPINVOKE.FIELD_OBJECT_PROPERTIES_get();
  public static readonly string FIELD_OBJECT_RELATIONS = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_MODEL = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_MODEL_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_MATERIAL = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_MATERIAL_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_TEXTURE = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_TEXTURE_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_VIDEO = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_VIDEO_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_CONSTRAINT = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_CONSTRAINT_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_DEFORMER = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_DEFORMER_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_POSE = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_POSE_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_SCENEINFO = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_SCENEINFO_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_CACHE = fbx_wrapperPINVOKE.FIELD_OBJECT_RELATIONS_TYPE_CACHE_get();
  public static readonly string FIELD_OBJECT_CONNECTIONS = fbx_wrapperPINVOKE.FIELD_OBJECT_CONNECTIONS_get();
  public static readonly string FIELD_TAKES = fbx_wrapperPINVOKE.FIELD_TAKES_get();
  public static readonly string FIELD_EMBEDDED_FILES = fbx_wrapperPINVOKE.FIELD_EMBEDDED_FILES_get();
  public static readonly string FIELD_EMBEDDED_FILE = fbx_wrapperPINVOKE.FIELD_EMBEDDED_FILE_get();
  public static readonly string FIELD_EMBEDDED_ORIGINAL_FILENAME = fbx_wrapperPINVOKE.FIELD_EMBEDDED_ORIGINAL_FILENAME_get();
  public static readonly string FIELD_EMBEDDED_FILENAME = fbx_wrapperPINVOKE.FIELD_EMBEDDED_FILENAME_get();
  public static readonly string FIELD_EMBEDDED_CONSUMERS = fbx_wrapperPINVOKE.FIELD_EMBEDDED_CONSUMERS_get();
  public static readonly string FIELD_EMBEDDED_CONSUMER = fbx_wrapperPINVOKE.FIELD_EMBEDDED_CONSUMER_get();
  public static readonly string FIELD_NODE_ATTRIBUTE_NAME = fbx_wrapperPINVOKE.FIELD_NODE_ATTRIBUTE_NAME_get();
  public static readonly string FIELD_NODE_ATTRIBUTE_REFTO = fbx_wrapperPINVOKE.FIELD_NODE_ATTRIBUTE_REFTO_get();
  public static readonly string FIELD_OLD_SECTION_VERSION5 = fbx_wrapperPINVOKE.FIELD_OLD_SECTION_VERSION5_get();
  public static readonly string FIELD_OLD_SECTION_HIERARCHYVIEW = fbx_wrapperPINVOKE.FIELD_OLD_SECTION_HIERARCHYVIEW_get();
  public static readonly string OBJECT_OLD_SECTION_VERSION5 = fbx_wrapperPINVOKE.OBJECT_OLD_SECTION_VERSION5_get();
  public static readonly string OBJECT_OLD_SECTION_HIERARCHYVIEW = fbx_wrapperPINVOKE.OBJECT_OLD_SECTION_HIERARCHYVIEW_get();
  public static readonly string FBXSDK_CAMERA_PERSPECTIVE = fbx_wrapperPINVOKE.FBXSDK_CAMERA_PERSPECTIVE_get();
  public static readonly string FBXSDK_CAMERA_TOP = fbx_wrapperPINVOKE.FBXSDK_CAMERA_TOP_get();
  public static readonly string FBXSDK_CAMERA_FRONT = fbx_wrapperPINVOKE.FBXSDK_CAMERA_FRONT_get();
  public static readonly string FBXSDK_CAMERA_BACK = fbx_wrapperPINVOKE.FBXSDK_CAMERA_BACK_get();
  public static readonly string FBXSDK_CAMERA_RIGHT = fbx_wrapperPINVOKE.FBXSDK_CAMERA_RIGHT_get();
  public static readonly string FBXSDK_CAMERA_LEFT = fbx_wrapperPINVOKE.FBXSDK_CAMERA_LEFT_get();
  public static readonly string FBXSDK_CAMERA_BOTTOM = fbx_wrapperPINVOKE.FBXSDK_CAMERA_BOTTOM_get();
  public static readonly string FBXSDK_CAMERA_SWITCHER = fbx_wrapperPINVOKE.FBXSDK_CAMERA_SWITCHER_get();
  public static readonly string FBXSDK_PLUGINS_REGISTRY_PATH = fbx_wrapperPINVOKE.FBXSDK_PLUGINS_REGISTRY_PATH_get();
  public static readonly string IMP_FBX_PRESET_EXT = fbx_wrapperPINVOKE.IMP_FBX_PRESET_EXT_get();
  public static readonly string EXP_FBX_PRESET_EXT = fbx_wrapperPINVOKE.EXP_FBX_PRESET_EXT_get();
  public static readonly string M_E_FILENAME = fbx_wrapperPINVOKE.M_E_FILENAME_get();
  public static readonly string ARCH_FILENAME = fbx_wrapperPINVOKE.ARCH_FILENAME_get();
  public static readonly string MOBU_FILENAME = fbx_wrapperPINVOKE.MOBU_FILENAME_get();
  public static readonly string USERDEFINED_FILENAME = fbx_wrapperPINVOKE.USERDEFINED_FILENAME_get();
  public static readonly string FN_LOCALIZATION_PREFIX = fbx_wrapperPINVOKE.FN_LOCALIZATION_PREFIX_get();
  public static readonly string FN_LOCALIZATION_EXT = fbx_wrapperPINVOKE.FN_LOCALIZATION_EXT_get();
  public static readonly string FN_LANGUAGE = fbx_wrapperPINVOKE.FN_LANGUAGE_get();
  public static readonly string IOSROOT = fbx_wrapperPINVOKE.IOSROOT_get();
  public static readonly string IOSN_EXPORT = fbx_wrapperPINVOKE.IOSN_EXPORT_get();
  public static readonly string IOSN_IMPORT = fbx_wrapperPINVOKE.IOSN_IMPORT_get();
  public static readonly string IOSN_PLUGIN_GRP = fbx_wrapperPINVOKE.IOSN_PLUGIN_GRP_get();
  public static readonly string IOSN_PLUGIN_UI_WIDTH = fbx_wrapperPINVOKE.IOSN_PLUGIN_UI_WIDTH_get();
  public static readonly string IOSN_PLUGIN_UI_HEIGHT = fbx_wrapperPINVOKE.IOSN_PLUGIN_UI_HEIGHT_get();
  public static readonly string IOSN_PLUGIN_VERSIONS_URL = fbx_wrapperPINVOKE.IOSN_PLUGIN_VERSIONS_URL_get();
  public static readonly string IOSN_PI_VERSION = fbx_wrapperPINVOKE.IOSN_PI_VERSION_get();
  public static readonly string IOSN_PRESET_SELECTED = fbx_wrapperPINVOKE.IOSN_PRESET_SELECTED_get();
  public static readonly string IOSN_PRESETS_GRP = fbx_wrapperPINVOKE.IOSN_PRESETS_GRP_get();
  public static readonly string IOSN_STATISTICS_GRP = fbx_wrapperPINVOKE.IOSN_STATISTICS_GRP_get();
  public static readonly string IOSN_UNITS_GRP = fbx_wrapperPINVOKE.IOSN_UNITS_GRP_get();
  public static readonly string IOSN_INCLUDE_GRP = fbx_wrapperPINVOKE.IOSN_INCLUDE_GRP_get();
  public static readonly string IOSN_ADV_OPT_GRP = fbx_wrapperPINVOKE.IOSN_ADV_OPT_GRP_get();
  public static readonly string IOSN_AXISCONV_GRP = fbx_wrapperPINVOKE.IOSN_AXISCONV_GRP_get();
  public static readonly string IOSN_CAMERA_GRP = fbx_wrapperPINVOKE.IOSN_CAMERA_GRP_get();
  public static readonly string IOSN_LIGHT_GRP = fbx_wrapperPINVOKE.IOSN_LIGHT_GRP_get();
  public static readonly string IOSN_EXTRA_GRP = fbx_wrapperPINVOKE.IOSN_EXTRA_GRP_get();
  public static readonly string IOSN_CONSTRAINTS_GRP = fbx_wrapperPINVOKE.IOSN_CONSTRAINTS_GRP_get();
  public static readonly string IOSN_INPUTCONNECTIONS_GRP = fbx_wrapperPINVOKE.IOSN_INPUTCONNECTIONS_GRP_get();
  public static readonly string IOSN_INFORMATION_GRP = fbx_wrapperPINVOKE.IOSN_INFORMATION_GRP_get();
  public static readonly string IOSN_UP_AXIS = fbx_wrapperPINVOKE.IOSN_UP_AXIS_get();
  public static readonly string IOSN_UP_AXIS_MAX = fbx_wrapperPINVOKE.IOSN_UP_AXIS_MAX_get();
  public static readonly string IOSN_ZUPROTATION_MAX = fbx_wrapperPINVOKE.IOSN_ZUPROTATION_MAX_get();
  public static readonly string IOSN_AXISCONVERSION = fbx_wrapperPINVOKE.IOSN_AXISCONVERSION_get();
  public static readonly string IOSN_AUTO_AXIS = fbx_wrapperPINVOKE.IOSN_AUTO_AXIS_get();
  public static readonly string IOSN_FILE_UP_AXIS = fbx_wrapperPINVOKE.IOSN_FILE_UP_AXIS_get();
  public static readonly string IOSN_PRESETS = fbx_wrapperPINVOKE.IOSN_PRESETS_get();
  public static readonly string IOSN_STATISTICS = fbx_wrapperPINVOKE.IOSN_STATISTICS_get();
  public static readonly string IOSN_UNITS_SCALE = fbx_wrapperPINVOKE.IOSN_UNITS_SCALE_get();
  public static readonly string IOSN_TOTAL_UNITS_SCALE_TB = fbx_wrapperPINVOKE.IOSN_TOTAL_UNITS_SCALE_TB_get();
  public static readonly string IOSN_SCALECONVERSION = fbx_wrapperPINVOKE.IOSN_SCALECONVERSION_get();
  public static readonly string IOSN_MASTERSCALE = fbx_wrapperPINVOKE.IOSN_MASTERSCALE_get();
  public static readonly string IOSN_DYN_SCALE_CONVERSION = fbx_wrapperPINVOKE.IOSN_DYN_SCALE_CONVERSION_get();
  public static readonly string IOSN_UNITSELECTOR = fbx_wrapperPINVOKE.IOSN_UNITSELECTOR_get();
  public static readonly string IOSN_ANIMATION = fbx_wrapperPINVOKE.IOSN_ANIMATION_get();
  public static readonly string IOSN_GEOMETRY = fbx_wrapperPINVOKE.IOSN_GEOMETRY_get();
  public static readonly string IOSN_DEFORMATION = fbx_wrapperPINVOKE.IOSN_DEFORMATION_get();
  public static readonly string IOSN_MARKERS = fbx_wrapperPINVOKE.IOSN_MARKERS_get();
  public static readonly string IOSN_CHARACTER = fbx_wrapperPINVOKE.IOSN_CHARACTER_get();
  public static readonly string IOSN_CHARACTER_AS_MAYA_HIK = fbx_wrapperPINVOKE.IOSN_CHARACTER_AS_MAYA_HIK_get();
  public static readonly string IOSN_CHARACTER_TYPE = fbx_wrapperPINVOKE.IOSN_CHARACTER_TYPE_get();
  public static readonly string IOSN_CHARACTER_TYPE_DESC = fbx_wrapperPINVOKE.IOSN_CHARACTER_TYPE_DESC_get();
  public static readonly string IOSN_SETLOCKEDATTRIB = fbx_wrapperPINVOKE.IOSN_SETLOCKEDATTRIB_get();
  public static readonly string IOSN_TRIANGULATE = fbx_wrapperPINVOKE.IOSN_TRIANGULATE_get();
  public static readonly string IOSN_MRCUSTOMATTRIBUTES = fbx_wrapperPINVOKE.IOSN_MRCUSTOMATTRIBUTES_get();
  public static readonly string IOSN_MESHPRIMITIVE = fbx_wrapperPINVOKE.IOSN_MESHPRIMITIVE_get();
  public static readonly string IOSN_MESHTRIANGLE = fbx_wrapperPINVOKE.IOSN_MESHTRIANGLE_get();
  public static readonly string IOSN_MESHPOLY = fbx_wrapperPINVOKE.IOSN_MESHPOLY_get();
  public static readonly string IOSN_NURB = fbx_wrapperPINVOKE.IOSN_NURB_get();
  public static readonly string IOSN_PATCH = fbx_wrapperPINVOKE.IOSN_PATCH_get();
  public static readonly string IOSN_BIP2FBX = fbx_wrapperPINVOKE.IOSN_BIP2FBX_get();
  public static readonly string IOSN_ASCIIFBX = fbx_wrapperPINVOKE.IOSN_ASCIIFBX_get();
  public static readonly string IOSN_TAKE = fbx_wrapperPINVOKE.IOSN_TAKE_get();
  public static readonly string IOSN_GEOMETRYMESHPRIMITIVEAS = fbx_wrapperPINVOKE.IOSN_GEOMETRYMESHPRIMITIVEAS_get();
  public static readonly string IOSN_GEOMETRYMESHTRIANGLEAS = fbx_wrapperPINVOKE.IOSN_GEOMETRYMESHTRIANGLEAS_get();
  public static readonly string IOSN_GEOMETRYMESHPOLYAS = fbx_wrapperPINVOKE.IOSN_GEOMETRYMESHPOLYAS_get();
  public static readonly string IOSN_GEOMETRYNURBSAS = fbx_wrapperPINVOKE.IOSN_GEOMETRYNURBSAS_get();
  public static readonly string IOSN_GEOMETRYNURBSSURFACEAS = fbx_wrapperPINVOKE.IOSN_GEOMETRYNURBSSURFACEAS_get();
  public static readonly string IOSN_GEOMETRYPATCHAS = fbx_wrapperPINVOKE.IOSN_GEOMETRYPATCHAS_get();
  public static readonly string IOSN_TANGENTS_BINORMALS = fbx_wrapperPINVOKE.IOSN_TANGENTS_BINORMALS_get();
  public static readonly string IOSN_SMOOTH_MESH = fbx_wrapperPINVOKE.IOSN_SMOOTH_MESH_get();
  public static readonly string IOSN_SELECTION_SET = fbx_wrapperPINVOKE.IOSN_SELECTION_SET_get();
  public static readonly string IOSN_ANIMATIONONLY = fbx_wrapperPINVOKE.IOSN_ANIMATIONONLY_get();
  public static readonly string IOSN_SELECTIONONLY = fbx_wrapperPINVOKE.IOSN_SELECTIONONLY_get();
  public static readonly string IOSN_BONE = fbx_wrapperPINVOKE.IOSN_BONE_get();
  public static readonly string IOSN_BONEWIDTHHEIGHTLOCK = fbx_wrapperPINVOKE.IOSN_BONEWIDTHHEIGHTLOCK_get();
  public static readonly string IOSN_BONEASDUMMY = fbx_wrapperPINVOKE.IOSN_BONEASDUMMY_get();
  public static readonly string IOSN_BONEMAX4BONEWIDTH = fbx_wrapperPINVOKE.IOSN_BONEMAX4BONEWIDTH_get();
  public static readonly string IOSN_BONEMAX4BONEHEIGHT = fbx_wrapperPINVOKE.IOSN_BONEMAX4BONEHEIGHT_get();
  public static readonly string IOSN_BONEMAX4BONETAPER = fbx_wrapperPINVOKE.IOSN_BONEMAX4BONETAPER_get();
  public static readonly string IOSN_REMOVE_SINGLE_KEY = fbx_wrapperPINVOKE.IOSN_REMOVE_SINGLE_KEY_get();
  public static readonly string IOSN_CURVE_FILTER = fbx_wrapperPINVOKE.IOSN_CURVE_FILTER_get();
  public static readonly string IOSN_CONSTRAINT = fbx_wrapperPINVOKE.IOSN_CONSTRAINT_get();
  public static readonly string IOSN_UI = fbx_wrapperPINVOKE.IOSN_UI_get();
  public static readonly string IOSN_SHOW_UI_MODE = fbx_wrapperPINVOKE.IOSN_SHOW_UI_MODE_get();
  public static readonly string IOSN_SHOW_WARNINGS_MANAGER = fbx_wrapperPINVOKE.IOSN_SHOW_WARNINGS_MANAGER_get();
  public static readonly string IOSN_GENERATE_LOG_DATA = fbx_wrapperPINVOKE.IOSN_GENERATE_LOG_DATA_get();
  public static readonly string IOSN_PERF_GRP = fbx_wrapperPINVOKE.IOSN_PERF_GRP_get();
  public static readonly string IOSN_REMOVEBADPOLYSFROMMESH = fbx_wrapperPINVOKE.IOSN_REMOVEBADPOLYSFROMMESH_get();
  public static readonly string IOSN_META_DATA = fbx_wrapperPINVOKE.IOSN_META_DATA_get();
  public static readonly string IOSN_CACHE_GRP = fbx_wrapperPINVOKE.IOSN_CACHE_GRP_get();
  public static readonly string IOSN_CACHE_SIZE = fbx_wrapperPINVOKE.IOSN_CACHE_SIZE_get();
  public static readonly string IOSN_MERGE_MODE = fbx_wrapperPINVOKE.IOSN_MERGE_MODE_get();
  public static readonly string IOSN_MERGE_MODE_DESCRIPTION = fbx_wrapperPINVOKE.IOSN_MERGE_MODE_DESCRIPTION_get();
  public static readonly string IOSN_ONE_CLICK_MERGE = fbx_wrapperPINVOKE.IOSN_ONE_CLICK_MERGE_get();
  public static readonly string IOSN_ONE_CLICK_MERGE_TEXTURE = fbx_wrapperPINVOKE.IOSN_ONE_CLICK_MERGE_TEXTURE_get();
  public static readonly string IOSN_SAMPLINGPANEL = fbx_wrapperPINVOKE.IOSN_SAMPLINGPANEL_get();
  public static readonly string IOSN_FILE_FORMAT = fbx_wrapperPINVOKE.IOSN_FILE_FORMAT_get();
  public static readonly string IOSN_FBX = fbx_wrapperPINVOKE.IOSN_FBX_get();
  public static readonly string IOSN_DXF = fbx_wrapperPINVOKE.IOSN_DXF_get();
  public static readonly string IOSN_OBJ = fbx_wrapperPINVOKE.IOSN_OBJ_get();
  public static readonly string IOSN_3DS = fbx_wrapperPINVOKE.IOSN_3DS_get();
  public static readonly string IOSN_COLLADA = fbx_wrapperPINVOKE.IOSN_COLLADA_get();
  public static readonly string IOSN_MOTION_BASE = fbx_wrapperPINVOKE.IOSN_MOTION_BASE_get();
  public static readonly string IOSN_BIOVISION_BVH = fbx_wrapperPINVOKE.IOSN_BIOVISION_BVH_get();
  public static readonly string IOSN_MOTIONANALYSIS_HTR = fbx_wrapperPINVOKE.IOSN_MOTIONANALYSIS_HTR_get();
  public static readonly string IOSN_MOTIONANALYSIS_TRC = fbx_wrapperPINVOKE.IOSN_MOTIONANALYSIS_TRC_get();
  public static readonly string IOSN_ACCLAIM_ASF = fbx_wrapperPINVOKE.IOSN_ACCLAIM_ASF_get();
  public static readonly string IOSN_ACCLAIM_AMC = fbx_wrapperPINVOKE.IOSN_ACCLAIM_AMC_get();
  public static readonly string IOSN_VICON_C3D = fbx_wrapperPINVOKE.IOSN_VICON_C3D_get();
  public static readonly string IOSN_SKINS = fbx_wrapperPINVOKE.IOSN_SKINS_get();
  public static readonly string IOSN_POINTCACHE = fbx_wrapperPINVOKE.IOSN_POINTCACHE_get();
  public static readonly string IOSN_QUATERNION = fbx_wrapperPINVOKE.IOSN_QUATERNION_get();
  public static readonly string IOSN_NAMETAKE = fbx_wrapperPINVOKE.IOSN_NAMETAKE_get();
  public static readonly string IOSN_SHAPE = fbx_wrapperPINVOKE.IOSN_SHAPE_get();
  public static readonly string IOSN_LIGHT = fbx_wrapperPINVOKE.IOSN_LIGHT_get();
  public static readonly string IOSN_LIGHTATTENUATION = fbx_wrapperPINVOKE.IOSN_LIGHTATTENUATION_get();
  public static readonly string IOSN_CAMERA = fbx_wrapperPINVOKE.IOSN_CAMERA_get();
  public static readonly string IOSN_VIEW_CUBE = fbx_wrapperPINVOKE.IOSN_VIEW_CUBE_get();
  public static readonly string IOSN_BINDPOSE = fbx_wrapperPINVOKE.IOSN_BINDPOSE_get();
  public static readonly string IOSN_EMBEDTEXTURE_GRP = fbx_wrapperPINVOKE.IOSN_EMBEDTEXTURE_GRP_get();
  public static readonly string IOSN_EMBEDTEXTURE = fbx_wrapperPINVOKE.IOSN_EMBEDTEXTURE_get();
  public static readonly string IOSN_EMBEDDED_FOLDER = fbx_wrapperPINVOKE.IOSN_EMBEDDED_FOLDER_get();
  public static readonly string IOSN_CONVERTTOTIFF = fbx_wrapperPINVOKE.IOSN_CONVERTTOTIFF_get();
  public static readonly string IOSN_UNLOCK_NORMALS = fbx_wrapperPINVOKE.IOSN_UNLOCK_NORMALS_get();
  public static readonly string IOSN_CREASE = fbx_wrapperPINVOKE.IOSN_CREASE_get();
  public static readonly string IOSN_FINESTSUBDIVLEVEL = fbx_wrapperPINVOKE.IOSN_FINESTSUBDIVLEVEL_get();
  public static readonly string IOSN_BAKEANIMATIONLAYERS = fbx_wrapperPINVOKE.IOSN_BAKEANIMATIONLAYERS_get();
  public static readonly string IOSN_BAKECOMPLEXANIMATION = fbx_wrapperPINVOKE.IOSN_BAKECOMPLEXANIMATION_get();
  public static readonly string IOSN_BAKEFRAMESTART = fbx_wrapperPINVOKE.IOSN_BAKEFRAMESTART_get();
  public static readonly string IOSN_BAKEFRAMEEND = fbx_wrapperPINVOKE.IOSN_BAKEFRAMEEND_get();
  public static readonly string IOSN_BAKEFRAMESTEP = fbx_wrapperPINVOKE.IOSN_BAKEFRAMESTEP_get();
  public static readonly string IOSN_BAKEFRAMESTARTNORESET = fbx_wrapperPINVOKE.IOSN_BAKEFRAMESTARTNORESET_get();
  public static readonly string IOSN_BAKEFRAMEENDNORESET = fbx_wrapperPINVOKE.IOSN_BAKEFRAMEENDNORESET_get();
  public static readonly string IOSN_BAKEFRAMESTEPNORESET = fbx_wrapperPINVOKE.IOSN_BAKEFRAMESTEPNORESET_get();
  public static readonly string IOSN_USEMATRIXFROMPOSE = fbx_wrapperPINVOKE.IOSN_USEMATRIXFROMPOSE_get();
  public static readonly string IOSN_NULLSTOPIVOT = fbx_wrapperPINVOKE.IOSN_NULLSTOPIVOT_get();
  public static readonly string IOSN_PIVOTTONULLS = fbx_wrapperPINVOKE.IOSN_PIVOTTONULLS_get();
  public static readonly string IOSN_GEOMNORMALPERPOLY = fbx_wrapperPINVOKE.IOSN_GEOMNORMALPERPOLY_get();
  public static readonly string IOSN_MAXBONEASBONE = fbx_wrapperPINVOKE.IOSN_MAXBONEASBONE_get();
  public static readonly string IOSN_MAXNURBSSTEP = fbx_wrapperPINVOKE.IOSN_MAXNURBSSTEP_get();
  public static readonly string IOSN_PROTECTDRIVENKEYS = fbx_wrapperPINVOKE.IOSN_PROTECTDRIVENKEYS_get();
  public static readonly string IOSN_DEFORMNULLSASJOINTS = fbx_wrapperPINVOKE.IOSN_DEFORMNULLSASJOINTS_get();
  public static readonly string IOSN_ENVIRONMENT = fbx_wrapperPINVOKE.IOSN_ENVIRONMENT_get();
  public static readonly string IOSN_SAMPLINGRATESELECTOR = fbx_wrapperPINVOKE.IOSN_SAMPLINGRATESELECTOR_get();
  public static readonly string IOSN_SAMPLINGRATE = fbx_wrapperPINVOKE.IOSN_SAMPLINGRATE_get();
  public static readonly string IOSN_APPLYCSTKEYRED = fbx_wrapperPINVOKE.IOSN_APPLYCSTKEYRED_get();
  public static readonly string IOSN_CSTKEYREDTPREC = fbx_wrapperPINVOKE.IOSN_CSTKEYREDTPREC_get();
  public static readonly string IOSN_CSTKEYREDRPREC = fbx_wrapperPINVOKE.IOSN_CSTKEYREDRPREC_get();
  public static readonly string IOSN_CSTKEYREDSPREC = fbx_wrapperPINVOKE.IOSN_CSTKEYREDSPREC_get();
  public static readonly string IOSN_CSTKEYREDOPREC = fbx_wrapperPINVOKE.IOSN_CSTKEYREDOPREC_get();
  public static readonly string IOSN_APPLYKEYREDUCE = fbx_wrapperPINVOKE.IOSN_APPLYKEYREDUCE_get();
  public static readonly string IOSN_KEYREDUCEPREC = fbx_wrapperPINVOKE.IOSN_KEYREDUCEPREC_get();
  public static readonly string IOSN_APPLYKEYSONFRM = fbx_wrapperPINVOKE.IOSN_APPLYKEYSONFRM_get();
  public static readonly string IOSN_APPLYKEYSYNC = fbx_wrapperPINVOKE.IOSN_APPLYKEYSYNC_get();
  public static readonly string IOSN_APPLYUNROLL = fbx_wrapperPINVOKE.IOSN_APPLYUNROLL_get();
  public static readonly string IOSN_UNROLLPREC = fbx_wrapperPINVOKE.IOSN_UNROLLPREC_get();
  public static readonly string IOSN_UNROLLPATH = fbx_wrapperPINVOKE.IOSN_UNROLLPATH_get();
  public static readonly string IOSN_UNROLLFORCEAUTO = fbx_wrapperPINVOKE.IOSN_UNROLLFORCEAUTO_get();
  public static readonly string IOSN_AUTOTANGENTSONLY = fbx_wrapperPINVOKE.IOSN_AUTOTANGENTSONLY_get();
  public static readonly string IOSN_SMOOTHING_GROUPS = fbx_wrapperPINVOKE.IOSN_SMOOTHING_GROUPS_get();
  public static readonly string IOSN_HARDEDGES = fbx_wrapperPINVOKE.IOSN_HARDEDGES_get();
  public static readonly string IOSN_EXP_HARDEDGES = fbx_wrapperPINVOKE.IOSN_EXP_HARDEDGES_get();
  public static readonly string IOSN_BLINDDATA = fbx_wrapperPINVOKE.IOSN_BLINDDATA_get();
  public static readonly string IOSN_INPUTCONNECTIONS = fbx_wrapperPINVOKE.IOSN_INPUTCONNECTIONS_get();
  public static readonly string IOSN_INSTANCES = fbx_wrapperPINVOKE.IOSN_INSTANCES_get();
  public static readonly string IOSN_REFERENCES = fbx_wrapperPINVOKE.IOSN_REFERENCES_get();
  public static readonly string IOSN_CONTAINEROBJECTS = fbx_wrapperPINVOKE.IOSN_CONTAINEROBJECTS_get();
  public static readonly string IOSN_BYPASSRRSINHERITANCE = fbx_wrapperPINVOKE.IOSN_BYPASSRRSINHERITANCE_get();
  public static readonly string IOSN_FORCEWEIGHTNORMALIZE = fbx_wrapperPINVOKE.IOSN_FORCEWEIGHTNORMALIZE_get();
  public static readonly string IOSN_SHAPEANIMATION = fbx_wrapperPINVOKE.IOSN_SHAPEANIMATION_get();
  public static readonly string IOSN_SMOOTHKEYASUSER = fbx_wrapperPINVOKE.IOSN_SMOOTHKEYASUSER_get();
  public static readonly string IOSN_SCALEFACTOR = fbx_wrapperPINVOKE.IOSN_SCALEFACTOR_get();
  public static readonly string IOSN_AXISCONVERSIONMETHOD = fbx_wrapperPINVOKE.IOSN_AXISCONVERSIONMETHOD_get();
  public static readonly string IOSN_UPAXIS = fbx_wrapperPINVOKE.IOSN_UPAXIS_get();
  public static readonly string IOSN_SELECTIONSETNAMEASPOINTCACHE = fbx_wrapperPINVOKE.IOSN_SELECTIONSETNAMEASPOINTCACHE_get();
  public static readonly string IOSN_KEEPFRAMERATE = fbx_wrapperPINVOKE.IOSN_KEEPFRAMERATE_get();
  public static readonly string IOSN_ATTENUATIONASINTENSITYCURVE = fbx_wrapperPINVOKE.IOSN_ATTENUATIONASINTENSITYCURVE_get();
  public static readonly string IOSN_RESAMPLE_ANIMATION_CURVES = fbx_wrapperPINVOKE.IOSN_RESAMPLE_ANIMATION_CURVES_get();
  public static readonly string IOSN_TIMELINE = fbx_wrapperPINVOKE.IOSN_TIMELINE_get();
  public static readonly string IOSN_TIMELINE_SPAN = fbx_wrapperPINVOKE.IOSN_TIMELINE_SPAN_get();
  public static readonly string IOSN_BUTTON_WEB_UPDATE = fbx_wrapperPINVOKE.IOSN_BUTTON_WEB_UPDATE_get();
  public static readonly string IOSN_BUTTON_EDIT = fbx_wrapperPINVOKE.IOSN_BUTTON_EDIT_get();
  public static readonly string IOSN_BUTTON_OK = fbx_wrapperPINVOKE.IOSN_BUTTON_OK_get();
  public static readonly string IOSN_BUTTON_CANCEL = fbx_wrapperPINVOKE.IOSN_BUTTON_CANCEL_get();
  public static readonly string IOSN_MENU_EDIT_PRESET = fbx_wrapperPINVOKE.IOSN_MENU_EDIT_PRESET_get();
  public static readonly string IOSN_MENU_SAVE_PRESET = fbx_wrapperPINVOKE.IOSN_MENU_SAVE_PRESET_get();
  public static readonly string IOSN_UIL = fbx_wrapperPINVOKE.IOSN_UIL_get();
  public static readonly string IOSN_PLUGIN_PRODUCT_FAMILY = fbx_wrapperPINVOKE.IOSN_PLUGIN_PRODUCT_FAMILY_get();
  public static readonly string IOSN_PLUGIN_UI_XPOS = fbx_wrapperPINVOKE.IOSN_PLUGIN_UI_XPOS_get();
  public static readonly string IOSN_PLUGIN_UI_YPOS = fbx_wrapperPINVOKE.IOSN_PLUGIN_UI_YPOS_get();
  public static readonly string IOSN_FBX_EXTENTIONS_SDK = fbx_wrapperPINVOKE.IOSN_FBX_EXTENTIONS_SDK_get();
  public static readonly string IOSN_FBX_EXTENTIONS_SDK_WARNING = fbx_wrapperPINVOKE.IOSN_FBX_EXTENTIONS_SDK_WARNING_get();
  public static readonly string IOSN_COLLADA_FRAME_COUNT = fbx_wrapperPINVOKE.IOSN_COLLADA_FRAME_COUNT_get();
  public static readonly string IOSN_COLLADA_START = fbx_wrapperPINVOKE.IOSN_COLLADA_START_get();
  public static readonly string IOSN_COLLADA_TAKE_NAME = fbx_wrapperPINVOKE.IOSN_COLLADA_TAKE_NAME_get();
  public static readonly string IOSN_COLLADA_TRIANGULATE = fbx_wrapperPINVOKE.IOSN_COLLADA_TRIANGULATE_get();
  public static readonly string IOSN_COLLADA_SINGLEMATRIX = fbx_wrapperPINVOKE.IOSN_COLLADA_SINGLEMATRIX_get();
  public static readonly string IOSN_COLLADA_FRAME_RATE = fbx_wrapperPINVOKE.IOSN_COLLADA_FRAME_RATE_get();
  public static readonly string IOSN_DXF_TRIANGULATE = fbx_wrapperPINVOKE.IOSN_DXF_TRIANGULATE_get();
  public static readonly string IOSN_DXF_DEFORMATION = fbx_wrapperPINVOKE.IOSN_DXF_DEFORMATION_get();
  public static readonly string IOSN_DXF_WELD_VERTICES = fbx_wrapperPINVOKE.IOSN_DXF_WELD_VERTICES_get();
  public static readonly string IOSN_DXF_OBJECT_DERIVATION = fbx_wrapperPINVOKE.IOSN_DXF_OBJECT_DERIVATION_get();
  public static readonly string IOSN_DXF_REFERENCE_NODE = fbx_wrapperPINVOKE.IOSN_DXF_REFERENCE_NODE_get();
  public static readonly string IOSN_OBJ_REFERENCE_NODE = fbx_wrapperPINVOKE.IOSN_OBJ_REFERENCE_NODE_get();
  public static readonly string IOSN_OBJ_TRIANGULATE = fbx_wrapperPINVOKE.IOSN_OBJ_TRIANGULATE_get();
  public static readonly string IOSN_OBJ_DEFORMATION = fbx_wrapperPINVOKE.IOSN_OBJ_DEFORMATION_get();
  public static readonly string IOSN_3DS_REFERENCENODE = fbx_wrapperPINVOKE.IOSN_3DS_REFERENCENODE_get();
  public static readonly string IOSN_3DS_TEXTURE = fbx_wrapperPINVOKE.IOSN_3DS_TEXTURE_get();
  public static readonly string IOSN_3DS_MATERIAL = fbx_wrapperPINVOKE.IOSN_3DS_MATERIAL_get();
  public static readonly string IOSN_3DS_ANIMATION = fbx_wrapperPINVOKE.IOSN_3DS_ANIMATION_get();
  public static readonly string IOSN_3DS_MESH = fbx_wrapperPINVOKE.IOSN_3DS_MESH_get();
  public static readonly string IOSN_3DS_LIGHT = fbx_wrapperPINVOKE.IOSN_3DS_LIGHT_get();
  public static readonly string IOSN_3DS_CAMERA = fbx_wrapperPINVOKE.IOSN_3DS_CAMERA_get();
  public static readonly string IOSN_3DS_AMBIENT_LIGHT = fbx_wrapperPINVOKE.IOSN_3DS_AMBIENT_LIGHT_get();
  public static readonly string IOSN_3DS_RESCALING = fbx_wrapperPINVOKE.IOSN_3DS_RESCALING_get();
  public static readonly string IOSN_3DS_FILTER = fbx_wrapperPINVOKE.IOSN_3DS_FILTER_get();
  public static readonly string IOSN_3DS_SMOOTHGROUP = fbx_wrapperPINVOKE.IOSN_3DS_SMOOTHGROUP_get();
  public static readonly string IOSN_3DS_TAKE_NAME = fbx_wrapperPINVOKE.IOSN_3DS_TAKE_NAME_get();
  public static readonly string IOSN_3DS_TEXUVBYPOLY = fbx_wrapperPINVOKE.IOSN_3DS_TEXUVBYPOLY_get();
  public static readonly string IOSN_ZOOMEXTENTS = fbx_wrapperPINVOKE.IOSN_ZOOMEXTENTS_get();
  public static readonly string IOSN_GLOBAL_AMBIENT_COLOR = fbx_wrapperPINVOKE.IOSN_GLOBAL_AMBIENT_COLOR_get();
  public static readonly string IOSN_EDGE_ORIENTATION = fbx_wrapperPINVOKE.IOSN_EDGE_ORIENTATION_get();
  public static readonly string IOSN_VERSIONS_UI_ALIAS = fbx_wrapperPINVOKE.IOSN_VERSIONS_UI_ALIAS_get();
  public static readonly string IOSN_VERSIONS_COMP_DESCRIPTIONS = fbx_wrapperPINVOKE.IOSN_VERSIONS_COMP_DESCRIPTIONS_get();
  public static readonly string IOSN_MODEL_COUNT = fbx_wrapperPINVOKE.IOSN_MODEL_COUNT_get();
  public static readonly string IOSN_DEVICE_COUNT = fbx_wrapperPINVOKE.IOSN_DEVICE_COUNT_get();
  public static readonly string IOSN_CHARACTER_COUNT = fbx_wrapperPINVOKE.IOSN_CHARACTER_COUNT_get();
  public static readonly string IOSN_ACTOR_COUNT = fbx_wrapperPINVOKE.IOSN_ACTOR_COUNT_get();
  public static readonly string IOSN_CONSTRAINT_COUNT = fbx_wrapperPINVOKE.IOSN_CONSTRAINT_COUNT_get();
  public static readonly string IOSN_MEDIA_COUNT = fbx_wrapperPINVOKE.IOSN_MEDIA_COUNT_get();
  public static readonly string IOSN_TEMPLATE = fbx_wrapperPINVOKE.IOSN_TEMPLATE_get();
  public static readonly string IOSN_PIVOT = fbx_wrapperPINVOKE.IOSN_PIVOT_get();
  public static readonly string IOSN_GLOBAL_SETTINGS = fbx_wrapperPINVOKE.IOSN_GLOBAL_SETTINGS_get();
  public static readonly string IOSN_MERGE_LAYER_AND_TIMEWARP = fbx_wrapperPINVOKE.IOSN_MERGE_LAYER_AND_TIMEWARP_get();
  public static readonly string IOSN_GOBO = fbx_wrapperPINVOKE.IOSN_GOBO_get();
  public static readonly string IOSN_LINK = fbx_wrapperPINVOKE.IOSN_LINK_get();
  public static readonly string IOSN_MATERIAL = fbx_wrapperPINVOKE.IOSN_MATERIAL_get();
  public static readonly string IOSN_TEXTURE = fbx_wrapperPINVOKE.IOSN_TEXTURE_get();
  public static readonly string IOSN_MODEL = fbx_wrapperPINVOKE.IOSN_MODEL_get();
  public static readonly string IOSN_EMBEDDED = fbx_wrapperPINVOKE.IOSN_EMBEDDED_get();
  public static readonly string IOSN_PASSWORD = fbx_wrapperPINVOKE.IOSN_PASSWORD_get();
  public static readonly string IOSN_PASSWORD_ENABLE = fbx_wrapperPINVOKE.IOSN_PASSWORD_ENABLE_get();
  public static readonly string IOSN_CURRENT_TAKE_NAME = fbx_wrapperPINVOKE.IOSN_CURRENT_TAKE_NAME_get();
  public static readonly string IOSN_COLLAPSE_EXTERNALS = fbx_wrapperPINVOKE.IOSN_COLLAPSE_EXTERNALS_get();
  public static readonly string IOSN_COMPRESS_ARRAYS = fbx_wrapperPINVOKE.IOSN_COMPRESS_ARRAYS_get();
  public static readonly string IOSN_COMPRESS_LEVEL = fbx_wrapperPINVOKE.IOSN_COMPRESS_LEVEL_get();
  public static readonly string IOSN_COMPRESS_MINSIZE = fbx_wrapperPINVOKE.IOSN_COMPRESS_MINSIZE_get();
  public static readonly string IOSN_EMBEDDED_PROPERTIES_SKIP = fbx_wrapperPINVOKE.IOSN_EMBEDDED_PROPERTIES_SKIP_get();
  public static readonly string IOSN_EXPORT_FILE_VERSION = fbx_wrapperPINVOKE.IOSN_EXPORT_FILE_VERSION_get();
  public static readonly string IOSN_SHOW_UI_WARNING = fbx_wrapperPINVOKE.IOSN_SHOW_UI_WARNING_get();
  public static readonly string IOSN_ADD_MATERIAL_TO_EDIT = fbx_wrapperPINVOKE.IOSN_ADD_MATERIAL_TO_EDIT_get();
  public static readonly string IOSN_ENABLE_TEX_DISPLAY = fbx_wrapperPINVOKE.IOSN_ENABLE_TEX_DISPLAY_get();
  public static readonly string IOSN_PREFERED_ENVELOPPE_SYSTEM = fbx_wrapperPINVOKE.IOSN_PREFERED_ENVELOPPE_SYSTEM_get();
  public static readonly string IOSN_FIRST_TIME_RUN_NOTICE = fbx_wrapperPINVOKE.IOSN_FIRST_TIME_RUN_NOTICE_get();
  public static readonly string IOSN_EXTRACT_EMBEDDED_DATA = fbx_wrapperPINVOKE.IOSN_EXTRACT_EMBEDDED_DATA_get();
  public static readonly string IOSN_USETMPFILEPERIPHERAL = fbx_wrapperPINVOKE.IOSN_USETMPFILEPERIPHERAL_get();
  public static readonly string IOSN_CONSTRUCTIONHISTORY = fbx_wrapperPINVOKE.IOSN_CONSTRUCTIONHISTORY_get();
  public static readonly string IMP_PRESETS = fbx_wrapperPINVOKE.IMP_PRESETS_get();
  public static readonly string IMP_STATISTICS = fbx_wrapperPINVOKE.IMP_STATISTICS_get();
  public static readonly string IMP_STATISTICS_GRP = fbx_wrapperPINVOKE.IMP_STATISTICS_GRP_get();
  public static readonly string IMP_PRESETS_GRP = fbx_wrapperPINVOKE.IMP_PRESETS_GRP_get();
  public static readonly string IMP_PLUGIN_GRP = fbx_wrapperPINVOKE.IMP_PLUGIN_GRP_get();
  public static readonly string IMP_INCLUDE_GRP = fbx_wrapperPINVOKE.IMP_INCLUDE_GRP_get();
  public static readonly string IMP_ADV_OPT_GRP = fbx_wrapperPINVOKE.IMP_ADV_OPT_GRP_get();
  public static readonly string IMP_FBX_EXT_SDK_GRP = fbx_wrapperPINVOKE.IMP_FBX_EXT_SDK_GRP_get();
  public static readonly string IMP_FIRST_TIME_RUN_NOTICE_GRP = fbx_wrapperPINVOKE.IMP_FIRST_TIME_RUN_NOTICE_GRP_get();
  public static readonly string IMP_INFORMATION_GRP = fbx_wrapperPINVOKE.IMP_INFORMATION_GRP_get();
  public static readonly string IMP_FIRST_TIME_RUN_NOTICE = fbx_wrapperPINVOKE.IMP_FIRST_TIME_RUN_NOTICE_get();
  public static readonly string IMP_GEOMETRY = fbx_wrapperPINVOKE.IMP_GEOMETRY_get();
  public static readonly string IMP_ANIMATION = fbx_wrapperPINVOKE.IMP_ANIMATION_get();
  public static readonly string IMP_SETLOCKEDATTRIB = fbx_wrapperPINVOKE.IMP_SETLOCKEDATTRIB_get();
  public static readonly string IMP_MERGE_MODE = fbx_wrapperPINVOKE.IMP_MERGE_MODE_get();
  public static readonly string IMP_MERGE_MODE_DESCRIPTION = fbx_wrapperPINVOKE.IMP_MERGE_MODE_DESCRIPTION_get();
  public static readonly string IMP_ONE_CLICK_MERGE = fbx_wrapperPINVOKE.IMP_ONE_CLICK_MERGE_get();
  public static readonly string IMP_ONE_CLICK_MERGE_TEXTURE = fbx_wrapperPINVOKE.IMP_ONE_CLICK_MERGE_TEXTURE_get();
  public static readonly string IMP_ADD_MATERIAL_TO_EDIT = fbx_wrapperPINVOKE.IMP_ADD_MATERIAL_TO_EDIT_get();
  public static readonly string IMP_ENABLE_TEX_DISPLAY = fbx_wrapperPINVOKE.IMP_ENABLE_TEX_DISPLAY_get();
  public static readonly string IMP_PREFERED_ENVELOPPE_SYSTEM = fbx_wrapperPINVOKE.IMP_PREFERED_ENVELOPPE_SYSTEM_get();
  public static readonly string IMP_CAMERA_GRP = fbx_wrapperPINVOKE.IMP_CAMERA_GRP_get();
  public static readonly string IMP_LIGHT_GRP = fbx_wrapperPINVOKE.IMP_LIGHT_GRP_get();
  public static readonly string IMP_EMBEDDED_GRP = fbx_wrapperPINVOKE.IMP_EMBEDDED_GRP_get();
  public static readonly string IMP_EXTRACT_FOLDER = fbx_wrapperPINVOKE.IMP_EXTRACT_FOLDER_get();
  public static readonly string IMP_LIGHT = fbx_wrapperPINVOKE.IMP_LIGHT_get();
  public static readonly string IMP_ENVIRONMENT = fbx_wrapperPINVOKE.IMP_ENVIRONMENT_get();
  public static readonly string IMP_CAMERA = fbx_wrapperPINVOKE.IMP_CAMERA_get();
  public static readonly string IMP_VIEW_CUBE = fbx_wrapperPINVOKE.IMP_VIEW_CUBE_get();
  public static readonly string IMP_ZOOMEXTENTS = fbx_wrapperPINVOKE.IMP_ZOOMEXTENTS_get();
  public static readonly string IMP_GLOBAL_AMBIENT_COLOR = fbx_wrapperPINVOKE.IMP_GLOBAL_AMBIENT_COLOR_get();
  public static readonly string IMP_CURVEFILTERS = fbx_wrapperPINVOKE.IMP_CURVEFILTERS_get();
  public static readonly string IMP_SAMPLINGPANEL = fbx_wrapperPINVOKE.IMP_SAMPLINGPANEL_get();
  public static readonly string IMP_DEFORMATION = fbx_wrapperPINVOKE.IMP_DEFORMATION_get();
  public static readonly string IMP_BONE = fbx_wrapperPINVOKE.IMP_BONE_get();
  public static readonly string IMP_ATTENUATIONASINTENSITYCURVE = fbx_wrapperPINVOKE.IMP_ATTENUATIONASINTENSITYCURVE_get();
  public static readonly string IMP_EXTRA_GRP = fbx_wrapperPINVOKE.IMP_EXTRA_GRP_get();
  public static readonly string IMP_TAKE = fbx_wrapperPINVOKE.IMP_TAKE_get();
  public static readonly string IMP_KEEPFRAMERATE = fbx_wrapperPINVOKE.IMP_KEEPFRAMERATE_get();
  public static readonly string IMP_TIMELINE = fbx_wrapperPINVOKE.IMP_TIMELINE_get();
  public static readonly string IMP_TIMELINE_SPAN = fbx_wrapperPINVOKE.IMP_TIMELINE_SPAN_get();
  public static readonly string IMP_BAKEANIMATIONLAYERS = fbx_wrapperPINVOKE.IMP_BAKEANIMATIONLAYERS_get();
  public static readonly string IMP_MARKERS = fbx_wrapperPINVOKE.IMP_MARKERS_get();
  public static readonly string IMP_QUATERNION = fbx_wrapperPINVOKE.IMP_QUATERNION_get();
  public static readonly string IMP_PROTECTDRIVENKEYS = fbx_wrapperPINVOKE.IMP_PROTECTDRIVENKEYS_get();
  public static readonly string IMP_DEFORMNULLSASJOINTS = fbx_wrapperPINVOKE.IMP_DEFORMNULLSASJOINTS_get();
  public static readonly string IMP_NULLSTOPIVOT = fbx_wrapperPINVOKE.IMP_NULLSTOPIVOT_get();
  public static readonly string IMP_POINTCACHE = fbx_wrapperPINVOKE.IMP_POINTCACHE_get();
  public static readonly string IMP_SHAPEANIMATION = fbx_wrapperPINVOKE.IMP_SHAPEANIMATION_get();
  public static readonly string IMP_CONSTRAINTS_GRP = fbx_wrapperPINVOKE.IMP_CONSTRAINTS_GRP_get();
  public static readonly string IMP_CONSTRAINT = fbx_wrapperPINVOKE.IMP_CONSTRAINT_get();
  public static readonly string IMP_CHARACTER = fbx_wrapperPINVOKE.IMP_CHARACTER_get();
  public static readonly string IMP_CHARACTER_AS_MAYA_HIK = fbx_wrapperPINVOKE.IMP_CHARACTER_AS_MAYA_HIK_get();
  public static readonly string IMP_CHARACTER_TYPE = fbx_wrapperPINVOKE.IMP_CHARACTER_TYPE_get();
  public static readonly string IMP_SAMPLINGRATESELECTOR = fbx_wrapperPINVOKE.IMP_SAMPLINGRATESELECTOR_get();
  public static readonly string IMP_SAMPLINGRATE = fbx_wrapperPINVOKE.IMP_SAMPLINGRATE_get();
  public static readonly string IMP_UNITS_GRP = fbx_wrapperPINVOKE.IMP_UNITS_GRP_get();
  public static readonly string IMP_AXISCONV_GRP = fbx_wrapperPINVOKE.IMP_AXISCONV_GRP_get();
  public static readonly string IMP_CACHE_GRP = fbx_wrapperPINVOKE.IMP_CACHE_GRP_get();
  public static readonly string IMP_UI = fbx_wrapperPINVOKE.IMP_UI_get();
  public static readonly string IMP_FILEFORMAT = fbx_wrapperPINVOKE.IMP_FILEFORMAT_get();
  public static readonly string IMP_PERF_GRP = fbx_wrapperPINVOKE.IMP_PERF_GRP_get();
  public static readonly string IMP_REMOVEBADPOLYSFROMMESH = fbx_wrapperPINVOKE.IMP_REMOVEBADPOLYSFROMMESH_get();
  public static readonly string IMP_META_DATA = fbx_wrapperPINVOKE.IMP_META_DATA_get();
  public static readonly string IMP_FBX_EXTENTIONS_SDK_WARNING = fbx_wrapperPINVOKE.IMP_FBX_EXTENTIONS_SDK_WARNING_get();
  public static readonly string IMP_SCALECONVERSION = fbx_wrapperPINVOKE.IMP_SCALECONVERSION_get();
  public static readonly string IMP_MASTERSCALE = fbx_wrapperPINVOKE.IMP_MASTERSCALE_get();
  public static readonly string IMP_UNITS_SCALE = fbx_wrapperPINVOKE.IMP_UNITS_SCALE_get();
  public static readonly string IMP_DYN_SCALE_CONVERSION = fbx_wrapperPINVOKE.IMP_DYN_SCALE_CONVERSION_get();
  public static readonly string IMP_UNITSELECTOR = fbx_wrapperPINVOKE.IMP_UNITSELECTOR_get();
  public static readonly string IMP_TOTAL_UNITS_SCALE_TB = fbx_wrapperPINVOKE.IMP_TOTAL_UNITS_SCALE_TB_get();
  public static readonly string IMP_SHOW_UI_MODE = fbx_wrapperPINVOKE.IMP_SHOW_UI_MODE_get();
  public static readonly string IMP_SHOW_UI_WARNING = fbx_wrapperPINVOKE.IMP_SHOW_UI_WARNING_get();
  public static readonly string IMP_SHOW_WARNINGS_MANAGER = fbx_wrapperPINVOKE.IMP_SHOW_WARNINGS_MANAGER_get();
  public static readonly string IMP_GENERATE_LOG_DATA = fbx_wrapperPINVOKE.IMP_GENERATE_LOG_DATA_get();
  public static readonly string IMP_PLUGIN_VERSIONS_URL = fbx_wrapperPINVOKE.IMP_PLUGIN_VERSIONS_URL_get();
  public static readonly string IMP_DXF = fbx_wrapperPINVOKE.IMP_DXF_get();
  public static readonly string IMP_FBX = fbx_wrapperPINVOKE.IMP_FBX_get();
  public static readonly string IMP_OBJ = fbx_wrapperPINVOKE.IMP_OBJ_get();
  public static readonly string IMP_3DS = fbx_wrapperPINVOKE.IMP_3DS_get();
  public static readonly string IMP_MOTION_BASE = fbx_wrapperPINVOKE.IMP_MOTION_BASE_get();
  public static readonly string IMP_BIOVISION_BVH = fbx_wrapperPINVOKE.IMP_BIOVISION_BVH_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR = fbx_wrapperPINVOKE.IMP_MOTIONANALYSIS_HTR_get();
  public static readonly string IMP_ACCLAIM_ASF = fbx_wrapperPINVOKE.IMP_ACCLAIM_ASF_get();
  public static readonly string IMP_ACCLAIM_AMC = fbx_wrapperPINVOKE.IMP_ACCLAIM_AMC_get();
  public static readonly string IMP_UNLOCK_NORMALS = fbx_wrapperPINVOKE.IMP_UNLOCK_NORMALS_get();
  public static readonly string IMP_CREASE = fbx_wrapperPINVOKE.IMP_CREASE_get();
  public static readonly string IMP_SMOOTHING_GROUPS = fbx_wrapperPINVOKE.IMP_SMOOTHING_GROUPS_get();
  public static readonly string IMP_HARDEDGES = fbx_wrapperPINVOKE.IMP_HARDEDGES_get();
  public static readonly string IMP_BLINDDATA = fbx_wrapperPINVOKE.IMP_BLINDDATA_get();
  public static readonly string IMP_BONE_WIDTHHEIGHTLOCK = fbx_wrapperPINVOKE.IMP_BONE_WIDTHHEIGHTLOCK_get();
  public static readonly string IMP_BONEASDUMMY = fbx_wrapperPINVOKE.IMP_BONEASDUMMY_get();
  public static readonly string IMP_BONEMAX4BONEWIDTH = fbx_wrapperPINVOKE.IMP_BONEMAX4BONEWIDTH_get();
  public static readonly string IMP_BONEMAX4BONEHEIGHT = fbx_wrapperPINVOKE.IMP_BONEMAX4BONEHEIGHT_get();
  public static readonly string IMP_BONEMAX4BONETAPER = fbx_wrapperPINVOKE.IMP_BONEMAX4BONETAPER_get();
  public static readonly string IMP_SHAPE = fbx_wrapperPINVOKE.IMP_SHAPE_get();
  public static readonly string IMP_SKINS = fbx_wrapperPINVOKE.IMP_SKINS_get();
  public static readonly string IMP_USEMATRIXFROMPOSE = fbx_wrapperPINVOKE.IMP_USEMATRIXFROMPOSE_get();
  public static readonly string IMP_FORCEWEIGHTNORMALIZE = fbx_wrapperPINVOKE.IMP_FORCEWEIGHTNORMALIZE_get();
  public static readonly string IMP_APPLYCSTKEYRED = fbx_wrapperPINVOKE.IMP_APPLYCSTKEYRED_get();
  public static readonly string IMP_CSTKEYREDTPREC = fbx_wrapperPINVOKE.IMP_CSTKEYREDTPREC_get();
  public static readonly string IMP_CSTKEYREDRPREC = fbx_wrapperPINVOKE.IMP_CSTKEYREDRPREC_get();
  public static readonly string IMP_CSTKEYREDSPREC = fbx_wrapperPINVOKE.IMP_CSTKEYREDSPREC_get();
  public static readonly string IMP_CSTKEYREDOPREC = fbx_wrapperPINVOKE.IMP_CSTKEYREDOPREC_get();
  public static readonly string IMP_AUTOTANGENTSONLY = fbx_wrapperPINVOKE.IMP_AUTOTANGENTSONLY_get();
  public static readonly string IMP_APPLYKEYREDUCE = fbx_wrapperPINVOKE.IMP_APPLYKEYREDUCE_get();
  public static readonly string IMP_KEYREDUCEPREC = fbx_wrapperPINVOKE.IMP_KEYREDUCEPREC_get();
  public static readonly string IMP_APPLYKEYSONFRM = fbx_wrapperPINVOKE.IMP_APPLYKEYSONFRM_get();
  public static readonly string IMP_APPLYKEYSYNC = fbx_wrapperPINVOKE.IMP_APPLYKEYSYNC_get();
  public static readonly string IMP_APPLYUNROLL = fbx_wrapperPINVOKE.IMP_APPLYUNROLL_get();
  public static readonly string IMP_UNROLLPREC = fbx_wrapperPINVOKE.IMP_UNROLLPREC_get();
  public static readonly string IMP_UNROLLPATH = fbx_wrapperPINVOKE.IMP_UNROLLPATH_get();
  public static readonly string IMP_UNROLLFORCEAUTO = fbx_wrapperPINVOKE.IMP_UNROLLFORCEAUTO_get();
  public static readonly string IMP_UP_AXIS = fbx_wrapperPINVOKE.IMP_UP_AXIS_get();
  public static readonly string IMP_UP_AXIS_MAX = fbx_wrapperPINVOKE.IMP_UP_AXIS_MAX_get();
  public static readonly string IMP_ZUPROTATION_MAX = fbx_wrapperPINVOKE.IMP_ZUPROTATION_MAX_get();
  public static readonly string IMP_AXISCONVERSION = fbx_wrapperPINVOKE.IMP_AXISCONVERSION_get();
  public static readonly string IMP_AUTO_AXIS = fbx_wrapperPINVOKE.IMP_AUTO_AXIS_get();
  public static readonly string IMP_FILE_UP_AXIS = fbx_wrapperPINVOKE.IMP_FILE_UP_AXIS_get();
  public static readonly string IMP_CACHE_SIZE = fbx_wrapperPINVOKE.IMP_CACHE_SIZE_get();
  public static readonly string IMP_PLUGIN_UI_WIDTH = fbx_wrapperPINVOKE.IMP_PLUGIN_UI_WIDTH_get();
  public static readonly string IMP_PLUGIN_UI_HEIGHT = fbx_wrapperPINVOKE.IMP_PLUGIN_UI_HEIGHT_get();
  public static readonly string IMP_PRESET_SELECTED = fbx_wrapperPINVOKE.IMP_PRESET_SELECTED_get();
  public static readonly string IMP_UIL = fbx_wrapperPINVOKE.IMP_UIL_get();
  public static readonly string IMP_PLUGIN_PRODUCT_FAMILY = fbx_wrapperPINVOKE.IMP_PLUGIN_PRODUCT_FAMILY_get();
  public static readonly string IMP_PLUGIN_UI_XPOS = fbx_wrapperPINVOKE.IMP_PLUGIN_UI_XPOS_get();
  public static readonly string IMP_PLUGIN_UI_YPOS = fbx_wrapperPINVOKE.IMP_PLUGIN_UI_YPOS_get();
  public static readonly string IMP_DXF_WELD_VERTICES = fbx_wrapperPINVOKE.IMP_DXF_WELD_VERTICES_get();
  public static readonly string IMP_DXF_OBJECT_DERIVATION = fbx_wrapperPINVOKE.IMP_DXF_OBJECT_DERIVATION_get();
  public static readonly string IMP_DXF_REFERENCE_NODE = fbx_wrapperPINVOKE.IMP_DXF_REFERENCE_NODE_get();
  public static readonly string IMP_OBJ_REFERENCE_NODE = fbx_wrapperPINVOKE.IMP_OBJ_REFERENCE_NODE_get();
  public static readonly string IMP_3DS_REFERENCENODE = fbx_wrapperPINVOKE.IMP_3DS_REFERENCENODE_get();
  public static readonly string IMP_3DS_TEXTURE = fbx_wrapperPINVOKE.IMP_3DS_TEXTURE_get();
  public static readonly string IMP_3DS_MATERIAL = fbx_wrapperPINVOKE.IMP_3DS_MATERIAL_get();
  public static readonly string IMP_3DS_ANIMATION = fbx_wrapperPINVOKE.IMP_3DS_ANIMATION_get();
  public static readonly string IMP_3DS_MESH = fbx_wrapperPINVOKE.IMP_3DS_MESH_get();
  public static readonly string IMP_3DS_LIGHT = fbx_wrapperPINVOKE.IMP_3DS_LIGHT_get();
  public static readonly string IMP_3DS_CAMERA = fbx_wrapperPINVOKE.IMP_3DS_CAMERA_get();
  public static readonly string IMP_3DS_AMBIENT_LIGHT = fbx_wrapperPINVOKE.IMP_3DS_AMBIENT_LIGHT_get();
  public static readonly string IMP_3DS_RESCALING = fbx_wrapperPINVOKE.IMP_3DS_RESCALING_get();
  public static readonly string IMP_3DS_FILTER = fbx_wrapperPINVOKE.IMP_3DS_FILTER_get();
  public static readonly string IMP_3DS_SMOOTHGROUP = fbx_wrapperPINVOKE.IMP_3DS_SMOOTHGROUP_get();
  public static readonly string IMP_FBX_MODEL_COUNT = fbx_wrapperPINVOKE.IMP_FBX_MODEL_COUNT_get();
  public static readonly string IMP_FBX_DEVICE_COUNT = fbx_wrapperPINVOKE.IMP_FBX_DEVICE_COUNT_get();
  public static readonly string IMP_FBX_CHARACTER_COUNT = fbx_wrapperPINVOKE.IMP_FBX_CHARACTER_COUNT_get();
  public static readonly string IMP_FBX_ACTOR_COUNT = fbx_wrapperPINVOKE.IMP_FBX_ACTOR_COUNT_get();
  public static readonly string IMP_FBX_CONSTRAINT_COUNT = fbx_wrapperPINVOKE.IMP_FBX_CONSTRAINT_COUNT_get();
  public static readonly string IMP_FBX_MEDIA_COUNT = fbx_wrapperPINVOKE.IMP_FBX_MEDIA_COUNT_get();
  public static readonly string IMP_FBX_TEMPLATE = fbx_wrapperPINVOKE.IMP_FBX_TEMPLATE_get();
  public static readonly string IMP_FBX_PIVOT = fbx_wrapperPINVOKE.IMP_FBX_PIVOT_get();
  public static readonly string IMP_FBX_GLOBAL_SETTINGS = fbx_wrapperPINVOKE.IMP_FBX_GLOBAL_SETTINGS_get();
  public static readonly string IMP_FBX_CHARACTER = fbx_wrapperPINVOKE.IMP_FBX_CHARACTER_get();
  public static readonly string IMP_FBX_CONSTRAINT = fbx_wrapperPINVOKE.IMP_FBX_CONSTRAINT_get();
  public static readonly string IMP_FBX_MERGE_LAYER_AND_TIMEWARP = fbx_wrapperPINVOKE.IMP_FBX_MERGE_LAYER_AND_TIMEWARP_get();
  public static readonly string IMP_FBX_GOBO = fbx_wrapperPINVOKE.IMP_FBX_GOBO_get();
  public static readonly string IMP_FBX_SHAPE = fbx_wrapperPINVOKE.IMP_FBX_SHAPE_get();
  public static readonly string IMP_FBX_LINK = fbx_wrapperPINVOKE.IMP_FBX_LINK_get();
  public static readonly string IMP_FBX_MATERIAL = fbx_wrapperPINVOKE.IMP_FBX_MATERIAL_get();
  public static readonly string IMP_FBX_TEXTURE = fbx_wrapperPINVOKE.IMP_FBX_TEXTURE_get();
  public static readonly string IMP_FBX_MODEL = fbx_wrapperPINVOKE.IMP_FBX_MODEL_get();
  public static readonly string IMP_FBX_ANIMATION = fbx_wrapperPINVOKE.IMP_FBX_ANIMATION_get();
  public static readonly string IMP_FBX_PASSWORD = fbx_wrapperPINVOKE.IMP_FBX_PASSWORD_get();
  public static readonly string IMP_FBX_PASSWORD_ENABLE = fbx_wrapperPINVOKE.IMP_FBX_PASSWORD_ENABLE_get();
  public static readonly string IMP_FBX_CURRENT_TAKE_NAME = fbx_wrapperPINVOKE.IMP_FBX_CURRENT_TAKE_NAME_get();
  public static readonly string IMP_FBX_EXTRACT_EMBEDDED_DATA = fbx_wrapperPINVOKE.IMP_FBX_EXTRACT_EMBEDDED_DATA_get();
  public static readonly string IMP_BUTTON_WEB_UPDATE = fbx_wrapperPINVOKE.IMP_BUTTON_WEB_UPDATE_get();
  public static readonly string IMP_PI_VERSION = fbx_wrapperPINVOKE.IMP_PI_VERSION_get();
  public static readonly string EXP_STATISTICS_GRP = fbx_wrapperPINVOKE.EXP_STATISTICS_GRP_get();
  public static readonly string EXP_ADV_OPT_GRP = fbx_wrapperPINVOKE.EXP_ADV_OPT_GRP_get();
  public static readonly string EXP_PRESETS_GRP = fbx_wrapperPINVOKE.EXP_PRESETS_GRP_get();
  public static readonly string EXP_STATISTICS = fbx_wrapperPINVOKE.EXP_STATISTICS_get();
  public static readonly string EXP_FIRST_TIME_RUN_NOTICE_GRP = fbx_wrapperPINVOKE.EXP_FIRST_TIME_RUN_NOTICE_GRP_get();
  public static readonly string EXP_INFORMATION_GRP = fbx_wrapperPINVOKE.EXP_INFORMATION_GRP_get();
  public static readonly string EXP_PLUGIN_GRP = fbx_wrapperPINVOKE.EXP_PLUGIN_GRP_get();
  public static readonly string EXP_INCLUDE_GRP = fbx_wrapperPINVOKE.EXP_INCLUDE_GRP_get();
  public static readonly string EXP_FBX_EXT_SDK_GRP = fbx_wrapperPINVOKE.EXP_FBX_EXT_SDK_GRP_get();
  public static readonly string EXP_UNITS_GRP = fbx_wrapperPINVOKE.EXP_UNITS_GRP_get();
  public static readonly string EXP_FILEFORMAT = fbx_wrapperPINVOKE.EXP_FILEFORMAT_get();
  public static readonly string EXP_AXISCONV_GRP = fbx_wrapperPINVOKE.EXP_AXISCONV_GRP_get();
  public static readonly string EXP_CACHE_GRP = fbx_wrapperPINVOKE.EXP_CACHE_GRP_get();
  public static readonly string EXP_UI = fbx_wrapperPINVOKE.EXP_UI_get();
  public static readonly string EXP_FBX_EXTENTIONS_SDK_WARNING = fbx_wrapperPINVOKE.EXP_FBX_EXTENTIONS_SDK_WARNING_get();
  public static readonly string EXP_FIRST_TIME_RUN_NOTICE = fbx_wrapperPINVOKE.EXP_FIRST_TIME_RUN_NOTICE_get();
  public static readonly string EXP_SCALEFACTOR = fbx_wrapperPINVOKE.EXP_SCALEFACTOR_get();
  public static readonly string EXP_AXISCONVERSIONMETHOD = fbx_wrapperPINVOKE.EXP_AXISCONVERSIONMETHOD_get();
  public static readonly string EXP_UPAXIS = fbx_wrapperPINVOKE.EXP_UPAXIS_get();
  public static readonly string EXP_UNITS_SCALE = fbx_wrapperPINVOKE.EXP_UNITS_SCALE_get();
  public static readonly string EXP_MASTERSCALE = fbx_wrapperPINVOKE.EXP_MASTERSCALE_get();
  public static readonly string EXP_DYN_SCALE_CONVERSION = fbx_wrapperPINVOKE.EXP_DYN_SCALE_CONVERSION_get();
  public static readonly string EXP_UNITSELECTOR = fbx_wrapperPINVOKE.EXP_UNITSELECTOR_get();
  public static readonly string EXP_TOTAL_UNITS_SCALE_TB = fbx_wrapperPINVOKE.EXP_TOTAL_UNITS_SCALE_TB_get();
  public static readonly string EXP_SHOW_UI_MODE = fbx_wrapperPINVOKE.EXP_SHOW_UI_MODE_get();
  public static readonly string EXP_SHOW_UI_WARNING = fbx_wrapperPINVOKE.EXP_SHOW_UI_WARNING_get();
  public static readonly string EXP_SHOW_WARNINGS_MANAGER = fbx_wrapperPINVOKE.EXP_SHOW_WARNINGS_MANAGER_get();
  public static readonly string EXP_GENERATE_LOG_DATA = fbx_wrapperPINVOKE.EXP_GENERATE_LOG_DATA_get();
  public static readonly string EXP_PLUGIN_VERSIONS_URL = fbx_wrapperPINVOKE.EXP_PLUGIN_VERSIONS_URL_get();
  public static readonly string EXP_PRESETS = fbx_wrapperPINVOKE.EXP_PRESETS_get();
  public static readonly string EXP_CAMERA_GRP = fbx_wrapperPINVOKE.EXP_CAMERA_GRP_get();
  public static readonly string EXP_LIGHT_GRP = fbx_wrapperPINVOKE.EXP_LIGHT_GRP_get();
  public static readonly string EXP_GEOMETRY = fbx_wrapperPINVOKE.EXP_GEOMETRY_get();
  public static readonly string EXP_ANIMATION = fbx_wrapperPINVOKE.EXP_ANIMATION_get();
  public static readonly string EXP_PIVOTTONULLS = fbx_wrapperPINVOKE.EXP_PIVOTTONULLS_get();
  public static readonly string EXP_LIGHT = fbx_wrapperPINVOKE.EXP_LIGHT_get();
  public static readonly string EXP_LIGHTATTENUATION = fbx_wrapperPINVOKE.EXP_LIGHTATTENUATION_get();
  public static readonly string EXP_ENVIRONMENT = fbx_wrapperPINVOKE.EXP_ENVIRONMENT_get();
  public static readonly string EXP_CAMERA = fbx_wrapperPINVOKE.EXP_CAMERA_get();
  public static readonly string EXP_BINDPOSE = fbx_wrapperPINVOKE.EXP_BINDPOSE_get();
  public static readonly string EXP_SELECTIONONLY = fbx_wrapperPINVOKE.EXP_SELECTIONONLY_get();
  public static readonly string EXP_INPUTCONNECTIONS_GRP = fbx_wrapperPINVOKE.EXP_INPUTCONNECTIONS_GRP_get();
  public static readonly string EXP_INPUTCONNECTIONS = fbx_wrapperPINVOKE.EXP_INPUTCONNECTIONS_get();
  public static readonly string EXP_BYPASSRRSINHERITANCE = fbx_wrapperPINVOKE.EXP_BYPASSRRSINHERITANCE_get();
  public static readonly string EXP_EMBEDTEXTURE_GRP = fbx_wrapperPINVOKE.EXP_EMBEDTEXTURE_GRP_get();
  public static readonly string EXP_EMBEDTEXTURE = fbx_wrapperPINVOKE.EXP_EMBEDTEXTURE_get();
  public static readonly string EXP_CONVERTTOTIFF = fbx_wrapperPINVOKE.EXP_CONVERTTOTIFF_get();
  public static readonly string EXP_CURVEFILTERS = fbx_wrapperPINVOKE.EXP_CURVEFILTERS_get();
  public static readonly string EXP_DEFORMATION = fbx_wrapperPINVOKE.EXP_DEFORMATION_get();
  public static readonly string EXP_BAKECOMPLEXANIMATION = fbx_wrapperPINVOKE.EXP_BAKECOMPLEXANIMATION_get();
  public static readonly string EXP_BONE = fbx_wrapperPINVOKE.EXP_BONE_get();
  public static readonly string EXP_POINTCACHE = fbx_wrapperPINVOKE.EXP_POINTCACHE_get();
  public static readonly string EXP_SMOOTHKEYASUSER = fbx_wrapperPINVOKE.EXP_SMOOTHKEYASUSER_get();
  public static readonly string EXP_EXTRA_GRP = fbx_wrapperPINVOKE.EXP_EXTRA_GRP_get();
  public static readonly string EXP_REMOVE_SINGLE_KEY = fbx_wrapperPINVOKE.EXP_REMOVE_SINGLE_KEY_get();
  public static readonly string EXP_NAMETAKE = fbx_wrapperPINVOKE.EXP_NAMETAKE_get();
  public static readonly string EXP_QUATERNION = fbx_wrapperPINVOKE.EXP_QUATERNION_get();
  public static readonly string EXP_CONSTRAINTS_GRP = fbx_wrapperPINVOKE.EXP_CONSTRAINTS_GRP_get();
  public static readonly string EXP_CONSTRAINT = fbx_wrapperPINVOKE.EXP_CONSTRAINT_get();
  public static readonly string EXP_CHARACTER = fbx_wrapperPINVOKE.EXP_CHARACTER_get();
  public static readonly string EXP_MRCUSTOMATTRIBUTES = fbx_wrapperPINVOKE.EXP_MRCUSTOMATTRIBUTES_get();
  public static readonly string EXP_MESHPRIMITIVE = fbx_wrapperPINVOKE.EXP_MESHPRIMITIVE_get();
  public static readonly string EXP_MESHTRIANGLE = fbx_wrapperPINVOKE.EXP_MESHTRIANGLE_get();
  public static readonly string EXP_MESHPOLY = fbx_wrapperPINVOKE.EXP_MESHPOLY_get();
  public static readonly string EXP_NURB = fbx_wrapperPINVOKE.EXP_NURB_get();
  public static readonly string EXP_PATCH = fbx_wrapperPINVOKE.EXP_PATCH_get();
  public static readonly string EXP_BIP2FBX = fbx_wrapperPINVOKE.EXP_BIP2FBX_get();
  public static readonly string EXP_GEOMNORMALPERPOLY = fbx_wrapperPINVOKE.EXP_GEOMNORMALPERPOLY_get();
  public static readonly string EXP_TANGENTSPACE = fbx_wrapperPINVOKE.EXP_TANGENTSPACE_get();
  public static readonly string EXP_SMOOTHMESH = fbx_wrapperPINVOKE.EXP_SMOOTHMESH_get();
  public static readonly string EXP_SELECTIONSET = fbx_wrapperPINVOKE.EXP_SELECTIONSET_get();
  public static readonly string EXP_FINESTSUBDIVLEVEL = fbx_wrapperPINVOKE.EXP_FINESTSUBDIVLEVEL_get();
  public static readonly string EXP_MAXBONEASBONE = fbx_wrapperPINVOKE.EXP_MAXBONEASBONE_get();
  public static readonly string EXP_MAXNURBSSTEP = fbx_wrapperPINVOKE.EXP_MAXNURBSSTEP_get();
  public static readonly string EXP_CREASE = fbx_wrapperPINVOKE.EXP_CREASE_get();
  public static readonly string EXP_BLINDDATA = fbx_wrapperPINVOKE.EXP_BLINDDATA_get();
  public static readonly string EXP_NURBSSURFACEAS = fbx_wrapperPINVOKE.EXP_NURBSSURFACEAS_get();
  public static readonly string EXP_SMOOTHING_GROUPS = fbx_wrapperPINVOKE.EXP_SMOOTHING_GROUPS_get();
  public static readonly string EXP_HARDEDGES = fbx_wrapperPINVOKE.EXP_HARDEDGES_get();
  public static readonly string EXP_ANIMATIONONLY = fbx_wrapperPINVOKE.EXP_ANIMATIONONLY_get();
  public static readonly string EXP_INSTANCES = fbx_wrapperPINVOKE.EXP_INSTANCES_get();
  public static readonly string EXP_CONTAINEROBJECTS = fbx_wrapperPINVOKE.EXP_CONTAINEROBJECTS_get();
  public static readonly string EXP_TRIANGULATE = fbx_wrapperPINVOKE.EXP_TRIANGULATE_get();
  public static readonly string EXP_EDGE_ORIENTATION = fbx_wrapperPINVOKE.EXP_EDGE_ORIENTATION_get();
  public static readonly string EXP_SELECTIONSETNAMEASPOINTCACHE = fbx_wrapperPINVOKE.EXP_SELECTIONSETNAMEASPOINTCACHE_get();
  public static readonly string EXP_GEOMETRYMESHPRIMITIVEAS = fbx_wrapperPINVOKE.EXP_GEOMETRYMESHPRIMITIVEAS_get();
  public static readonly string EXP_GEOMETRYMESHTRIANGLEAS = fbx_wrapperPINVOKE.EXP_GEOMETRYMESHTRIANGLEAS_get();
  public static readonly string EXP_GEOMETRYMESHPOLYAS = fbx_wrapperPINVOKE.EXP_GEOMETRYMESHPOLYAS_get();
  public static readonly string EXP_GEOMETRYNURBSAS = fbx_wrapperPINVOKE.EXP_GEOMETRYNURBSAS_get();
  public static readonly string EXP_GEOMETRYPATCHAS = fbx_wrapperPINVOKE.EXP_GEOMETRYPATCHAS_get();
  public static readonly string EXP_BAKEFRAMESTART = fbx_wrapperPINVOKE.EXP_BAKEFRAMESTART_get();
  public static readonly string EXP_BAKEFRAMEEND = fbx_wrapperPINVOKE.EXP_BAKEFRAMEEND_get();
  public static readonly string EXP_BAKEFRAMESTEP = fbx_wrapperPINVOKE.EXP_BAKEFRAMESTEP_get();
  public static readonly string EXP_BAKE_RESAMPLE_ANIMATION_CURVES = fbx_wrapperPINVOKE.EXP_BAKE_RESAMPLE_ANIMATION_CURVES_get();
  public static readonly string EXP_BAKEFRAMESTARTNORESET = fbx_wrapperPINVOKE.EXP_BAKEFRAMESTARTNORESET_get();
  public static readonly string EXP_BAKEFRAMEENDNORESET = fbx_wrapperPINVOKE.EXP_BAKEFRAMEENDNORESET_get();
  public static readonly string EXP_BAKEFRAMESTEPNORESET = fbx_wrapperPINVOKE.EXP_BAKEFRAMESTEPNORESET_get();
  public static readonly string EXP_FBX = fbx_wrapperPINVOKE.EXP_FBX_get();
  public static readonly string EXP_DXF = fbx_wrapperPINVOKE.EXP_DXF_get();
  public static readonly string EXP_COLLADA = fbx_wrapperPINVOKE.EXP_COLLADA_get();
  public static readonly string EXP_OBJ = fbx_wrapperPINVOKE.EXP_OBJ_get();
  public static readonly string EXP_3DS = fbx_wrapperPINVOKE.EXP_3DS_get();
  public static readonly string EXP_MOTION_BASE = fbx_wrapperPINVOKE.EXP_MOTION_BASE_get();
  public static readonly string EXP_BIOVISION_BVH = fbx_wrapperPINVOKE.EXP_BIOVISION_BVH_get();
  public static readonly string EXP_ACCLAIM_ASF = fbx_wrapperPINVOKE.EXP_ACCLAIM_ASF_get();
  public static readonly string EXP_ACCLAIM_AMC = fbx_wrapperPINVOKE.EXP_ACCLAIM_AMC_get();
  public static readonly string EXP_ASCIIFBX = fbx_wrapperPINVOKE.EXP_ASCIIFBX_get();
  public static readonly string EXP_CACHE_SIZE = fbx_wrapperPINVOKE.EXP_CACHE_SIZE_get();
  public static readonly string EXP_SHAPE = fbx_wrapperPINVOKE.EXP_SHAPE_get();
  public static readonly string EXP_SKINS = fbx_wrapperPINVOKE.EXP_SKINS_get();
  public static readonly string EXP_APPLYCSTKEYRED = fbx_wrapperPINVOKE.EXP_APPLYCSTKEYRED_get();
  public static readonly string EXP_SAMPLINGRATE = fbx_wrapperPINVOKE.EXP_SAMPLINGRATE_get();
  public static readonly string EXP_CSTKEYREDTPREC = fbx_wrapperPINVOKE.EXP_CSTKEYREDTPREC_get();
  public static readonly string EXP_CSTKEYREDRPREC = fbx_wrapperPINVOKE.EXP_CSTKEYREDRPREC_get();
  public static readonly string EXP_CSTKEYREDSPREC = fbx_wrapperPINVOKE.EXP_CSTKEYREDSPREC_get();
  public static readonly string EXP_CSTKEYREDOPREC = fbx_wrapperPINVOKE.EXP_CSTKEYREDOPREC_get();
  public static readonly string EXP_AUTOTANGENTSONLY = fbx_wrapperPINVOKE.EXP_AUTOTANGENTSONLY_get();
  public static readonly string EXP_APPLYKEYREDUCE = fbx_wrapperPINVOKE.EXP_APPLYKEYREDUCE_get();
  public static readonly string EXP_KEYREDUCEPREC = fbx_wrapperPINVOKE.EXP_KEYREDUCEPREC_get();
  public static readonly string EXP_APPLYKEYSONFRM = fbx_wrapperPINVOKE.EXP_APPLYKEYSONFRM_get();
  public static readonly string EXP_APPLYKEYSYNC = fbx_wrapperPINVOKE.EXP_APPLYKEYSYNC_get();
  public static readonly string EXP_APPLYUNROLL = fbx_wrapperPINVOKE.EXP_APPLYUNROLL_get();
  public static readonly string EXP_UNROLLPREC = fbx_wrapperPINVOKE.EXP_UNROLLPREC_get();
  public static readonly string EXP_UNROLLPATH = fbx_wrapperPINVOKE.EXP_UNROLLPATH_get();
  public static readonly string EXP_UNROLLFORCEAUTO = fbx_wrapperPINVOKE.EXP_UNROLLFORCEAUTO_get();
  public static readonly string EXP_PLUGIN_UI_WIDTH = fbx_wrapperPINVOKE.EXP_PLUGIN_UI_WIDTH_get();
  public static readonly string EXP_PLUGIN_UI_HEIGHT = fbx_wrapperPINVOKE.EXP_PLUGIN_UI_HEIGHT_get();
  public static readonly string EXP_PRESET_SELECTED = fbx_wrapperPINVOKE.EXP_PRESET_SELECTED_get();
  public static readonly string EXP_UIL = fbx_wrapperPINVOKE.EXP_UIL_get();
  public static readonly string EXP_PLUGIN_PRODUCT_FAMILY = fbx_wrapperPINVOKE.EXP_PLUGIN_PRODUCT_FAMILY_get();
  public static readonly string EXP_PLUGIN_UI_XPOS = fbx_wrapperPINVOKE.EXP_PLUGIN_UI_XPOS_get();
  public static readonly string EXP_PLUGIN_UI_YPOS = fbx_wrapperPINVOKE.EXP_PLUGIN_UI_YPOS_get();
  public static readonly string EXP_BUTTON_WEB_UPDATE = fbx_wrapperPINVOKE.EXP_BUTTON_WEB_UPDATE_get();
  public static readonly string EXP_PI_VERSION = fbx_wrapperPINVOKE.EXP_PI_VERSION_get();
  public static readonly string EXP_BUTTON_EDIT = fbx_wrapperPINVOKE.EXP_BUTTON_EDIT_get();
  public static readonly string EXP_BUTTON_OK = fbx_wrapperPINVOKE.EXP_BUTTON_OK_get();
  public static readonly string EXP_BUTTON_CANCEL = fbx_wrapperPINVOKE.EXP_BUTTON_CANCEL_get();
  public static readonly string EXP_MENU_EDIT_PRESET = fbx_wrapperPINVOKE.EXP_MENU_EDIT_PRESET_get();
  public static readonly string EXP_MENU_SAVE_PRESET = fbx_wrapperPINVOKE.EXP_MENU_SAVE_PRESET_get();
  public static readonly string EXP_USETMPFILEPERIPHERAL = fbx_wrapperPINVOKE.EXP_USETMPFILEPERIPHERAL_get();
  public static readonly string EXP_CONSTRUCTIONHISTORY = fbx_wrapperPINVOKE.EXP_CONSTRUCTIONHISTORY_get();
  public static readonly string EXP_COLLADA_TRIANGULATE = fbx_wrapperPINVOKE.EXP_COLLADA_TRIANGULATE_get();
  public static readonly string EXP_COLLADA_SINGLEMATRIX = fbx_wrapperPINVOKE.EXP_COLLADA_SINGLEMATRIX_get();
  public static readonly string EXP_COLLADA_FRAME_RATE = fbx_wrapperPINVOKE.EXP_COLLADA_FRAME_RATE_get();
  public static readonly string EXP_DXF_TRIANGULATE = fbx_wrapperPINVOKE.EXP_DXF_TRIANGULATE_get();
  public static readonly string EXP_DXF_DEFORMATION = fbx_wrapperPINVOKE.EXP_DXF_DEFORMATION_get();
  public static readonly string EXP_OBJ_TRIANGULATE = fbx_wrapperPINVOKE.EXP_OBJ_TRIANGULATE_get();
  public static readonly string EXP_OBJ_DEFORMATION = fbx_wrapperPINVOKE.EXP_OBJ_DEFORMATION_get();
  public static readonly string EXP_3DS_REFERENCENODE = fbx_wrapperPINVOKE.EXP_3DS_REFERENCENODE_get();
  public static readonly string EXP_3DS_TEXTURE = fbx_wrapperPINVOKE.EXP_3DS_TEXTURE_get();
  public static readonly string EXP_3DS_MATERIAL = fbx_wrapperPINVOKE.EXP_3DS_MATERIAL_get();
  public static readonly string EXP_3DS_ANIMATION = fbx_wrapperPINVOKE.EXP_3DS_ANIMATION_get();
  public static readonly string EXP_3DS_MESH = fbx_wrapperPINVOKE.EXP_3DS_MESH_get();
  public static readonly string EXP_3DS_LIGHT = fbx_wrapperPINVOKE.EXP_3DS_LIGHT_get();
  public static readonly string EXP_3DS_CAMERA = fbx_wrapperPINVOKE.EXP_3DS_CAMERA_get();
  public static readonly string EXP_3DS_AMBIENT_LIGHT = fbx_wrapperPINVOKE.EXP_3DS_AMBIENT_LIGHT_get();
  public static readonly string EXP_3DS_RESCALING = fbx_wrapperPINVOKE.EXP_3DS_RESCALING_get();
  public static readonly string EXP_3DS_TEXUVBYPOLY = fbx_wrapperPINVOKE.EXP_3DS_TEXUVBYPOLY_get();
  public static readonly string EXP_FBX_TEMPLATE = fbx_wrapperPINVOKE.EXP_FBX_TEMPLATE_get();
  public static readonly string EXP_FBX_PIVOT = fbx_wrapperPINVOKE.EXP_FBX_PIVOT_get();
  public static readonly string EXP_FBX_GLOBAL_SETTINGS = fbx_wrapperPINVOKE.EXP_FBX_GLOBAL_SETTINGS_get();
  public static readonly string EXP_FBX_CHARACTER = fbx_wrapperPINVOKE.EXP_FBX_CHARACTER_get();
  public static readonly string EXP_FBX_CONSTRAINT = fbx_wrapperPINVOKE.EXP_FBX_CONSTRAINT_get();
  public static readonly string EXP_FBX_GOBO = fbx_wrapperPINVOKE.EXP_FBX_GOBO_get();
  public static readonly string EXP_FBX_SHAPE = fbx_wrapperPINVOKE.EXP_FBX_SHAPE_get();
  public static readonly string EXP_FBX_MATERIAL = fbx_wrapperPINVOKE.EXP_FBX_MATERIAL_get();
  public static readonly string EXP_FBX_TEXTURE = fbx_wrapperPINVOKE.EXP_FBX_TEXTURE_get();
  public static readonly string EXP_FBX_MODEL = fbx_wrapperPINVOKE.EXP_FBX_MODEL_get();
  public static readonly string EXP_FBX_ANIMATION = fbx_wrapperPINVOKE.EXP_FBX_ANIMATION_get();
  public static readonly string EXP_FBX_EMBEDDED = fbx_wrapperPINVOKE.EXP_FBX_EMBEDDED_get();
  public static readonly string EXP_FBX_PASSWORD = fbx_wrapperPINVOKE.EXP_FBX_PASSWORD_get();
  public static readonly string EXP_FBX_PASSWORD_ENABLE = fbx_wrapperPINVOKE.EXP_FBX_PASSWORD_ENABLE_get();
  public static readonly string EXP_FBX_COLLAPSE_EXTERNALS = fbx_wrapperPINVOKE.EXP_FBX_COLLAPSE_EXTERNALS_get();
  public static readonly string EXP_FBX_COMPRESS_ARRAYS = fbx_wrapperPINVOKE.EXP_FBX_COMPRESS_ARRAYS_get();
  public static readonly string EXP_FBX_COMPRESS_LEVEL = fbx_wrapperPINVOKE.EXP_FBX_COMPRESS_LEVEL_get();
  public static readonly string EXP_FBX_COMPRESS_MINSIZE = fbx_wrapperPINVOKE.EXP_FBX_COMPRESS_MINSIZE_get();
  public static readonly string EXP_FBX_EMBEDDED_PROPERTIES_SKIP = fbx_wrapperPINVOKE.EXP_FBX_EMBEDDED_PROPERTIES_SKIP_get();
  public static readonly string EXP_FBX_EXPORT_FILE_VERSION = fbx_wrapperPINVOKE.EXP_FBX_EXPORT_FILE_VERSION_get();
  public static readonly string IOSN_MOTION_START = fbx_wrapperPINVOKE.IOSN_MOTION_START_get();
  public static readonly string IOSN_MOTION_FRAME_COUNT = fbx_wrapperPINVOKE.IOSN_MOTION_FRAME_COUNT_get();
  public static readonly string IOSN_MOTION_FRAME_RATE = fbx_wrapperPINVOKE.IOSN_MOTION_FRAME_RATE_get();
  public static readonly string IOSN_MOTION_ACTOR_PREFIX = fbx_wrapperPINVOKE.IOSN_MOTION_ACTOR_PREFIX_get();
  public static readonly string IOSN_MOTION_RENAME_DUPLICATE_NAMES = fbx_wrapperPINVOKE.IOSN_MOTION_RENAME_DUPLICATE_NAMES_get();
  public static readonly string IOSN_MOTION_EXACT_ZERO_AS_OCCLUDED = fbx_wrapperPINVOKE.IOSN_MOTION_EXACT_ZERO_AS_OCCLUDED_get();
  public static readonly string IOSN_MOTION_SET_OCCLUDED_TO_LAST_VALID_POSITION = fbx_wrapperPINVOKE.IOSN_MOTION_SET_OCCLUDED_TO_LAST_VALID_POSITION_get();
  public static readonly string IOSN_MOTION_AS_OPTICAL_SEGMENTS = fbx_wrapperPINVOKE.IOSN_MOTION_AS_OPTICAL_SEGMENTS_get();
  public static readonly string IOSN_MOTION_ASF_SCENE_OWNED = fbx_wrapperPINVOKE.IOSN_MOTION_ASF_SCENE_OWNED_get();
  public static readonly string IOSN_MOTION_MOTION_FROM_GLOBAL_POSITION = fbx_wrapperPINVOKE.IOSN_MOTION_MOTION_FROM_GLOBAL_POSITION_get();
  public static readonly string IOSN_MOTION_GAPS_AS_VALID_DATA = fbx_wrapperPINVOKE.IOSN_MOTION_GAPS_AS_VALID_DATA_get();
  public static readonly string IOSN_MOTION_C3D_REAL_FORMAT = fbx_wrapperPINVOKE.IOSN_MOTION_C3D_REAL_FORMAT_get();
  public static readonly string IOSN_MOTION_CREATE_REFERENCE_NODE = fbx_wrapperPINVOKE.IOSN_MOTION_CREATE_REFERENCE_NODE_get();
  public static readonly string IOSN_MOTION_TRANSLATION = fbx_wrapperPINVOKE.IOSN_MOTION_TRANSLATION_get();
  public static readonly string IOSN_MOTION_BASE_T_IN_OFFSET = fbx_wrapperPINVOKE.IOSN_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IOSN_MOTION_BASE_R_IN_PREROTATION = fbx_wrapperPINVOKE.IOSN_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string IOSN_MOTION_DUMMY_NODES = fbx_wrapperPINVOKE.IOSN_MOTION_DUMMY_NODES_get();
  public static readonly string IOSN_MOTION_LIMITS = fbx_wrapperPINVOKE.IOSN_MOTION_LIMITS_get();
  public static readonly string IOSN_MOTION_FRAME_RATE_USED = fbx_wrapperPINVOKE.IOSN_MOTION_FRAME_RATE_USED_get();
  public static readonly string IOSN_MOTION_FRAME_RANGE = fbx_wrapperPINVOKE.IOSN_MOTION_FRAME_RANGE_get();
  public static readonly string IOSN_MOTION_WRITE_DEFAULT_AS_BASE_TR = fbx_wrapperPINVOKE.IOSN_MOTION_WRITE_DEFAULT_AS_BASE_TR_get();
  public static readonly string IMP_MOB_START = fbx_wrapperPINVOKE.IMP_MOB_START_get();
  public static readonly string IMP_MOB_FRAME_COUNT = fbx_wrapperPINVOKE.IMP_MOB_FRAME_COUNT_get();
  public static readonly string IMP_MOB_FRAME_RATE = fbx_wrapperPINVOKE.IMP_MOB_FRAME_RATE_get();
  public static readonly string IMP_MOB_ACTOR_PREFIX = fbx_wrapperPINVOKE.IMP_MOB_ACTOR_PREFIX_get();
  public static readonly string IMP_MOB_RENAME_DUPLICATE_NAMES = fbx_wrapperPINVOKE.IMP_MOB_RENAME_DUPLICATE_NAMES_get();
  public static readonly string IMP_MOB_EXACT_ZERO_AS_OCCLUDED = fbx_wrapperPINVOKE.IMP_MOB_EXACT_ZERO_AS_OCCLUDED_get();
  public static readonly string IMP_MOB_SET_OCCLUDED_TO_LAST_VALID_POSITION = fbx_wrapperPINVOKE.IMP_MOB_SET_OCCLUDED_TO_LAST_VALID_POSITION_get();
  public static readonly string IMP_MOB_AS_OPTICAL_SEGMENTS = fbx_wrapperPINVOKE.IMP_MOB_AS_OPTICAL_SEGMENTS_get();
  public static readonly string IMP_MOB_ASF_SCENE_OWNED = fbx_wrapperPINVOKE.IMP_MOB_ASF_SCENE_OWNED_get();
  public static readonly string IMP_ACCLAIM_AMC_CREATE_REFERENCE_NODE = fbx_wrapperPINVOKE.IMP_ACCLAIM_AMC_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_ACCLAIM_AMC_MOTION_BASE_T_IN_OFFSET = fbx_wrapperPINVOKE.IMP_ACCLAIM_AMC_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IMP_ACCLAIM_AMC_MOTION_BASE_R_IN_PREROTATION = fbx_wrapperPINVOKE.IMP_ACCLAIM_AMC_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string IMP_ACCLAIM_AMC_DUMMY_NODES = fbx_wrapperPINVOKE.IMP_ACCLAIM_AMC_DUMMY_NODES_get();
  public static readonly string IMP_ACCLAIM_AMC_MOTION_LIMITS = fbx_wrapperPINVOKE.IMP_ACCLAIM_AMC_MOTION_LIMITS_get();
  public static readonly string IMP_ACCLAIM_ASF_CREATE_REFERENCE_NODE = fbx_wrapperPINVOKE.IMP_ACCLAIM_ASF_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_ACCLAIM_ASF_MOTION_BASE_T_IN_OFFSET = fbx_wrapperPINVOKE.IMP_ACCLAIM_ASF_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IMP_ACCLAIM_ASF_MOTION_BASE_R_IN_PREROTATION = fbx_wrapperPINVOKE.IMP_ACCLAIM_ASF_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string IMP_ACCLAIM_ASF_DUMMY_NODES = fbx_wrapperPINVOKE.IMP_ACCLAIM_ASF_DUMMY_NODES_get();
  public static readonly string IMP_ACCLAIM_ASF_MOTION_LIMITS = fbx_wrapperPINVOKE.IMP_ACCLAIM_ASF_MOTION_LIMITS_get();
  public static readonly string IMP_BIOVISION_BVH_CREATE_REFERENCE_NODE = fbx_wrapperPINVOKE.IMP_BIOVISION_BVH_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR_CREATE_REFERENCE_NODE = fbx_wrapperPINVOKE.IMP_MOTIONANALYSIS_HTR_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR_MOTION_BASE_T_IN_OFFSET = fbx_wrapperPINVOKE.IMP_MOTIONANALYSIS_HTR_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR_MOTION_BASE_R_IN_PREROTATION = fbx_wrapperPINVOKE.IMP_MOTIONANALYSIS_HTR_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string EXP_MOB_START = fbx_wrapperPINVOKE.EXP_MOB_START_get();
  public static readonly string EXP_MOB_FRAME_COUNT = fbx_wrapperPINVOKE.EXP_MOB_FRAME_COUNT_get();
  public static readonly string EXP_MOB_FROM_GLOBAL_POSITION = fbx_wrapperPINVOKE.EXP_MOB_FROM_GLOBAL_POSITION_get();
  public static readonly string EXP_MOB_FRAME_RATE = fbx_wrapperPINVOKE.EXP_MOB_FRAME_RATE_get();
  public static readonly string EXP_MOB_GAPS_AS_VALID_DATA = fbx_wrapperPINVOKE.EXP_MOB_GAPS_AS_VALID_DATA_get();
  public static readonly string EXP_MOB_C3D_REAL_FORMAT = fbx_wrapperPINVOKE.EXP_MOB_C3D_REAL_FORMAT_get();
  public static readonly string EXP_MOB_ASF_SCENE_OWNED = fbx_wrapperPINVOKE.EXP_MOB_ASF_SCENE_OWNED_get();
  public static readonly string EXP_ACCLAIM_AMC_MOTION_TRANSLATION = fbx_wrapperPINVOKE.EXP_ACCLAIM_AMC_MOTION_TRANSLATION_get();
  public static readonly string EXP_ACCLAIM_AMC_FRAME_RATE_USED = fbx_wrapperPINVOKE.EXP_ACCLAIM_AMC_FRAME_RATE_USED_get();
  public static readonly string EXP_ACCLAIM_AMC_FRAME_RANGE = fbx_wrapperPINVOKE.EXP_ACCLAIM_AMC_FRAME_RANGE_get();
  public static readonly string EXP_ACCLAIM_AMC_WRITE_DEFAULT_AS_BASE_TR = fbx_wrapperPINVOKE.EXP_ACCLAIM_AMC_WRITE_DEFAULT_AS_BASE_TR_get();
  public static readonly string EXP_ACCLAIM_ASF_MOTION_TRANSLATION = fbx_wrapperPINVOKE.EXP_ACCLAIM_ASF_MOTION_TRANSLATION_get();
  public static readonly string EXP_ACCLAIM_ASF_FRAME_RATE_USED = fbx_wrapperPINVOKE.EXP_ACCLAIM_ASF_FRAME_RATE_USED_get();
  public static readonly string EXP_ACCLAIM_ASF_FRAME_RANGE = fbx_wrapperPINVOKE.EXP_ACCLAIM_ASF_FRAME_RANGE_get();
  public static readonly string EXP_ACCLAIM_ASF_WRITE_DEFAULT_AS_BASE_TR = fbx_wrapperPINVOKE.EXP_ACCLAIM_ASF_WRITE_DEFAULT_AS_BASE_TR_get();
  public static readonly string EXP_BIOVISION_BVH_MOTION_TRANSLATION = fbx_wrapperPINVOKE.EXP_BIOVISION_BVH_MOTION_TRANSLATION_get();
  public static readonly string MODEL_PREFIX = fbx_wrapperPINVOKE.MODEL_PREFIX_get();
  public static readonly string MATERIAL_PREFIX = fbx_wrapperPINVOKE.MATERIAL_PREFIX_get();
  public static readonly string POSE_PREFIX = fbx_wrapperPINVOKE.POSE_PREFIX_get();
  public static readonly string DEFORMER_PREFIX = fbx_wrapperPINVOKE.DEFORMER_PREFIX_get();
  public static readonly string CONTAINER_PREFIX = fbx_wrapperPINVOKE.CONTAINER_PREFIX_get();
  public static readonly string SUBDEFORMER_PREFIX = fbx_wrapperPINVOKE.SUBDEFORMER_PREFIX_get();
  public static readonly string CONSTRAINT_PREFIX = fbx_wrapperPINVOKE.CONSTRAINT_PREFIX_get();
  public static readonly string CONTROLSET_PLUG_PREFIX = fbx_wrapperPINVOKE.CONTROLSET_PLUG_PREFIX_get();
  public static readonly string VIDEO_PREFIX = fbx_wrapperPINVOKE.VIDEO_PREFIX_get();
  public static readonly string TEXTURE_PREFIX = fbx_wrapperPINVOKE.TEXTURE_PREFIX_get();
  public static readonly string THUMBNAIL_PREFIX = fbx_wrapperPINVOKE.THUMBNAIL_PREFIX_get();
  public static readonly string MARKER_SET_PREFIX = fbx_wrapperPINVOKE.MARKER_SET_PREFIX_get();
  public static readonly string GEOMETRY_PREFIX = fbx_wrapperPINVOKE.GEOMETRY_PREFIX_get();
  public static readonly string GEOMETRY_WEIGHTED_MAP_PREFIX = fbx_wrapperPINVOKE.GEOMETRY_WEIGHTED_MAP_PREFIX_get();
  public static readonly string SCENE_PREFIX = fbx_wrapperPINVOKE.SCENE_PREFIX_get();
  public static readonly string CACHE_PREFIX = fbx_wrapperPINVOKE.CACHE_PREFIX_get();
  public static readonly string IMPLEMENTATION_PREFIX = fbx_wrapperPINVOKE.IMPLEMENTATION_PREFIX_get();
  public static readonly string BINDINGTABLE_PREFIX = fbx_wrapperPINVOKE.BINDINGTABLE_PREFIX_get();
  public static readonly string BINDINGOPERATOR_PREFIX = fbx_wrapperPINVOKE.BINDINGOPERATOR_PREFIX_get();
  public static readonly string LAYERED_TEXTURE_PREFIX = fbx_wrapperPINVOKE.LAYERED_TEXTURE_PREFIX_get();
  public static readonly string PROCEDURAL_TEXTURE_PREFIX = fbx_wrapperPINVOKE.PROCEDURAL_TEXTURE_PREFIX_get();
  public static readonly string DOCUMENT_PREFIX = fbx_wrapperPINVOKE.DOCUMENT_PREFIX_get();
  public static readonly string COLLECTION_PREFIX = fbx_wrapperPINVOKE.COLLECTION_PREFIX_get();
  public static readonly string COLLECTION_EXCLUSIVE_PREFIX = fbx_wrapperPINVOKE.COLLECTION_EXCLUSIVE_PREFIX_get();
  public static readonly string NODE_ATTRIBUTE_PREFIX = fbx_wrapperPINVOKE.NODE_ATTRIBUTE_PREFIX_get();
  public static readonly string ENVIRONMENT_PREFIX = fbx_wrapperPINVOKE.ENVIRONMENT_PREFIX_get();
  public static readonly string OBJECTMETADATA_PREFIX = fbx_wrapperPINVOKE.OBJECTMETADATA_PREFIX_get();
  public static readonly string EXPOSURECONTROL_PREFIX = fbx_wrapperPINVOKE.EXPOSURECONTROL_PREFIX_get();
  public static readonly string ANIM_STACK_PREFIX = fbx_wrapperPINVOKE.ANIM_STACK_PREFIX_get();
  public static readonly string ANIM_LAYER_PREFIX = fbx_wrapperPINVOKE.ANIM_LAYER_PREFIX_get();
  public static readonly string ANIM_CURVENODE_PREFIX = fbx_wrapperPINVOKE.ANIM_CURVENODE_PREFIX_get();
  public static readonly string ANIM_CURVE_PREFIX = fbx_wrapperPINVOKE.ANIM_CURVE_PREFIX_get();
  public static readonly string ANIM_EVAL_PREFIX = fbx_wrapperPINVOKE.ANIM_EVAL_PREFIX_get();
  public static readonly string SELECTION_SET_PREFIX = fbx_wrapperPINVOKE.SELECTION_SET_PREFIX_get();
  public static readonly string SELECTION_SET_NODE_PREFIX = fbx_wrapperPINVOKE.SELECTION_SET_NODE_PREFIX_get();
  public static readonly string DISPLAY_LAYER_PREFIX = fbx_wrapperPINVOKE.DISPLAY_LAYER_PREFIX_get();
  public static readonly string SCENEREFERENCE_PREFIX = fbx_wrapperPINVOKE.SCENEREFERENCE_PREFIX_get();
  public static readonly string ADSK_ENVIRONMENT_PREFIX = fbx_wrapperPINVOKE.ADSK_ENVIRONMENT_PREFIX_get();
  public static readonly string ADSK_LIGHT_PREFIX = fbx_wrapperPINVOKE.ADSK_LIGHT_PREFIX_get();
  public static readonly string ADSK_PROCEDURALGEOMETRY_PREFIX = fbx_wrapperPINVOKE.ADSK_PROCEDURALGEOMETRY_PREFIX_get();
  public static readonly string ADSK_SURFACEMATERIAL_PREFIX = fbx_wrapperPINVOKE.ADSK_SURFACEMATERIAL_PREFIX_get();
  public static readonly string ADSK_TEXTURE_PREFIX = fbx_wrapperPINVOKE.ADSK_TEXTURE_PREFIX_get();
  public static readonly string ADSK_SWATCHSCENE_PREFIX = fbx_wrapperPINVOKE.ADSK_SWATCHSCENE_PREFIX_get();
  public static readonly string Character_Hips = fbx_wrapperPINVOKE.Character_Hips_get();
  public static readonly string Character_LeftUpLeg = fbx_wrapperPINVOKE.Character_LeftUpLeg_get();
  public static readonly string Character_LeftLeg = fbx_wrapperPINVOKE.Character_LeftLeg_get();
  public static readonly string Character_LeftFoot = fbx_wrapperPINVOKE.Character_LeftFoot_get();
  public static readonly string Character_RightUpLeg = fbx_wrapperPINVOKE.Character_RightUpLeg_get();
  public static readonly string Character_RightLeg = fbx_wrapperPINVOKE.Character_RightLeg_get();
  public static readonly string Character_RightFoot = fbx_wrapperPINVOKE.Character_RightFoot_get();
  public static readonly string Character_Spine = fbx_wrapperPINVOKE.Character_Spine_get();
  public static readonly string Character_LeftArm = fbx_wrapperPINVOKE.Character_LeftArm_get();
  public static readonly string Character_LeftForeArm = fbx_wrapperPINVOKE.Character_LeftForeArm_get();
  public static readonly string Character_LeftHand = fbx_wrapperPINVOKE.Character_LeftHand_get();
  public static readonly string Character_RightArm = fbx_wrapperPINVOKE.Character_RightArm_get();
  public static readonly string Character_RightForeArm = fbx_wrapperPINVOKE.Character_RightForeArm_get();
  public static readonly string Character_RightHand = fbx_wrapperPINVOKE.Character_RightHand_get();
  public static readonly string Character_Head = fbx_wrapperPINVOKE.Character_Head_get();
  public static readonly string Character_LeftToeBase = fbx_wrapperPINVOKE.Character_LeftToeBase_get();
  public static readonly string Character_RightToeBase = fbx_wrapperPINVOKE.Character_RightToeBase_get();
  public static readonly string Character_LeftShoulder = fbx_wrapperPINVOKE.Character_LeftShoulder_get();
  public static readonly string Character_RightShoulder = fbx_wrapperPINVOKE.Character_RightShoulder_get();
  public static readonly string Character_LeftShoulderExtra = fbx_wrapperPINVOKE.Character_LeftShoulderExtra_get();
  public static readonly string Character_RightShoulderExtra = fbx_wrapperPINVOKE.Character_RightShoulderExtra_get();
  public static readonly string Character_Neck = fbx_wrapperPINVOKE.Character_Neck_get();
  public static readonly string Character_LeftFingerBase = fbx_wrapperPINVOKE.Character_LeftFingerBase_get();
  public static readonly string Character_RightFingerBase = fbx_wrapperPINVOKE.Character_RightFingerBase_get();
  public static readonly string Character_Spine1 = fbx_wrapperPINVOKE.Character_Spine1_get();
  public static readonly string Character_Spine2 = fbx_wrapperPINVOKE.Character_Spine2_get();
  public static readonly string Character_Spine3 = fbx_wrapperPINVOKE.Character_Spine3_get();
  public static readonly string Character_Spine4 = fbx_wrapperPINVOKE.Character_Spine4_get();
  public static readonly string Character_Spine5 = fbx_wrapperPINVOKE.Character_Spine5_get();
  public static readonly string Character_Spine6 = fbx_wrapperPINVOKE.Character_Spine6_get();
  public static readonly string Character_Spine7 = fbx_wrapperPINVOKE.Character_Spine7_get();
  public static readonly string Character_Spine8 = fbx_wrapperPINVOKE.Character_Spine8_get();
  public static readonly string Character_Spine9 = fbx_wrapperPINVOKE.Character_Spine9_get();
  public static readonly string Character_Neck1 = fbx_wrapperPINVOKE.Character_Neck1_get();
  public static readonly string Character_Neck2 = fbx_wrapperPINVOKE.Character_Neck2_get();
  public static readonly string Character_Neck3 = fbx_wrapperPINVOKE.Character_Neck3_get();
  public static readonly string Character_Neck4 = fbx_wrapperPINVOKE.Character_Neck4_get();
  public static readonly string Character_Neck5 = fbx_wrapperPINVOKE.Character_Neck5_get();
  public static readonly string Character_Neck6 = fbx_wrapperPINVOKE.Character_Neck6_get();
  public static readonly string Character_Neck7 = fbx_wrapperPINVOKE.Character_Neck7_get();
  public static readonly string Character_Neck8 = fbx_wrapperPINVOKE.Character_Neck8_get();
  public static readonly string Character_Neck9 = fbx_wrapperPINVOKE.Character_Neck9_get();
  public static readonly string Character_LeftUpLegRoll = fbx_wrapperPINVOKE.Character_LeftUpLegRoll_get();
  public static readonly string Character_LeftLegRoll = fbx_wrapperPINVOKE.Character_LeftLegRoll_get();
  public static readonly string Character_RightUpLegRoll = fbx_wrapperPINVOKE.Character_RightUpLegRoll_get();
  public static readonly string Character_RightLegRoll = fbx_wrapperPINVOKE.Character_RightLegRoll_get();
  public static readonly string Character_LeftArmRoll = fbx_wrapperPINVOKE.Character_LeftArmRoll_get();
  public static readonly string Character_LeftForeArmRoll = fbx_wrapperPINVOKE.Character_LeftForeArmRoll_get();
  public static readonly string Character_RightArmRoll = fbx_wrapperPINVOKE.Character_RightArmRoll_get();
  public static readonly string Character_RightForeArmRoll = fbx_wrapperPINVOKE.Character_RightForeArmRoll_get();
  public static readonly string Character_LeftUpLegRollEx = fbx_wrapperPINVOKE.Character_LeftUpLegRollEx_get();
  public static readonly string Character_LeftLegRollEx = fbx_wrapperPINVOKE.Character_LeftLegRollEx_get();
  public static readonly string Character_RightUpLegRollEx = fbx_wrapperPINVOKE.Character_RightUpLegRollEx_get();
  public static readonly string Character_RightLegRollEx = fbx_wrapperPINVOKE.Character_RightLegRollEx_get();
  public static readonly string Character_LeftArmRollEx = fbx_wrapperPINVOKE.Character_LeftArmRollEx_get();
  public static readonly string Character_LeftForearmRollEx = fbx_wrapperPINVOKE.Character_LeftForearmRollEx_get();
  public static readonly string Character_RightArmRollEx = fbx_wrapperPINVOKE.Character_RightArmRollEx_get();
  public static readonly string Character_RightForearmRollEx = fbx_wrapperPINVOKE.Character_RightForearmRollEx_get();
  public static readonly string Character_Props0 = fbx_wrapperPINVOKE.Character_Props0_get();
  public static readonly string Character_Props1 = fbx_wrapperPINVOKE.Character_Props1_get();
  public static readonly string Character_Props2 = fbx_wrapperPINVOKE.Character_Props2_get();
  public static readonly string Character_Props3 = fbx_wrapperPINVOKE.Character_Props3_get();
  public static readonly string Character_Props4 = fbx_wrapperPINVOKE.Character_Props4_get();
  public static readonly string Character_LeftHandThumb1 = fbx_wrapperPINVOKE.Character_LeftHandThumb1_get();
  public static readonly string Character_LeftHandThumb2 = fbx_wrapperPINVOKE.Character_LeftHandThumb2_get();
  public static readonly string Character_LeftHandThumb3 = fbx_wrapperPINVOKE.Character_LeftHandThumb3_get();
  public static readonly string Character_LeftHandThumb4 = fbx_wrapperPINVOKE.Character_LeftHandThumb4_get();
  public static readonly string Character_LeftHandIndex1 = fbx_wrapperPINVOKE.Character_LeftHandIndex1_get();
  public static readonly string Character_LeftHandIndex2 = fbx_wrapperPINVOKE.Character_LeftHandIndex2_get();
  public static readonly string Character_LeftHandIndex3 = fbx_wrapperPINVOKE.Character_LeftHandIndex3_get();
  public static readonly string Character_LeftHandIndex4 = fbx_wrapperPINVOKE.Character_LeftHandIndex4_get();
  public static readonly string Character_LeftHandMiddle1 = fbx_wrapperPINVOKE.Character_LeftHandMiddle1_get();
  public static readonly string Character_LeftHandMiddle2 = fbx_wrapperPINVOKE.Character_LeftHandMiddle2_get();
  public static readonly string Character_LeftHandMiddle3 = fbx_wrapperPINVOKE.Character_LeftHandMiddle3_get();
  public static readonly string Character_LeftHandMiddle4 = fbx_wrapperPINVOKE.Character_LeftHandMiddle4_get();
  public static readonly string Character_LeftHandRing1 = fbx_wrapperPINVOKE.Character_LeftHandRing1_get();
  public static readonly string Character_LeftHandRing2 = fbx_wrapperPINVOKE.Character_LeftHandRing2_get();
  public static readonly string Character_LeftHandRing3 = fbx_wrapperPINVOKE.Character_LeftHandRing3_get();
  public static readonly string Character_LeftHandRing4 = fbx_wrapperPINVOKE.Character_LeftHandRing4_get();
  public static readonly string Character_LeftHandPinky1 = fbx_wrapperPINVOKE.Character_LeftHandPinky1_get();
  public static readonly string Character_LeftHandPinky2 = fbx_wrapperPINVOKE.Character_LeftHandPinky2_get();
  public static readonly string Character_LeftHandPinky3 = fbx_wrapperPINVOKE.Character_LeftHandPinky3_get();
  public static readonly string Character_LeftHandPinky4 = fbx_wrapperPINVOKE.Character_LeftHandPinky4_get();
  public static readonly string Character_LeftHandExtraFinger1 = fbx_wrapperPINVOKE.Character_LeftHandExtraFinger1_get();
  public static readonly string Character_LeftHandExtraFinger2 = fbx_wrapperPINVOKE.Character_LeftHandExtraFinger2_get();
  public static readonly string Character_LeftHandExtraFinger3 = fbx_wrapperPINVOKE.Character_LeftHandExtraFinger3_get();
  public static readonly string Character_LeftHandExtraFinger4 = fbx_wrapperPINVOKE.Character_LeftHandExtraFinger4_get();
  public static readonly string Character_RightHandThumb1 = fbx_wrapperPINVOKE.Character_RightHandThumb1_get();
  public static readonly string Character_RightHandThumb2 = fbx_wrapperPINVOKE.Character_RightHandThumb2_get();
  public static readonly string Character_RightHandThumb3 = fbx_wrapperPINVOKE.Character_RightHandThumb3_get();
  public static readonly string Character_RightHandThumb4 = fbx_wrapperPINVOKE.Character_RightHandThumb4_get();
  public static readonly string Character_RightHandIndex1 = fbx_wrapperPINVOKE.Character_RightHandIndex1_get();
  public static readonly string Character_RightHandIndex2 = fbx_wrapperPINVOKE.Character_RightHandIndex2_get();
  public static readonly string Character_RightHandIndex3 = fbx_wrapperPINVOKE.Character_RightHandIndex3_get();
  public static readonly string Character_RightHandIndex4 = fbx_wrapperPINVOKE.Character_RightHandIndex4_get();
  public static readonly string Character_RightHandMiddle1 = fbx_wrapperPINVOKE.Character_RightHandMiddle1_get();
  public static readonly string Character_RightHandMiddle2 = fbx_wrapperPINVOKE.Character_RightHandMiddle2_get();
  public static readonly string Character_RightHandMiddle3 = fbx_wrapperPINVOKE.Character_RightHandMiddle3_get();
  public static readonly string Character_RightHandMiddle4 = fbx_wrapperPINVOKE.Character_RightHandMiddle4_get();
  public static readonly string Character_RightHandRing1 = fbx_wrapperPINVOKE.Character_RightHandRing1_get();
  public static readonly string Character_RightHandRing2 = fbx_wrapperPINVOKE.Character_RightHandRing2_get();
  public static readonly string Character_RightHandRing3 = fbx_wrapperPINVOKE.Character_RightHandRing3_get();
  public static readonly string Character_RightHandRing4 = fbx_wrapperPINVOKE.Character_RightHandRing4_get();
  public static readonly string Character_RightHandPinky1 = fbx_wrapperPINVOKE.Character_RightHandPinky1_get();
  public static readonly string Character_RightHandPinky2 = fbx_wrapperPINVOKE.Character_RightHandPinky2_get();
  public static readonly string Character_RightHandPinky3 = fbx_wrapperPINVOKE.Character_RightHandPinky3_get();
  public static readonly string Character_RightHandPinky4 = fbx_wrapperPINVOKE.Character_RightHandPinky4_get();
  public static readonly string Character_RightHandExtraFinger1 = fbx_wrapperPINVOKE.Character_RightHandExtraFinger1_get();
  public static readonly string Character_RightHandExtraFinger2 = fbx_wrapperPINVOKE.Character_RightHandExtraFinger2_get();
  public static readonly string Character_RightHandExtraFinger3 = fbx_wrapperPINVOKE.Character_RightHandExtraFinger3_get();
  public static readonly string Character_RightHandExtraFinger4 = fbx_wrapperPINVOKE.Character_RightHandExtraFinger4_get();
  public static readonly string Character_LeftFootThumb1 = fbx_wrapperPINVOKE.Character_LeftFootThumb1_get();
  public static readonly string Character_LeftFootThumb2 = fbx_wrapperPINVOKE.Character_LeftFootThumb2_get();
  public static readonly string Character_LeftFootThumb3 = fbx_wrapperPINVOKE.Character_LeftFootThumb3_get();
  public static readonly string Character_LeftFootThumb4 = fbx_wrapperPINVOKE.Character_LeftFootThumb4_get();
  public static readonly string Character_LeftFootIndex1 = fbx_wrapperPINVOKE.Character_LeftFootIndex1_get();
  public static readonly string Character_LeftFootIndex2 = fbx_wrapperPINVOKE.Character_LeftFootIndex2_get();
  public static readonly string Character_LeftFootIndex3 = fbx_wrapperPINVOKE.Character_LeftFootIndex3_get();
  public static readonly string Character_LeftFootIndex4 = fbx_wrapperPINVOKE.Character_LeftFootIndex4_get();
  public static readonly string Character_LeftFootMiddle1 = fbx_wrapperPINVOKE.Character_LeftFootMiddle1_get();
  public static readonly string Character_LeftFootMiddle2 = fbx_wrapperPINVOKE.Character_LeftFootMiddle2_get();
  public static readonly string Character_LeftFootMiddle3 = fbx_wrapperPINVOKE.Character_LeftFootMiddle3_get();
  public static readonly string Character_LeftFootMiddle4 = fbx_wrapperPINVOKE.Character_LeftFootMiddle4_get();
  public static readonly string Character_LeftFootRing1 = fbx_wrapperPINVOKE.Character_LeftFootRing1_get();
  public static readonly string Character_LeftFootRing2 = fbx_wrapperPINVOKE.Character_LeftFootRing2_get();
  public static readonly string Character_LeftFootRing3 = fbx_wrapperPINVOKE.Character_LeftFootRing3_get();
  public static readonly string Character_LeftFootRing4 = fbx_wrapperPINVOKE.Character_LeftFootRing4_get();
  public static readonly string Character_LeftFootPinky1 = fbx_wrapperPINVOKE.Character_LeftFootPinky1_get();
  public static readonly string Character_LeftFootPinky2 = fbx_wrapperPINVOKE.Character_LeftFootPinky2_get();
  public static readonly string Character_LeftFootPinky3 = fbx_wrapperPINVOKE.Character_LeftFootPinky3_get();
  public static readonly string Character_LeftFootPinky4 = fbx_wrapperPINVOKE.Character_LeftFootPinky4_get();
  public static readonly string Character_LeftFootExtraFinger1 = fbx_wrapperPINVOKE.Character_LeftFootExtraFinger1_get();
  public static readonly string Character_LeftFootExtraFinger2 = fbx_wrapperPINVOKE.Character_LeftFootExtraFinger2_get();
  public static readonly string Character_LeftFootExtraFinger3 = fbx_wrapperPINVOKE.Character_LeftFootExtraFinger3_get();
  public static readonly string Character_LeftFootExtraFinger4 = fbx_wrapperPINVOKE.Character_LeftFootExtraFinger4_get();
  public static readonly string Character_RightFootThumb1 = fbx_wrapperPINVOKE.Character_RightFootThumb1_get();
  public static readonly string Character_RightFootThumb2 = fbx_wrapperPINVOKE.Character_RightFootThumb2_get();
  public static readonly string Character_RightFootThumb3 = fbx_wrapperPINVOKE.Character_RightFootThumb3_get();
  public static readonly string Character_RightFootThumb4 = fbx_wrapperPINVOKE.Character_RightFootThumb4_get();
  public static readonly string Character_RightFootIndex1 = fbx_wrapperPINVOKE.Character_RightFootIndex1_get();
  public static readonly string Character_RightFootIndex2 = fbx_wrapperPINVOKE.Character_RightFootIndex2_get();
  public static readonly string Character_RightFootIndex3 = fbx_wrapperPINVOKE.Character_RightFootIndex3_get();
  public static readonly string Character_RightFootIndex4 = fbx_wrapperPINVOKE.Character_RightFootIndex4_get();
  public static readonly string Character_RightFootMiddle1 = fbx_wrapperPINVOKE.Character_RightFootMiddle1_get();
  public static readonly string Character_RightFootMiddle2 = fbx_wrapperPINVOKE.Character_RightFootMiddle2_get();
  public static readonly string Character_RightFootMiddle3 = fbx_wrapperPINVOKE.Character_RightFootMiddle3_get();
  public static readonly string Character_RightFootMiddle4 = fbx_wrapperPINVOKE.Character_RightFootMiddle4_get();
  public static readonly string Character_RightFootRing1 = fbx_wrapperPINVOKE.Character_RightFootRing1_get();
  public static readonly string Character_RightFootRing2 = fbx_wrapperPINVOKE.Character_RightFootRing2_get();
  public static readonly string Character_RightFootRing3 = fbx_wrapperPINVOKE.Character_RightFootRing3_get();
  public static readonly string Character_RightFootRing4 = fbx_wrapperPINVOKE.Character_RightFootRing4_get();
  public static readonly string Character_RightFootPinky1 = fbx_wrapperPINVOKE.Character_RightFootPinky1_get();
  public static readonly string Character_RightFootPinky2 = fbx_wrapperPINVOKE.Character_RightFootPinky2_get();
  public static readonly string Character_RightFootPinky3 = fbx_wrapperPINVOKE.Character_RightFootPinky3_get();
  public static readonly string Character_RightFootPinky4 = fbx_wrapperPINVOKE.Character_RightFootPinky4_get();
  public static readonly string Character_RightFootExtraFinger1 = fbx_wrapperPINVOKE.Character_RightFootExtraFinger1_get();
  public static readonly string Character_RightFootExtraFinger2 = fbx_wrapperPINVOKE.Character_RightFootExtraFinger2_get();
  public static readonly string Character_RightFootExtraFinger3 = fbx_wrapperPINVOKE.Character_RightFootExtraFinger3_get();
  public static readonly string Character_RightFootExtraFinger4 = fbx_wrapperPINVOKE.Character_RightFootExtraFinger4_get();
  public static readonly string Character_LeftInHandThumb = fbx_wrapperPINVOKE.Character_LeftInHandThumb_get();
  public static readonly string Character_LeftInHandIndex = fbx_wrapperPINVOKE.Character_LeftInHandIndex_get();
  public static readonly string Character_LeftInHandMiddle = fbx_wrapperPINVOKE.Character_LeftInHandMiddle_get();
  public static readonly string Character_LeftInHandRing = fbx_wrapperPINVOKE.Character_LeftInHandRing_get();
  public static readonly string Character_LeftInHandPinky = fbx_wrapperPINVOKE.Character_LeftInHandPinky_get();
  public static readonly string Character_LeftInHandExtraFinger = fbx_wrapperPINVOKE.Character_LeftInHandExtraFinger_get();
  public static readonly string Character_RightInHandThumb = fbx_wrapperPINVOKE.Character_RightInHandThumb_get();
  public static readonly string Character_RightInHandIndex = fbx_wrapperPINVOKE.Character_RightInHandIndex_get();
  public static readonly string Character_RightInHandMiddle = fbx_wrapperPINVOKE.Character_RightInHandMiddle_get();
  public static readonly string Character_RightInHandRing = fbx_wrapperPINVOKE.Character_RightInHandRing_get();
  public static readonly string Character_RightInHandPinky = fbx_wrapperPINVOKE.Character_RightInHandPinky_get();
  public static readonly string Character_RightInHandExtraFinger = fbx_wrapperPINVOKE.Character_RightInHandExtraFinger_get();
  public static readonly string Character_LeftInFootThumb = fbx_wrapperPINVOKE.Character_LeftInFootThumb_get();
  public static readonly string Character_LeftInFootIndex = fbx_wrapperPINVOKE.Character_LeftInFootIndex_get();
  public static readonly string Character_LeftInFootMiddle = fbx_wrapperPINVOKE.Character_LeftInFootMiddle_get();
  public static readonly string Character_LeftInFootRing = fbx_wrapperPINVOKE.Character_LeftInFootRing_get();
  public static readonly string Character_LeftInFootPinky = fbx_wrapperPINVOKE.Character_LeftInFootPinky_get();
  public static readonly string Character_LeftInFootExtraFinger = fbx_wrapperPINVOKE.Character_LeftInFootExtraFinger_get();
  public static readonly string Character_RightInFootThumb = fbx_wrapperPINVOKE.Character_RightInFootThumb_get();
  public static readonly string Character_RightInFootIndex = fbx_wrapperPINVOKE.Character_RightInFootIndex_get();
  public static readonly string Character_RightInFootMiddle = fbx_wrapperPINVOKE.Character_RightInFootMiddle_get();
  public static readonly string Character_RightInFootRing = fbx_wrapperPINVOKE.Character_RightInFootRing_get();
  public static readonly string Character_RightInFootPinky = fbx_wrapperPINVOKE.Character_RightInFootPinky_get();
  public static readonly string Character_RightInFootExtraFinger = fbx_wrapperPINVOKE.Character_RightInFootExtraFinger_get();
  public static readonly string Character_GameModeParentLeftHipRoll = fbx_wrapperPINVOKE.Character_GameModeParentLeftHipRoll_get();
  public static readonly string Character_GameModeParentLeftKnee = fbx_wrapperPINVOKE.Character_GameModeParentLeftKnee_get();
  public static readonly string Character_GameModeParentLeftKneeRoll = fbx_wrapperPINVOKE.Character_GameModeParentLeftKneeRoll_get();
  public static readonly string Character_GameModeParentRightHipRoll = fbx_wrapperPINVOKE.Character_GameModeParentRightHipRoll_get();
  public static readonly string Character_GameModeParentRightKnee = fbx_wrapperPINVOKE.Character_GameModeParentRightKnee_get();
  public static readonly string Character_GameModeParentRightKneeRoll = fbx_wrapperPINVOKE.Character_GameModeParentRightKneeRoll_get();
  public static readonly string Character_GameModeParentLeftShoulderRoll = fbx_wrapperPINVOKE.Character_GameModeParentLeftShoulderRoll_get();
  public static readonly string Character_GameModeParentLeftElbow = fbx_wrapperPINVOKE.Character_GameModeParentLeftElbow_get();
  public static readonly string Character_GameModeParentLeftElbowRoll = fbx_wrapperPINVOKE.Character_GameModeParentLeftElbowRoll_get();
  public static readonly string Character_GameModeParentRightShoulderRoll = fbx_wrapperPINVOKE.Character_GameModeParentRightShoulderRoll_get();
  public static readonly string Character_GameModeParentRightElbow = fbx_wrapperPINVOKE.Character_GameModeParentRightElbow_get();
  public static readonly string Character_GameModeParentRightElbowRoll = fbx_wrapperPINVOKE.Character_GameModeParentRightElbowRoll_get();
  public static readonly string Character_LeftFloorContact = fbx_wrapperPINVOKE.Character_LeftFloorContact_get();
  public static readonly string Character_RightFloorContact = fbx_wrapperPINVOKE.Character_RightFloorContact_get();
  public static readonly string Character_LeftHandFloorContact = fbx_wrapperPINVOKE.Character_LeftHandFloorContact_get();
  public static readonly string Character_RightHandFloorContact = fbx_wrapperPINVOKE.Character_RightHandFloorContact_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_HLSL = fbx_wrapperPINVOKE.FBXSDK_SHADING_LANGUAGE_HLSL_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_GLSL = fbx_wrapperPINVOKE.FBXSDK_SHADING_LANGUAGE_GLSL_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_CGFX = fbx_wrapperPINVOKE.FBXSDK_SHADING_LANGUAGE_CGFX_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_SFX = fbx_wrapperPINVOKE.FBXSDK_SHADING_LANGUAGE_SFX_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_MRSL = fbx_wrapperPINVOKE.FBXSDK_SHADING_LANGUAGE_MRSL_get();
  public static readonly string FBXSDK_RENDERING_API_DIRECTX = fbx_wrapperPINVOKE.FBXSDK_RENDERING_API_DIRECTX_get();
  public static readonly string FBXSDK_RENDERING_API_OPENGL = fbx_wrapperPINVOKE.FBXSDK_RENDERING_API_OPENGL_get();
  public static readonly string FBXSDK_RENDERING_API_MENTALRAY = fbx_wrapperPINVOKE.FBXSDK_RENDERING_API_MENTALRAY_get();
  public static readonly string FBXSDK_RENDERING_API_PREVIEW = fbx_wrapperPINVOKE.FBXSDK_RENDERING_API_PREVIEW_get();
  public static readonly string FBXSDK_IMPLEMENTATION_PREVIEW = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_PREVIEW_get();
  public static readonly string FBXSDK_IMPLEMENTATION_MENTALRAY = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_MENTALRAY_get();
  public static readonly string FBXSDK_IMPLEMENTATION_CGFX = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_CGFX_get();
  public static readonly string FBXSDK_IMPLEMENTATION_HLSL = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_HLSL_get();
  public static readonly string FBXSDK_IMPLEMENTATION_SFX = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_SFX_get();
  public static readonly string FBXSDK_IMPLEMENTATION_OGS = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_OGS_get();
  public static readonly string FBXSDK_IMPLEMENTATION_NONE = fbx_wrapperPINVOKE.FBXSDK_IMPLEMENTATION_NONE_get();
  public static readonly string FBXSDK_TYPE_ENVIRONMENT = fbx_wrapperPINVOKE.FBXSDK_TYPE_ENVIRONMENT_get();
  public static readonly string FBXSDK_TYPE_LIGHT = fbx_wrapperPINVOKE.FBXSDK_TYPE_LIGHT_get();
  public static readonly string FBXSDK_TYPE_PROCEDURALGEOMETRY = fbx_wrapperPINVOKE.FBXSDK_TYPE_PROCEDURALGEOMETRY_get();
  public static readonly string FBXSDK_TYPE_SURFACEMATERIAL = fbx_wrapperPINVOKE.FBXSDK_TYPE_SURFACEMATERIAL_get();
  public static readonly string FBXSDK_TYPE_TEXTURE = fbx_wrapperPINVOKE.FBXSDK_TYPE_TEXTURE_get();
  public static readonly string FBXSDK_TYPE_SWATCHSCENE = fbx_wrapperPINVOKE.FBXSDK_TYPE_SWATCHSCENE_get();
  public static readonly string ADSK_TYPE_ENVIRONMENT = fbx_wrapperPINVOKE.ADSK_TYPE_ENVIRONMENT_get();
  public static readonly string ADSK_TYPE_LIGHT = fbx_wrapperPINVOKE.ADSK_TYPE_LIGHT_get();
  public static readonly string ADSK_TYPE_PROCEDURALGEOMETRY = fbx_wrapperPINVOKE.ADSK_TYPE_PROCEDURALGEOMETRY_get();
  public static readonly string ADSK_TYPE_SURFACEMATERIAL = fbx_wrapperPINVOKE.ADSK_TYPE_SURFACEMATERIAL_get();
  public static readonly string ADSK_TYPE_TEXTURE = fbx_wrapperPINVOKE.ADSK_TYPE_TEXTURE_get();
  public static readonly string ADSK_TYPE_SWATCHSCENE = fbx_wrapperPINVOKE.ADSK_TYPE_SWATCHSCENE_get();
  public static readonly string ADSK_UI_DEFINITION_URL = fbx_wrapperPINVOKE.ADSK_UI_DEFINITION_URL_get();
  public static readonly string NAMECLASH1_KEY = fbx_wrapperPINVOKE.NAMECLASH1_KEY_get();
  public static readonly string NAMECLASH2_KEY = fbx_wrapperPINVOKE.NAMECLASH2_KEY_get();
  public static readonly string UPPERTOLOWER_KEY = fbx_wrapperPINVOKE.UPPERTOLOWER_KEY_get();
  public static readonly string LOWERTOUPPER_KEY = fbx_wrapperPINVOKE.LOWERTOUPPER_KEY_get();
  public static readonly int FBXSDK_SYSTEM_UNIT_PREDEF_COUNT = fbx_wrapperPINVOKE.FBXSDK_SYSTEM_UNIT_PREDEF_COUNT_get();
  public static readonly double FBXSDK_TIME_ASSERT_EPSILON = fbx_wrapperPINVOKE.FBXSDK_TIME_ASSERT_EPSILON_get();
  public static readonly int FBXSDK_TIME_FORWARD = fbx_wrapperPINVOKE.FBXSDK_TIME_FORWARD_get();
  public static readonly int FBXSDK_TIME_BACKWARD = fbx_wrapperPINVOKE.FBXSDK_TIME_BACKWARD_get();
  public static readonly int FBX_FILE_VERSION_2000 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_2000_get();
  public static readonly int FBX_FILE_VERSION_2001 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_2001_get();
  public static readonly int FBX_FILE_VERSION_3000 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_3000_get();
  public static readonly int FBX_FILE_VERSION_3001 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_3001_get();
  public static readonly int FBX_FILE_VERSION_4000 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_4000_get();
  public static readonly int FBX_FILE_VERSION_4001 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_4001_get();
  public static readonly int FBX_FILE_VERSION_4050 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_4050_get();
  public static readonly int FBX_FILE_VERSION_5000 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_5000_get();
  public static readonly int FBX_FILE_VERSION_5800 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_5800_get();
  public static readonly int FBX_FILE_VERSION_6000 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_6000_get();
  public static readonly int FBX_FILE_VERSION_6100 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_6100_get();
  public static readonly int FBX_FILE_VERSION_7000 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7000_get();
  public static readonly int FBX_FILE_VERSION_7099 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7099_get();
  public static readonly int FBX_FILE_VERSION_7100 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7100_get();
  public static readonly int FBX_FILE_VERSION_7200 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7200_get();
  public static readonly int FBX_FILE_VERSION_7300 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7300_get();
  public static readonly int FBX_FILE_VERSION_7400 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7400_get();
  public static readonly int FBX_FILE_VERSION_7500 = fbx_wrapperPINVOKE.FBX_FILE_VERSION_7500_get();
  public static readonly string FBX_53_MB55_COMPATIBLE = fbx_wrapperPINVOKE.FBX_53_MB55_COMPATIBLE_get();
  public static readonly string FBX_60_COMPATIBLE = fbx_wrapperPINVOKE.FBX_60_COMPATIBLE_get();
  public static readonly string FBX_2005_08_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2005_08_COMPATIBLE_get();
  public static readonly string FBX_2006_02_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2006_02_COMPATIBLE_get();
  public static readonly string FBX_2006_08_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2006_08_COMPATIBLE_get();
  public static readonly string FBX_2006_11_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2006_11_COMPATIBLE_get();
  public static readonly string FBX_2009_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2009_00_COMPATIBLE_get();
  public static readonly string FBX_2009_00_V7_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2009_00_V7_COMPATIBLE_get();
  public static readonly string FBX_2010_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2010_00_COMPATIBLE_get();
  public static readonly string FBX_2011_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2011_00_COMPATIBLE_get();
  public static readonly string FBX_2012_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2012_00_COMPATIBLE_get();
  public static readonly string FBX_2013_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2013_00_COMPATIBLE_get();
  public static readonly string FBX_2014_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2014_00_COMPATIBLE_get();
  public static readonly string FBX_2016_00_COMPATIBLE = fbx_wrapperPINVOKE.FBX_2016_00_COMPATIBLE_get();
  public static readonly int FBX_DEFAULT_FILE_VERSION = fbx_wrapperPINVOKE.FBX_DEFAULT_FILE_VERSION_get();
  public static readonly string FBX_DEFAULT_FILE_COMPATIBILITY = fbx_wrapperPINVOKE.FBX_DEFAULT_FILE_COMPATIBILITY_get();
  public static readonly int FBX_NO_SECTION = fbx_wrapperPINVOKE.FBX_NO_SECTION_get();
  public static readonly int FBX_MAIN_SECTION = fbx_wrapperPINVOKE.FBX_MAIN_SECTION_get();
  public static readonly int FBX_EXTENSION_SECTION_0 = fbx_wrapperPINVOKE.FBX_EXTENSION_SECTION_0_get();

  public static readonly int FBXSDK_QUERY_UNIQUE_ID = fbx_wrapperPINVOKE.FBXSDK_QUERY_UNIQUE_ID_get();
  public static readonly double FBXSDK_PI = fbx_wrapperPINVOKE.FBXSDK_PI_get();
  public static readonly double FBXSDK_PI_DIV_2 = fbx_wrapperPINVOKE.FBXSDK_PI_DIV_2_get();
  public static readonly double FBXSDK_PI_DIV_180 = fbx_wrapperPINVOKE.FBXSDK_PI_DIV_180_get();
  public static readonly double FBXSDK_180_DIV_PI = fbx_wrapperPINVOKE.FBXSDK_180_DIV_PI_get();
  public static readonly double FBXSDK_1_DIV_LN2 = fbx_wrapperPINVOKE.FBXSDK_1_DIV_LN2_get();
  public static readonly double FBXSDK_DEG_TO_RAD = fbx_wrapperPINVOKE.FBXSDK_DEG_TO_RAD_get();
  public static readonly double FBXSDK_RAD_TO_DEG = fbx_wrapperPINVOKE.FBXSDK_RAD_TO_DEG_get();
  public static readonly double FBXSDK_IN_TO_CM = fbx_wrapperPINVOKE.FBXSDK_IN_TO_CM_get();
  public static readonly double FBXSDK_MM_TO_CM = fbx_wrapperPINVOKE.FBXSDK_MM_TO_CM_get();
  public static readonly double FBXSDK_CM_TO_IN = fbx_wrapperPINVOKE.FBXSDK_CM_TO_IN_get();
  public static readonly double FBXSDK_IN_TO_MM = fbx_wrapperPINVOKE.FBXSDK_IN_TO_MM_get();
  public static readonly double FBXSDK_MM_TO_IN = fbx_wrapperPINVOKE.FBXSDK_MM_TO_IN_get();
  public static readonly double FBXSDK_FT_TO_M = fbx_wrapperPINVOKE.FBXSDK_FT_TO_M_get();
  public static readonly double FBXSDK_M_TO_FT = fbx_wrapperPINVOKE.FBXSDK_M_TO_FT_get();
  public static readonly int FBXSDK_YD_TO_FT = fbx_wrapperPINVOKE.FBXSDK_YD_TO_FT_get();
  public static readonly double FBXSDK_FT_TO_YD = fbx_wrapperPINVOKE.FBXSDK_FT_TO_YD_get();
  public static readonly double FBXSDK_KM_TO_MILE = fbx_wrapperPINVOKE.FBXSDK_KM_TO_MILE_get();
  public static readonly double FBXSDK_MILE_TO_KM = fbx_wrapperPINVOKE.FBXSDK_MILE_TO_KM_get();
  public static readonly double FBXSDK_YD_TO_M = fbx_wrapperPINVOKE.FBXSDK_YD_TO_M_get();
  public static readonly double FBXSDK_M_TO_YD = fbx_wrapperPINVOKE.FBXSDK_M_TO_YD_get();
  public static readonly int FBXSDK_PROPERTY_ID_NULL = fbx_wrapperPINVOKE.FBXSDK_PROPERTY_ID_NULL_get();
  public static readonly int FBXSDK_PROPERTY_ID_ROOT = fbx_wrapperPINVOKE.FBXSDK_PROPERTY_ID_ROOT_get();
  public static readonly string FBXSDK_IO_END_NODE_STR = fbx_wrapperPINVOKE.FBXSDK_IO_END_NODE_STR_get();
  public static readonly bool IOSVisible = fbx_wrapperPINVOKE.IOSVisible_get();
  public static readonly bool IOSHidden = fbx_wrapperPINVOKE.IOSHidden_get();
  public static readonly bool IOSSavable = fbx_wrapperPINVOKE.IOSSavable_get();
  public static readonly bool IOSNotSavable = fbx_wrapperPINVOKE.IOSNotSavable_get();
  public static readonly bool IOSEnabled = fbx_wrapperPINVOKE.IOSEnabled_get();
  public static readonly bool IOSDisabled = fbx_wrapperPINVOKE.IOSDisabled_get();
  public static readonly int IOSBinary = fbx_wrapperPINVOKE.IOSBinary_get();
  public static readonly int IOSASCII = fbx_wrapperPINVOKE.IOSASCII_get();
  public static readonly string FBXSDK_CONTAINER_TEMPLATE_STR = fbx_wrapperPINVOKE.FBXSDK_CONTAINER_TEMPLATE_STR_get();
  public static readonly string FBXSDK_TEMPLATE_STR = fbx_wrapperPINVOKE.FBXSDK_TEMPLATE_STR_get();
  public static readonly string FBXSDK_EXTENDS_TEMPLATE_STR = fbx_wrapperPINVOKE.FBXSDK_EXTENDS_TEMPLATE_STR_get();
  public static readonly string FBXSDK_CURVENODE_TRANSFORM = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_TRANSFORM_get();
  public static readonly string FBXSDK_CURVENODE_TRANSLATION = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_TRANSLATION_get();
  public static readonly string FBXSDK_CURVENODE_ROTATION = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_ROTATION_get();
  public static readonly string FBXSDK_CURVENODE_SCALING = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_SCALING_get();
  public static readonly string FBXSDK_CURVENODE_COMPONENT_X = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COMPONENT_X_get();
  public static readonly string FBXSDK_CURVENODE_COMPONENT_Y = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COMPONENT_Y_get();
  public static readonly string FBXSDK_CURVENODE_COMPONENT_Z = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COMPONENT_Z_get();
  public static readonly string FBXSDK_CURVENODE_COLOR = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COLOR_get();
  public static readonly string FBXSDK_CURVENODE_COLOR_RED = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COLOR_RED_get();
  public static readonly string FBXSDK_CURVENODE_COLOR_GREEN = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COLOR_GREEN_get();
  public static readonly string FBXSDK_CURVENODE_COLOR_BLUE = fbx_wrapperPINVOKE.FBXSDK_CURVENODE_COLOR_BLUE_get();
  public static readonly string FBXSDK_TAKENODE_DEFAULT_NAME = fbx_wrapperPINVOKE.FBXSDK_TAKENODE_DEFAULT_NAME_get();
  public static readonly string FBXSDK_ROOTCURVE_DEFAULT_NAME = fbx_wrapperPINVOKE.FBXSDK_ROOTCURVE_DEFAULT_NAME_get();
}

}
