//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxPropertyEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxPropertyEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxPropertyEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static FbxPropertyEntry Create(int pParentId, FbxPropertyInfo pInfo, FbxPropertyValue pValue, FbxPropertyConnect pConnect) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxPropertyEntry_Create(pParentId, FbxPropertyInfo.getCPtr(pInfo), FbxPropertyValue.getCPtr(pValue), FbxPropertyConnect.getCPtr(pConnect));
    FbxPropertyEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyEntry(cPtr, false);
    return ret;
  }

  public void Destroy() {
    fbx_wrapperPINVOKE.FbxPropertyEntry_Destroy(swigCPtr);
  }

  public int GetParentId() {
    int ret = fbx_wrapperPINVOKE.FbxPropertyEntry_GetParentId(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = fbx_wrapperPINVOKE.FbxPropertyEntry_IsEmpty(swigCPtr);
    return ret;
  }

  public FbxPropertyInfo Get(FbxPropertyInfo arg0) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxPropertyEntry_Get__SWIG_0(swigCPtr, FbxPropertyInfo.getCPtr(arg0));
    FbxPropertyInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyInfo(cPtr, false);
    return ret;
  }

  public void Set(FbxPropertyInfo pInfo) {
    fbx_wrapperPINVOKE.FbxPropertyEntry_Set__SWIG_0(swigCPtr, FbxPropertyInfo.getCPtr(pInfo));
  }

  public FbxPropertyValue Get(FbxPropertyValue arg0) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxPropertyEntry_Get__SWIG_1(swigCPtr, FbxPropertyValue.getCPtr(arg0));
    FbxPropertyValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyValue(cPtr, false);
    return ret;
  }

  public void Set(FbxPropertyValue pValue) {
    fbx_wrapperPINVOKE.FbxPropertyEntry_Set__SWIG_1(swigCPtr, FbxPropertyValue.getCPtr(pValue));
  }

  public FbxPropertyConnect Get(FbxPropertyConnect arg0) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxPropertyEntry_Get__SWIG_2(swigCPtr, FbxPropertyConnect.getCPtr(arg0));
    FbxPropertyConnect ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyConnect(cPtr, false);
    return ret;
  }

  public void Set(FbxPropertyConnect pConnect) {
    fbx_wrapperPINVOKE.FbxPropertyEntry_Set__SWIG_2(swigCPtr, FbxPropertyConnect.getCPtr(pConnect));
  }

  public FbxPropertyFlags Get(FbxPropertyFlags arg0) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxPropertyEntry_Get__SWIG_3(swigCPtr, FbxPropertyFlags.getCPtr(arg0));
    FbxPropertyFlags ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyFlags(cPtr, false);
    return ret;
  }

  public void Set(FbxPropertyFlags pType) {
    fbx_wrapperPINVOKE.FbxPropertyEntry_Set__SWIG_3(swigCPtr, FbxPropertyFlags.getCPtr(pType));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
