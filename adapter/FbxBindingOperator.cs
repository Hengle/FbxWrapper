//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxBindingOperator : FbxBindingTableBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxBindingOperator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxBindingOperator_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxBindingOperator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxBindingOperator_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxBindingOperator Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxBindingOperator ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxBindingOperator(cPtr, false);
    return ret;
  }

  public new static FbxBindingOperator Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxBindingOperator ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxBindingOperator(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_FbxPropertyTT_FbxString_t FunctionName {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_FunctionName_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_FbxString_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_FunctionName_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_FbxString_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_FbxString_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_FbxString_t TargetName {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_TargetName_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_FbxString_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_TargetName_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_FbxString_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_FbxString_t(cPtr, false);
      return ret;
    } 
  }

  public static string sFunctionName {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_sFunctionName_set(value);
    } 
    get {
      string ret = fbx_wrapperPINVOKE.FbxBindingOperator_sFunctionName_get();
      return ret;
    } 
  }

  public static string sTargetName {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_sTargetName_set(value);
    } 
    get {
      string ret = fbx_wrapperPINVOKE.FbxBindingOperator_sTargetName_get();
      return ret;
    } 
  }

  public static string sDefaultFunctionName {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_sDefaultFunctionName_set(value);
    } 
    get {
      string ret = fbx_wrapperPINVOKE.FbxBindingOperator_sDefaultFunctionName_get();
      return ret;
    } 
  }

  public static string sDefaultTargetName {
    set {
      fbx_wrapperPINVOKE.FbxBindingOperator_sDefaultTargetName_set(value);
    } 
    get {
      string ret = fbx_wrapperPINVOKE.FbxBindingOperator_sDefaultTargetName_get();
      return ret;
    } 
  }

  public static void RegisterFunctions() {
    fbx_wrapperPINVOKE.FbxBindingOperator_RegisterFunctions();
  }

  public static void UnregisterFunctions() {
    fbx_wrapperPINVOKE.FbxBindingOperator_UnregisterFunctions();
  }

  public class Function : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Function(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Function obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Function() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxBindingOperator_Function(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual bool Evaluate(FbxBindingOperator pOperator, FbxObject pObject, SWIGTYPE_p_EFbxType pResultType, SWIGTYPE_p_p_void pResult) {
      bool ret = fbx_wrapperPINVOKE.FbxBindingOperator_Function_Evaluate(swigCPtr, FbxBindingOperator.getCPtr(pOperator), FbxObject.getCPtr(pObject), SWIGTYPE_p_EFbxType.getCPtr(pResultType), SWIGTYPE_p_p_void.getCPtr(pResult));
      return ret;
    }
  
    public virtual bool ReverseEvaluate(FbxBindingOperator pOperator, FbxObject pTarget, SWIGTYPE_p_void pIn, SWIGTYPE_p_p_void pOut, SWIGTYPE_p_EFbxType pOutType, bool setObj, int index) {
      bool ret = fbx_wrapperPINVOKE.FbxBindingOperator_Function_ReverseEvaluate(swigCPtr, FbxBindingOperator.getCPtr(pOperator), FbxObject.getCPtr(pTarget), SWIGTYPE_p_void.getCPtr(pIn), SWIGTYPE_p_p_void.getCPtr(pOut), SWIGTYPE_p_EFbxType.getCPtr(pOutType), setObj, index);
      return ret;
    }
  
  }

  public class FunctionCreatorBase : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal FunctionCreatorBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FunctionCreatorBase obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~FunctionCreatorBase() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxBindingOperator_FunctionCreatorBase(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual string GetFunctionName() {
      string ret = fbx_wrapperPINVOKE.FbxBindingOperator_FunctionCreatorBase_GetFunctionName(swigCPtr);
      return ret;
    }
  
    public virtual FbxBindingOperator.Function CreateFunction() {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_FunctionCreatorBase_CreateFunction(swigCPtr);
      FbxBindingOperator.Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxBindingOperator.Function(cPtr, false);
      return ret;
    }
  
  }

  public class FunctionRegistry : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal FunctionRegistry(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FunctionRegistry obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~FunctionRegistry() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            fbx_wrapperPINVOKE.delete_FbxBindingOperator_FunctionRegistry(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public static void RegisterFunctionCreator(FbxBindingOperator.FunctionCreatorBase pCreator) {
      fbx_wrapperPINVOKE.FbxBindingOperator_FunctionRegistry_RegisterFunctionCreator(FbxBindingOperator.FunctionCreatorBase.getCPtr(pCreator));
      if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public static void UnregisterFunctionCreator(FbxBindingOperator.FunctionCreatorBase pCreator) {
      fbx_wrapperPINVOKE.FbxBindingOperator_FunctionRegistry_UnregisterFunctionCreator(FbxBindingOperator.FunctionCreatorBase.getCPtr(pCreator));
      if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public static FbxBindingOperator.FunctionCreatorBase FindCreator(string pName) {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxBindingOperator_FunctionRegistry_FindCreator(pName);
      FbxBindingOperator.FunctionCreatorBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxBindingOperator.FunctionCreatorBase(cPtr, false);
      return ret;
    }
  
    public FunctionRegistry() : this(fbx_wrapperPINVOKE.new_FbxBindingOperator_FunctionRegistry(), true) {
    }
  
  }

  public bool EvaluateEntry(FbxObject pObject, string pEntryDestinationName, SWIGTYPE_p_EFbxType pResultType, SWIGTYPE_p_p_void pResult) {
    bool ret = fbx_wrapperPINVOKE.FbxBindingOperator_EvaluateEntry(swigCPtr, FbxObject.getCPtr(pObject), pEntryDestinationName, SWIGTYPE_p_EFbxType.getCPtr(pResultType), SWIGTYPE_p_p_void.getCPtr(pResult));
    return ret;
  }

  public bool GetEntryProperty(FbxObject pObject, string pEntryDestinationName, FbxProperty pProp) {
    bool ret = fbx_wrapperPINVOKE.FbxBindingOperator_GetEntryProperty(swigCPtr, FbxObject.getCPtr(pObject), pEntryDestinationName, FbxProperty.getCPtr(pProp));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
