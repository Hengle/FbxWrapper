//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxImporter : FbxIOBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxImporter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxImporter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxImporter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxImporter_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxImporter_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxImporter Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxImporter ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxImporter(cPtr, false);
    return ret;
  }

  public new static FbxImporter Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxImporter ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxImporter(cPtr, false);
    return ret;
  }

  public override bool Initialize(string pFileName, int pFileFormat, FbxIOSettings pIOSettings) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_0(swigCPtr, pFileName, pFileFormat, FbxIOSettings.getCPtr(pIOSettings));
    return ret;
  }

  public override bool Initialize(string pFileName, int pFileFormat) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_1(swigCPtr, pFileName, pFileFormat);
    return ret;
  }

  public override bool Initialize(string pFileName) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_2(swigCPtr, pFileName);
    return ret;
  }

  public virtual bool Initialize(FbxStream pStream, SWIGTYPE_p_void pStreamData, int pFileFormat, FbxIOSettings pIOSettings) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_3(swigCPtr, FbxStream.getCPtr(pStream), SWIGTYPE_p_void.getCPtr(pStreamData), pFileFormat, FbxIOSettings.getCPtr(pIOSettings));
    return ret;
  }

  public virtual bool Initialize(FbxStream pStream, SWIGTYPE_p_void pStreamData, int pFileFormat) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_4(swigCPtr, FbxStream.getCPtr(pStream), SWIGTYPE_p_void.getCPtr(pStreamData), pFileFormat);
    return ret;
  }

  public virtual bool Initialize(FbxStream pStream, SWIGTYPE_p_void pStreamData) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_5(swigCPtr, FbxStream.getCPtr(pStream), SWIGTYPE_p_void.getCPtr(pStreamData));
    return ret;
  }

  public virtual bool Initialize(FbxStream pStream) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Initialize__SWIG_6(swigCPtr, FbxStream.getCPtr(pStream));
    return ret;
  }

  public void GetFileVersion(SWIGTYPE_p_int pMajor, SWIGTYPE_p_int pMinor, SWIGTYPE_p_int pRevision) {
    fbx_wrapperPINVOKE.FbxImporter_GetFileVersion(swigCPtr, SWIGTYPE_p_int.getCPtr(pMajor), SWIGTYPE_p_int.getCPtr(pMinor), SWIGTYPE_p_int.getCPtr(pRevision));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetDefaultRenderResolution(FbxString pCamName, FbxString pResolutionMode, SWIGTYPE_p_double pW, SWIGTYPE_p_double pH) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetDefaultRenderResolution(swigCPtr, FbxString.getCPtr(pCamName), FbxString.getCPtr(pResolutionMode), SWIGTYPE_p_double.getCPtr(pW), SWIGTYPE_p_double.getCPtr(pH));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxIOFileHeaderInfo GetFileHeaderInfo() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetFileHeaderInfo(swigCPtr);
    FbxIOFileHeaderInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxIOFileHeaderInfo(cPtr, false);
    return ret;
  }

  public bool GetImportOptions(FbxImporter.EStreamOptionsGeneration pStreamOptionsGeneration) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetImportOptions__SWIG_0(swigCPtr, (int)pStreamOptionsGeneration);
    return ret;
  }

  public bool GetImportOptions() {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetImportOptions__SWIG_1(swigCPtr);
    return ret;
  }

  public bool GetImportOptions(FbxIO pFbxObject) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetImportOptions__SWIG_2(swigCPtr, FbxIO.getCPtr(pFbxObject));
    return ret;
  }

  public bool Import(FbxDocument pDocument, bool pNonBlocking) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Import__SWIG_0(swigCPtr, FbxDocument.getCPtr(pDocument), pNonBlocking);
    return ret;
  }

  public bool Import(FbxDocument pDocument) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_Import__SWIG_1(swigCPtr, FbxDocument.getCPtr(pDocument));
    return ret;
  }

  public bool IsImporting(SWIGTYPE_p_bool pImportResult) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_IsImporting(swigCPtr, SWIGTYPE_p_bool.getCPtr(pImportResult));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetProgress(FbxString pStatus) {
    float ret = fbx_wrapperPINVOKE.FbxImporter_GetProgress__SWIG_0(swigCPtr, FbxString.getCPtr(pStatus));
    return ret;
  }

  public float GetProgress() {
    float ret = fbx_wrapperPINVOKE.FbxImporter_GetProgress__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetProgressCallback(SWIGTYPE_p_f_p_void_float_p_q_const__char__bool pCallback, SWIGTYPE_p_void pArgs) {
    fbx_wrapperPINVOKE.FbxImporter_SetProgressCallback__SWIG_0(swigCPtr, SWIGTYPE_p_f_p_void_float_p_q_const__char__bool.getCPtr(pCallback), SWIGTYPE_p_void.getCPtr(pArgs));
  }

  public void SetProgressCallback(SWIGTYPE_p_f_p_void_float_p_q_const__char__bool pCallback) {
    fbx_wrapperPINVOKE.FbxImporter_SetProgressCallback__SWIG_1(swigCPtr, SWIGTYPE_p_f_p_void_float_p_q_const__char__bool.getCPtr(pCallback));
  }

  public void SetEmbeddingExtractionFolder(string pExtractFolder) {
    fbx_wrapperPINVOKE.FbxImporter_SetEmbeddingExtractionFolder(swigCPtr, pExtractFolder);
  }

  public string GetEmbeddingExtractionFolder() {
    string ret = fbx_wrapperPINVOKE.FbxImporter_GetEmbeddingExtractionFolder(swigCPtr);
    return ret;
  }

  public FbxIOSettings GetIOSettings() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetIOSettings(swigCPtr);
    FbxIOSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxIOSettings(cPtr, false);
    return ret;
  }

  public void SetIOSettings(FbxIOSettings pIOSettings) {
    fbx_wrapperPINVOKE.FbxImporter_SetIOSettings(swigCPtr, FbxIOSettings.getCPtr(pIOSettings));
  }

  public int GetAnimStackCount() {
    int ret = fbx_wrapperPINVOKE.FbxImporter_GetAnimStackCount(swigCPtr);
    return ret;
  }

  public FbxTakeInfo GetTakeInfo(int pIndex) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetTakeInfo(swigCPtr, pIndex);
    FbxTakeInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxTakeInfo(cPtr, false);
    return ret;
  }

  public FbxString GetActiveAnimStackName() {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.FbxImporter_GetActiveAnimStackName(swigCPtr), true);
    return ret;
  }

  public FbxDocumentInfo GetSceneInfo() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetSceneInfo(swigCPtr);
    FbxDocumentInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDocumentInfo(cPtr, false);
    return ret;
  }

  public int GetFileFormat() {
    int ret = fbx_wrapperPINVOKE.FbxImporter_GetFileFormat(swigCPtr);
    return ret;
  }

  public bool IsFBX() {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_IsFBX(swigCPtr);
    return ret;
  }

  public FbxFile GetFile() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetFile(swigCPtr);
    FbxFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxFile(cPtr, false);
    return ret;
  }

  public FbxStream GetStream() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetStream(swigCPtr);
    FbxStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxStream(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetStreamData() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxImporter_GetStreamData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void ParseForGlobalSettings(bool pState) {
    fbx_wrapperPINVOKE.FbxImporter_ParseForGlobalSettings(swigCPtr, pState);
  }

  public void ParseForStatistics(bool pState) {
    fbx_wrapperPINVOKE.FbxImporter_ParseForStatistics(swigCPtr, pState);
  }

  public bool GetAxisInfo(FbxAxisSystem pAxisSystem, FbxSystemUnit pSystemUnits) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetAxisInfo(swigCPtr, FbxAxisSystem.getCPtr(pAxisSystem), FbxSystemUnit.getCPtr(pSystemUnits));
    return ret;
  }

  public bool GetStatistics(FbxStatistics pStatistics) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetStatistics(swigCPtr, FbxStatistics.getCPtr(pStatistics));
    return ret;
  }

  public bool GetFrameRate(SWIGTYPE_p_FbxTime__EMode pTimeMode) {
    bool ret = fbx_wrapperPINVOKE.FbxImporter_GetFrameRate(swigCPtr, SWIGTYPE_p_FbxTime__EMode.getCPtr(pTimeMode));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EStreamOptionsGeneration {
    eParseFile,
    eDoNotParseFile
  }

}

}
