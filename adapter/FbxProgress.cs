//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxProgress : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxProgress(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxProgress obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxProgress() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          fbx_wrapperPINVOKE.delete_FbxProgress(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void SetProgressCallback(SWIGTYPE_p_f_p_void_float_p_q_const__char__bool pCallback, SWIGTYPE_p_void pArgs) {
    fbx_wrapperPINVOKE.FbxProgress_SetProgressCallback__SWIG_0(swigCPtr, SWIGTYPE_p_f_p_void_float_p_q_const__char__bool.getCPtr(pCallback), SWIGTYPE_p_void.getCPtr(pArgs));
  }

  public void SetProgressCallback(SWIGTYPE_p_f_p_void_float_p_q_const__char__bool pCallback) {
    fbx_wrapperPINVOKE.FbxProgress_SetProgressCallback__SWIG_1(swigCPtr, SWIGTYPE_p_f_p_void_float_p_q_const__char__bool.getCPtr(pCallback));
  }

  public void SetTotal(float pTotal) {
    fbx_wrapperPINVOKE.FbxProgress_SetTotal(swigCPtr, pTotal);
  }

  public void SetThreshold(float pThreshold) {
    fbx_wrapperPINVOKE.FbxProgress_SetThreshold(swigCPtr, pThreshold);
  }

  public void Update(float pDelta, string pStatus) {
    fbx_wrapperPINVOKE.FbxProgress_Update__SWIG_0(swigCPtr, pDelta, pStatus);
  }

  public void Update(float pDelta) {
    fbx_wrapperPINVOKE.FbxProgress_Update__SWIG_1(swigCPtr, pDelta);
  }

  public void Reset() {
    fbx_wrapperPINVOKE.FbxProgress_Reset(swigCPtr);
  }

  public float GetProgress(FbxString pStatus) {
    float ret = fbx_wrapperPINVOKE.FbxProgress_GetProgress__SWIG_0(swigCPtr, FbxString.getCPtr(pStatus));
    return ret;
  }

  public float GetProgress() {
    float ret = fbx_wrapperPINVOKE.FbxProgress_GetProgress__SWIG_1(swigCPtr);
    return ret;
  }

  public void Complete(string pStatus) {
    fbx_wrapperPINVOKE.FbxProgress_Complete__SWIG_0(swigCPtr, pStatus);
  }

  public void Complete() {
    fbx_wrapperPINVOKE.FbxProgress_Complete__SWIG_1(swigCPtr);
  }

  public void Cancel() {
    fbx_wrapperPINVOKE.FbxProgress_Cancel(swigCPtr);
  }

  public bool IsCanceled() {
    bool ret = fbx_wrapperPINVOKE.FbxProgress_IsCanceled(swigCPtr);
    return ret;
  }

  public FbxProgress() : this(fbx_wrapperPINVOKE.new_FbxProgress(), true) {
  }

}

}
