//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxFile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxFile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxFile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxFile() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          fbx_wrapperPINVOKE.delete_FbxFile(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxFile() : this(fbx_wrapperPINVOKE.new_FbxFile(), true) {
  }

  public virtual bool Open(string pFileName_UTF8, FbxFile.EMode pMode, bool pBinary) {
    bool ret = fbx_wrapperPINVOKE.FbxFile_Open__SWIG_0(swigCPtr, pFileName_UTF8, (int)pMode, pBinary);
    return ret;
  }

  public virtual bool Open(string pFileName_UTF8, FbxFile.EMode pMode) {
    bool ret = fbx_wrapperPINVOKE.FbxFile_Open__SWIG_1(swigCPtr, pFileName_UTF8, (int)pMode);
    return ret;
  }

  public virtual bool Open(string pFileName_UTF8) {
    bool ret = fbx_wrapperPINVOKE.FbxFile_Open__SWIG_2(swigCPtr, pFileName_UTF8);
    return ret;
  }

  public virtual bool Open(FbxStream pStream, SWIGTYPE_p_void pStreamData, string pMode) {
    bool ret = fbx_wrapperPINVOKE.FbxFile_Open__SWIG_3(swigCPtr, FbxStream.getCPtr(pStream), SWIGTYPE_p_void.getCPtr(pStreamData), pMode);
    return ret;
  }

  public virtual bool Close() {
    bool ret = fbx_wrapperPINVOKE.FbxFile_Close(swigCPtr);
    return ret;
  }

  public virtual void Seek(SWIGTYPE_p_signed___int64 pOffset, FbxFile.ESeekPos pSeekPos) {
    fbx_wrapperPINVOKE.FbxFile_Seek__SWIG_0(swigCPtr, SWIGTYPE_p_signed___int64.getCPtr(pOffset), (int)pSeekPos);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Seek(SWIGTYPE_p_signed___int64 pOffset) {
    fbx_wrapperPINVOKE.FbxFile_Seek__SWIG_1(swigCPtr, SWIGTYPE_p_signed___int64.getCPtr(pOffset));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_signed___int64 Tell() {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxFile_Tell(swigCPtr), true);
    return ret;
  }

  public virtual uint Read(SWIGTYPE_p_void pDstBuf, uint pSize) {
    uint ret = fbx_wrapperPINVOKE.FbxFile_Read(swigCPtr, SWIGTYPE_p_void.getCPtr(pDstBuf), pSize);
    return ret;
  }

  public virtual string ReadString(string pDstBuf, uint pDstSize, bool pStopAtFirstWhiteSpace) {
    string ret = fbx_wrapperPINVOKE.FbxFile_ReadString__SWIG_0(swigCPtr, pDstBuf, pDstSize, pStopAtFirstWhiteSpace);
    return ret;
  }

  public virtual string ReadString(string pDstBuf, uint pDstSize) {
    string ret = fbx_wrapperPINVOKE.FbxFile_ReadString__SWIG_1(swigCPtr, pDstBuf, pDstSize);
    return ret;
  }

  public virtual uint Write(SWIGTYPE_p_void pSrcBuf, uint pSize) {
    uint ret = fbx_wrapperPINVOKE.FbxFile_Write(swigCPtr, SWIGTYPE_p_void.getCPtr(pSrcBuf), pSize);
    return ret;
  }

  public virtual bool WriteFormat(string pFormat) {
    bool ret = fbx_wrapperPINVOKE.FbxFile_WriteFormat(swigCPtr, pFormat);
    return ret;
  }

  public virtual bool Truncate(SWIGTYPE_p_signed___int64 pSize) {
    bool ret = fbx_wrapperPINVOKE.FbxFile_Truncate(swigCPtr, SWIGTYPE_p_signed___int64.getCPtr(pSize));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool EndOfFile() {
    bool ret = fbx_wrapperPINVOKE.FbxFile_EndOfFile(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_signed___int64 GetSize() {
    SWIGTYPE_p_signed___int64 ret = new SWIGTYPE_p_signed___int64(fbx_wrapperPINVOKE.FbxFile_GetSize(swigCPtr), true);
    return ret;
  }

  public virtual void GetMemoryFileInfo(SWIGTYPE_p_p_void pMemPtr, uint pSize) {
    fbx_wrapperPINVOKE.FbxFile_GetMemoryFileInfo(swigCPtr, SWIGTYPE_p_p_void.getCPtr(pMemPtr), pSize);
  }

  public bool IsOpen() {
    bool ret = fbx_wrapperPINVOKE.FbxFile_IsOpen(swigCPtr);
    return ret;
  }

  public bool IsStream() {
    bool ret = fbx_wrapperPINVOKE.FbxFile_IsStream(swigCPtr);
    return ret;
  }

  public string GetFilePathName() {
    string ret = fbx_wrapperPINVOKE.FbxFile_GetFilePathName(swigCPtr);
    return ret;
  }

  public FbxFile.EMode GetFileMode() {
    FbxFile.EMode ret = (FbxFile.EMode)fbx_wrapperPINVOKE.FbxFile_GetFileMode(swigCPtr);
    return ret;
  }

  public int GetLastError() {
    int ret = fbx_wrapperPINVOKE.FbxFile_GetLastError(swigCPtr);
    return ret;
  }

  public void ClearError() {
    fbx_wrapperPINVOKE.FbxFile_ClearError(swigCPtr);
  }

  public enum EMode {
    eNone,
    eReadOnly,
    eReadWrite,
    eCreateWriteOnly,
    eCreateReadWrite,
    eCreateAppend
  }

  public enum ESeekPos {
    eBegin,
    eCurrent,
    eEnd
  }

}

}
