//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxFileTexture : FbxTexture {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxFileTexture(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxFileTexture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxFileTexture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxFileTexture_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFileTexture_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxFileTexture_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxFileTexture Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFileTexture_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxFileTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxFileTexture(cPtr, false);
    return ret;
  }

  public new static FbxFileTexture Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFileTexture_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxFileTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxFileTexture(cPtr, false);
    return ret;
  }

  public FbxPropertyTBool UseMaterial {
    set {
      fbx_wrapperPINVOKE.FbxFileTexture_UseMaterial_set(swigCPtr, FbxPropertyTBool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFileTexture_UseMaterial_get(swigCPtr);
      FbxPropertyTBool ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTBool(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyTBool UseMipMap {
    set {
      fbx_wrapperPINVOKE.FbxFileTexture_UseMipMap_set(swigCPtr, FbxPropertyTBool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxFileTexture_UseMipMap_get(swigCPtr);
      FbxPropertyTBool ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTBool(cPtr, false);
      return ret;
    } 
  }

  public override void Reset() {
    fbx_wrapperPINVOKE.FbxFileTexture_Reset(swigCPtr);
  }

  public bool SetFileName(string pName) {
    bool ret = fbx_wrapperPINVOKE.FbxFileTexture_SetFileName(swigCPtr, pName);
    return ret;
  }

  public bool SetRelativeFileName(string pName) {
    bool ret = fbx_wrapperPINVOKE.FbxFileTexture_SetRelativeFileName(swigCPtr, pName);
    return ret;
  }

  public string GetFileName() {
    string ret = fbx_wrapperPINVOKE.FbxFileTexture_GetFileName(swigCPtr);
    return ret;
  }

  public string GetRelativeFileName() {
    string ret = fbx_wrapperPINVOKE.FbxFileTexture_GetRelativeFileName(swigCPtr);
    return ret;
  }

  public void SetMaterialUse(FbxFileTexture.EMaterialUse pMaterialUse) {
    fbx_wrapperPINVOKE.FbxFileTexture_SetMaterialUse(swigCPtr, (int)pMaterialUse);
  }

  public FbxFileTexture.EMaterialUse GetMaterialUse() {
    FbxFileTexture.EMaterialUse ret = (FbxFileTexture.EMaterialUse)fbx_wrapperPINVOKE.FbxFileTexture_GetMaterialUse(swigCPtr);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(fbx_wrapperPINVOKE.FbxFileTexture_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool eq(FbxFileTexture pTexture) {
    bool ret = fbx_wrapperPINVOKE.FbxFileTexture_eq(swigCPtr, FbxFileTexture.getCPtr(pTexture));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxString GetMediaName() {
    FbxString ret = new FbxString(fbx_wrapperPINVOKE.FbxFileTexture_GetMediaName(swigCPtr), false);
    return ret;
  }

  public void SetMediaName(string pMediaName) {
    fbx_wrapperPINVOKE.FbxFileTexture_SetMediaName(swigCPtr, pMediaName);
  }

  public enum EMaterialUse {
    eModelMaterial,
    eDefaultMaterial
  }

}

}
