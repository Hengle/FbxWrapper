//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxNurbsSurface : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxNurbsSurface(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxNurbsSurface_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxNurbsSurface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxNurbsSurface_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxNurbsSurface_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxNurbsSurface_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxNurbsSurface Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxNurbsSurface_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxNurbsSurface ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNurbsSurface(cPtr, false);
    return ret;
  }

  public new static FbxNurbsSurface Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxNurbsSurface_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxNurbsSurface ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNurbsSurface(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)fbx_wrapperPINVOKE.FbxNurbsSurface_GetAttributeType(swigCPtr);
    return ret;
  }

  public void Reset() {
    fbx_wrapperPINVOKE.FbxNurbsSurface_Reset(swigCPtr);
  }

  public void SetSurfaceMode(FbxGeometry.ESurfaceMode pMode) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_SetSurfaceMode(swigCPtr, (int)pMode);
  }

  public FbxGeometry.ESurfaceMode GetSurfaceMode() {
    FbxGeometry.ESurfaceMode ret = (FbxGeometry.ESurfaceMode)fbx_wrapperPINVOKE.FbxNurbsSurface_GetSurfaceMode(swigCPtr);
    return ret;
  }

  public void InitControlPoints(int pUCount, FbxNurbsSurface.EType pUType, int pVCount, FbxNurbsSurface.EType pVType) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_InitControlPoints__SWIG_0(swigCPtr, pUCount, (int)pUType, pVCount, (int)pVType);
  }

  public int GetUCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetUCount(swigCPtr);
    return ret;
  }

  public int GetVCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetVCount(swigCPtr);
    return ret;
  }

  public FbxNurbsSurface.EType GetNurbsUType() {
    FbxNurbsSurface.EType ret = (FbxNurbsSurface.EType)fbx_wrapperPINVOKE.FbxNurbsSurface_GetNurbsUType(swigCPtr);
    return ret;
  }

  public FbxNurbsSurface.EType GetNurbsVType() {
    FbxNurbsSurface.EType ret = (FbxNurbsSurface.EType)fbx_wrapperPINVOKE.FbxNurbsSurface_GetNurbsVType(swigCPtr);
    return ret;
  }

  public int GetUKnotCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetUKnotCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double GetUKnotVector() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxNurbsSurface_GetUKnotVector(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public int GetVKnotCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetVKnotCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double GetVKnotVector() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxNurbsSurface_GetVKnotVector(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public void SetOrder(uint pUOrder, uint pVOrder) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_SetOrder(swigCPtr, pUOrder, pVOrder);
  }

  public int GetUOrder() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetUOrder(swigCPtr);
    return ret;
  }

  public int GetVOrder() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetVOrder(swigCPtr);
    return ret;
  }

  public void SetStep(int pUStep, int pVStep) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_SetStep(swigCPtr, pUStep, pVStep);
  }

  public int GetUStep() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetUStep(swigCPtr);
    return ret;
  }

  public int GetVStep() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetVStep(swigCPtr);
    return ret;
  }

  public int GetUSpanCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetUSpanCount(swigCPtr);
    return ret;
  }

  public int GetVSpanCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetVSpanCount(swigCPtr);
    return ret;
  }

  public void SetApplyFlipUV(bool pFlag) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_SetApplyFlipUV(swigCPtr, pFlag);
  }

  public bool GetApplyFlipUV() {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetApplyFlipUV(swigCPtr);
    return ret;
  }

  public void SetApplyFlipLinks(bool pFlag) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_SetApplyFlipLinks(swigCPtr, pFlag);
  }

  public bool GetApplyFlipLinks() {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetApplyFlipLinks(swigCPtr);
    return ret;
  }

  public bool GetApplyFlip() {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetApplyFlip(swigCPtr);
    return ret;
  }

  public void AddCurveOnSurface(FbxNode pCurve) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_AddCurveOnSurface(swigCPtr, FbxNode.getCPtr(pCurve));
  }

  public FbxNode GetCurveOnSurface(int pIndex) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxNurbsSurface_GetCurveOnSurface__SWIG_0(swigCPtr, pIndex);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    return ret;
  }

  public int GetCurveOnSurfaceCount() {
    int ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetCurveOnSurfaceCount(swigCPtr);
    return ret;
  }

  public bool RemoveCurveOnSurface(FbxNode pCurve) {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_RemoveCurveOnSurface(swigCPtr, FbxNode.getCPtr(pCurve));
    return ret;
  }

  public bool IsRational() {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_IsRational(swigCPtr);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(fbx_wrapperPINVOKE.FbxNurbsSurface_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void InitControlPoints(int pCount) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_InitControlPoints__SWIG_1(swigCPtr, pCount);
  }

  public void SetFlipNormals(bool pFlipNormals) {
    fbx_wrapperPINVOKE.FbxNurbsSurface_SetFlipNormals(swigCPtr, pFlipNormals);
  }

  public bool GetFlipNormals() {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_GetFlipNormals(swigCPtr);
    return ret;
  }

  public bool IsValidKnots() {
    bool ret = fbx_wrapperPINVOKE.FbxNurbsSurface_IsValidKnots(swigCPtr);
    return ret;
  }

  public enum EType {
    ePeriodic,
    eClosed,
    eOpen
  }

  public enum EErrorCode {
    eNurbsTypeUnknown,
    eWrongNumberOfControlPoint,
    eWeightTooSmall,
    eUKnotVectorError,
    eVKnotVectorError,
    eErrorCount
  }

}

}
