//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxSkeleton : FbxNodeAttribute {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxSkeleton(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxSkeleton_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxSkeleton obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxSkeleton_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSkeleton_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxSkeleton_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxSkeleton Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSkeleton_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxSkeleton ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSkeleton(cPtr, false);
    return ret;
  }

  public new static FbxSkeleton Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSkeleton_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxSkeleton ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSkeleton(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)fbx_wrapperPINVOKE.FbxSkeleton_GetAttributeType(swigCPtr);
    return ret;
  }

  public void Reset() {
    fbx_wrapperPINVOKE.FbxSkeleton_Reset(swigCPtr);
  }

  public void SetSkeletonType(FbxSkeleton.EType pSkeletonType) {
    fbx_wrapperPINVOKE.FbxSkeleton_SetSkeletonType(swigCPtr, (int)pSkeletonType);
  }

  public FbxSkeleton.EType GetSkeletonType() {
    FbxSkeleton.EType ret = (FbxSkeleton.EType)fbx_wrapperPINVOKE.FbxSkeleton_GetSkeletonType(swigCPtr);
    return ret;
  }

  public bool GetSkeletonTypeIsSet() {
    bool ret = fbx_wrapperPINVOKE.FbxSkeleton_GetSkeletonTypeIsSet(swigCPtr);
    return ret;
  }

  public FbxSkeleton.EType GetSkeletonTypeDefaultValue() {
    FbxSkeleton.EType ret = (FbxSkeleton.EType)fbx_wrapperPINVOKE.FbxSkeleton_GetSkeletonTypeDefaultValue(swigCPtr);
    return ret;
  }

  public double GetLimbLengthDefaultValue() {
    double ret = fbx_wrapperPINVOKE.FbxSkeleton_GetLimbLengthDefaultValue(swigCPtr);
    return ret;
  }

  public double GetLimbNodeSizeDefaultValue() {
    double ret = fbx_wrapperPINVOKE.FbxSkeleton_GetLimbNodeSizeDefaultValue(swigCPtr);
    return ret;
  }

  public bool SetLimbNodeColor(FbxColor pColor) {
    bool ret = fbx_wrapperPINVOKE.FbxSkeleton_SetLimbNodeColor(swigCPtr, FbxColor.getCPtr(pColor));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxColor GetLimbNodeColor() {
    FbxColor ret = new FbxColor(fbx_wrapperPINVOKE.FbxSkeleton_GetLimbNodeColor(swigCPtr), true);
    return ret;
  }

  public bool GetLimbNodeColorIsSet() {
    bool ret = fbx_wrapperPINVOKE.FbxSkeleton_GetLimbNodeColorIsSet(swigCPtr);
    return ret;
  }

  public FbxColor GetLimbNodeColorDefaultValue() {
    FbxColor ret = new FbxColor(fbx_wrapperPINVOKE.FbxSkeleton_GetLimbNodeColorDefaultValue(swigCPtr), true);
    return ret;
  }

  public bool IsSkeletonRoot() {
    bool ret = fbx_wrapperPINVOKE.FbxSkeleton_IsSkeletonRoot(swigCPtr);
    return ret;
  }

  public static string sSize {
    set {
      fbx_wrapperPINVOKE.FbxSkeleton_sSize_set(value);
    } 
    get {
      string ret = fbx_wrapperPINVOKE.FbxSkeleton_sSize_get();
      return ret;
    } 
  }

  public static string sLimbLength {
    set {
      fbx_wrapperPINVOKE.FbxSkeleton_sLimbLength_set(value);
    } 
    get {
      string ret = fbx_wrapperPINVOKE.FbxSkeleton_sLimbLength_get();
      return ret;
    } 
  }

  public static double sDefaultSize {
    get {
      double ret = fbx_wrapperPINVOKE.FbxSkeleton_sDefaultSize_get();
      return ret;
    } 
  }

  public static double sDefaultLimbLength {
    get {
      double ret = fbx_wrapperPINVOKE.FbxSkeleton_sDefaultLimbLength_get();
      return ret;
    } 
  }

  public FbxPropertyTDouble Size {
    set {
      fbx_wrapperPINVOKE.FbxSkeleton_Size_set(swigCPtr, FbxPropertyTDouble.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSkeleton_Size_get(swigCPtr);
      FbxPropertyTDouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTDouble(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyTDouble LimbLength {
    set {
      fbx_wrapperPINVOKE.FbxSkeleton_LimbLength_set(swigCPtr, FbxPropertyTDouble.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSkeleton_LimbLength_get(swigCPtr);
      FbxPropertyTDouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTDouble(cPtr, false);
      return ret;
    } 
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(fbx_wrapperPINVOKE.FbxSkeleton_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EType {
    eRoot,
    eLimb,
    eLimbNode,
    eEffector
  }

}

}
