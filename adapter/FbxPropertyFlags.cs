//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxPropertyFlags : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxPropertyFlags(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxPropertyFlags obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxPropertyFlags() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          fbx_wrapperPINVOKE.delete_FbxPropertyFlags(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool SetFlags(FbxPropertyFlags.EFlags pMask, FbxPropertyFlags.EFlags pFlags) {
    bool ret = fbx_wrapperPINVOKE.FbxPropertyFlags_SetFlags(swigCPtr, (int)pMask, (int)pFlags);
    return ret;
  }

  public FbxPropertyFlags.EFlags GetFlags() {
    FbxPropertyFlags.EFlags ret = (FbxPropertyFlags.EFlags)fbx_wrapperPINVOKE.FbxPropertyFlags_GetFlags(swigCPtr);
    return ret;
  }

  public FbxPropertyFlags.EFlags GetMergedFlags(FbxPropertyFlags.EFlags pFlags) {
    FbxPropertyFlags.EFlags ret = (FbxPropertyFlags.EFlags)fbx_wrapperPINVOKE.FbxPropertyFlags_GetMergedFlags(swigCPtr, (int)pFlags);
    return ret;
  }

  public bool ModifyFlags(FbxPropertyFlags.EFlags pFlags, bool pValue) {
    bool ret = fbx_wrapperPINVOKE.FbxPropertyFlags_ModifyFlags(swigCPtr, (int)pFlags, pValue);
    return ret;
  }

  public FbxPropertyFlags.EInheritType GetFlagsInheritType(FbxPropertyFlags.EFlags pFlags) {
    FbxPropertyFlags.EInheritType ret = (FbxPropertyFlags.EInheritType)fbx_wrapperPINVOKE.FbxPropertyFlags_GetFlagsInheritType(swigCPtr, (int)pFlags);
    return ret;
  }

  public bool SetMask(FbxPropertyFlags.EFlags pFlags) {
    bool ret = fbx_wrapperPINVOKE.FbxPropertyFlags_SetMask(swigCPtr, (int)pFlags);
    return ret;
  }

  public bool UnsetMask(FbxPropertyFlags.EFlags pFlags) {
    bool ret = fbx_wrapperPINVOKE.FbxPropertyFlags_UnsetMask(swigCPtr, (int)pFlags);
    return ret;
  }

  public FbxPropertyFlags.EFlags GetMask() {
    FbxPropertyFlags.EFlags ret = (FbxPropertyFlags.EFlags)fbx_wrapperPINVOKE.FbxPropertyFlags_GetMask(swigCPtr);
    return ret;
  }

  public bool Equal(FbxPropertyFlags pOther, FbxPropertyFlags.EFlags pFlags) {
    bool ret = fbx_wrapperPINVOKE.FbxPropertyFlags_Equal(swigCPtr, FbxPropertyFlags.getCPtr(pOther), (int)pFlags);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxPropertyFlags() : this(fbx_wrapperPINVOKE.new_FbxPropertyFlags__SWIG_0(), true) {
  }

  public FbxPropertyFlags(FbxPropertyFlags.EFlags pFlags) : this(fbx_wrapperPINVOKE.new_FbxPropertyFlags__SWIG_1((int)pFlags), true) {
  }

  public FbxPropertyFlags Clone(FbxPropertyPage pPage) {
    FbxPropertyFlags ret = new FbxPropertyFlags(fbx_wrapperPINVOKE.FbxPropertyFlags_Clone(swigCPtr, FbxPropertyPage.getCPtr(pPage)), true);
    return ret;
  }

  public enum EInheritType {
    eOverride,
    eInherit,
    eDeleted
  }

  public enum EFlags {
    eNone = 0,
    eStatic = 1 << 0,
    eAnimatable = 1 << 1,
    eAnimated = 1 << 2,
    eImported = 1 << 3,
    eUserDefined = 1 << 4,
    eHidden = 1 << 5,
    eNotSavable = 1 << 6,
    eLockedMember0 = 1 << 7,
    eLockedMember1 = 1 << 8,
    eLockedMember2 = 1 << 9,
    eLockedMember3 = 1 << 10,
    eLockedAll = eLockedMember0|eLockedMember1|eLockedMember2|eLockedMember3,
    eMutedMember0 = 1 << 11,
    eMutedMember1 = 1 << 12,
    eMutedMember2 = 1 << 13,
    eMutedMember3 = 1 << 14,
    eMutedAll = eMutedMember0|eMutedMember1|eMutedMember2|eMutedMember3,
    eUIDisabled = 1 << 15,
    eUIGroup = 1 << 16,
    eUIBoolGroup = 1 << 17,
    eUIExpanded = 1 << 18,
    eUINoCaption = 1 << 19,
    eUIPanel = 1 << 20,
    eUILeftLabel = 1 << 21,
    eUIHidden = 1 << 22,
    eCtrlFlags = eStatic|eAnimatable|eAnimated|eImported|eUserDefined|eHidden|eNotSavable|eLockedAll|eMutedAll,
    eUIFlags = eUIDisabled|eUIGroup|eUIBoolGroup|eUIExpanded|eUINoCaption|eUIPanel|eUILeftLabel|eUIHidden,
    eAllFlags = eCtrlFlags|eUIFlags,
    eFlagCount = 23
  }

  public static readonly int sLockedMembersMax = fbx_wrapperPINVOKE.FbxPropertyFlags_sLockedMembersMax_get();
  public static readonly int sLockedMembersBitOffset = fbx_wrapperPINVOKE.FbxPropertyFlags_sLockedMembersBitOffset_get();
  public static readonly int sMutedMembersMax = fbx_wrapperPINVOKE.FbxPropertyFlags_sMutedMembersMax_get();
  public static readonly int sMutedMembersBitOffset = fbx_wrapperPINVOKE.FbxPropertyFlags_sMutedMembersBitOffset_get();
}

}
