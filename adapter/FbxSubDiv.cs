//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxSubDiv : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxSubDiv(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxSubDiv_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxSubDiv obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxSubDiv_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(fbx_wrapperPINVOKE.FbxSubDiv_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxSubDiv Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxSubDiv ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSubDiv(cPtr, false);
    return ret;
  }

  public new static FbxSubDiv Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxSubDiv ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSubDiv(cPtr, false);
    return ret;
  }

  public void InitSubdivLevel(int pLevelCount, FbxSubDiv.EScheme pScheme, FbxSubDiv.ETesselationPattern pPattern) {
    fbx_wrapperPINVOKE.FbxSubDiv_InitSubdivLevel__SWIG_0(swigCPtr, pLevelCount, (int)pScheme, (int)pPattern);
  }

  public void InitSubdivLevel(int pLevelCount, FbxSubDiv.EScheme pScheme) {
    fbx_wrapperPINVOKE.FbxSubDiv_InitSubdivLevel__SWIG_1(swigCPtr, pLevelCount, (int)pScheme);
  }

  public void InitSubdivLevel(int pLevelCount) {
    fbx_wrapperPINVOKE.FbxSubDiv_InitSubdivLevel__SWIG_2(swigCPtr, pLevelCount);
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)fbx_wrapperPINVOKE.FbxSubDiv_GetAttributeType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FbxArrayT_FbxMesh_p_t mSubDivLevel {
    set {
      fbx_wrapperPINVOKE.FbxSubDiv_mSubDivLevel_set(swigCPtr, SWIGTYPE_p_FbxArrayT_FbxMesh_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_mSubDivLevel_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_FbxMesh_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_FbxMesh_p_t(cPtr, false);
      return ret;
    } 
  }

  public FbxMesh GetBaseMesh() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_GetBaseMesh(swigCPtr);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    return ret;
  }

  public FbxMesh GetFinestMesh() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_GetFinestMesh(swigCPtr);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    return ret;
  }

  public bool SetFinestMesh(FbxMesh pMesh) {
    bool ret = fbx_wrapperPINVOKE.FbxSubDiv_SetFinestMesh(swigCPtr, FbxMesh.getCPtr(pMesh));
    return ret;
  }

  public bool SetBaseMesh(FbxMesh pMesh) {
    bool ret = fbx_wrapperPINVOKE.FbxSubDiv_SetBaseMesh(swigCPtr, FbxMesh.getCPtr(pMesh));
    return ret;
  }

  public FbxMesh GetMesh(int pLevel) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_GetMesh(swigCPtr, pLevel);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    return ret;
  }

  public void SetSubdivLevelMesh(int pLevel, FbxMesh pMesh) {
    fbx_wrapperPINVOKE.FbxSubDiv_SetSubdivLevelMesh(swigCPtr, pLevel, FbxMesh.getCPtr(pMesh));
  }

  public int GetLevelCount() {
    int ret = fbx_wrapperPINVOKE.FbxSubDiv_GetLevelCount(swigCPtr);
    return ret;
  }

  public int GetCurrentLevel() {
    int ret = fbx_wrapperPINVOKE.FbxSubDiv_GetCurrentLevel(swigCPtr);
    return ret;
  }

  public void SetCurrentLevel(int pCurrentLevel) {
    fbx_wrapperPINVOKE.FbxSubDiv_SetCurrentLevel(swigCPtr, pCurrentLevel);
  }

  public FbxMesh GetCurrentMesh() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxSubDiv_GetCurrentMesh(swigCPtr);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    return ret;
  }

  public FbxSubDiv.EScheme GetSubdivScheme() {
    FbxSubDiv.EScheme ret = (FbxSubDiv.EScheme)fbx_wrapperPINVOKE.FbxSubDiv_GetSubdivScheme(swigCPtr);
    return ret;
  }

  public FbxSubDiv.ETesselationPattern GetTessPattern() {
    FbxSubDiv.ETesselationPattern ret = (FbxSubDiv.ETesselationPattern)fbx_wrapperPINVOKE.FbxSubDiv_GetTessPattern(swigCPtr);
    return ret;
  }

  public void SetSubdivScheme(FbxSubDiv.EScheme pScheme) {
    fbx_wrapperPINVOKE.FbxSubDiv_SetSubdivScheme(swigCPtr, (int)pScheme);
  }

  public void SetTessPattern(FbxSubDiv.ETesselationPattern pPattern) {
    fbx_wrapperPINVOKE.FbxSubDiv_SetTessPattern(swigCPtr, (int)pPattern);
  }

  public FbxSubDiv.EDisplaySmoothness GetDisplaySmoothness() {
    FbxSubDiv.EDisplaySmoothness ret = (FbxSubDiv.EDisplaySmoothness)fbx_wrapperPINVOKE.FbxSubDiv_GetDisplaySmoothness(swigCPtr);
    return ret;
  }

  public void SetDisplaySmoothness(FbxSubDiv.EDisplaySmoothness pSmoothness) {
    fbx_wrapperPINVOKE.FbxSubDiv_SetDisplaySmoothness(swigCPtr, (int)pSmoothness);
  }

  public enum EScheme {
    eCatmullClark,
    eDooCSabin,
    eLoop,
    eLinear
  }

  public enum ETesselationPattern {
    eOddFractional,
    eEvenFractional,
    eInteger,
    ePower2
  }

  public enum EDisplaySmoothness {
    eHull,
    eRough,
    eMedium,
    eFine
  }

  public static readonly int MAX_SUBDIV_LEVEL = fbx_wrapperPINVOKE.FbxSubDiv_MAX_SUBDIV_LEVEL_get();
}

}
